{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/oranges/source/css/base.css","path":"css/base.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/demo_index.html","path":"iconfont/demo_index.html","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/github-markdown.css","path":"css/github-markdown.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/css/highlight.css","path":"css/highlight.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.eot","path":"iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/demo.css","path":"iconfont/demo.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.ttf","path":"iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.woff","path":"iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.woff2","path":"iconfont/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.css","path":"iconfont/iconfont.css","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.json","path":"iconfont/iconfont.json","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.svg","path":"iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/activeNav.js","path":"js/activeNav.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/backtotop.js","path":"js/backtotop.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/catalog.js","path":"js/catalog.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/iconfont/iconfont.js","path":"iconfont/iconfont.js","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/avatar的副本.png","path":"images/avatar的副本.png","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/oranges/source/images/avatar.png","path":"images/avatar.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/robots.txt","hash":"81aa9bddceea5e48482f76bc5ffd519f95adf7b8","modified":1587887531941},{"_id":"source/.DS_Store","hash":"5c83a56c42152b179fcd6083454cb7a222058a01","modified":1592548169901},{"_id":"themes/oranges/.gitignore","hash":"986003ff5239d03749d3d3b570671bbb7ffadba6","modified":1592452752256},{"_id":"themes/oranges/LICENSE","hash":"f811cebccc40c019ffd2156f1f15e226e1b86f79","modified":1592452752256},{"_id":"themes/oranges/README.md","hash":"ba24432cc148103b29826166e6daaf1a2542cf9d","modified":1592452752256},{"_id":"themes/oranges/.DS_Store","hash":"7aac0512999cf68d2f70b36e7cc88acc670e14dd","modified":1592472266153},{"_id":"themes/oranges/_config.yml","hash":"bec614b5b7239a4c30bfbafd667fa040e368af77","modified":1592476772665},{"_id":"source/_drafts/TensorFlow图像识别.md","hash":"a3fe868f4ebe893f15dbfcab773c6fbd80f37606","modified":1589793424376},{"_id":"source/_drafts/在Flutter中使用Bloc.md","hash":"f028ca40cf91cd09339f53962774335b93530c43","modified":1589769137538},{"_id":"source/_posts/Centos7系统VPS配置记录.md","hash":"aa88f48bb2314cbe13b731e95ade89b77d22d8ad","modified":1592476993891},{"_id":"source/_posts/Flutter学习重点记录.md","hash":"9576ff6e8fef7333d6e57234141f5893a38ac24a","modified":1592477010206},{"_id":"source/_posts/Create ML 自建数据集实现物体侦测.md","hash":"3661f3c1f522c36f945ed472200edce80b51d6ed","modified":1592477109969},{"_id":"source/_posts/.DS_Store","hash":"21a72af89d744dc28dbdf9b356c27618b93a8e9b","modified":1592387126106},{"_id":"source/_posts/Mac显示隐藏文件的两种方式.md","hash":"1766694e9639686eb398cbee06efd509a2882e79","modified":1592477776655},{"_id":"source/_posts/Mac自带脚本一键部署Hexo.md","hash":"44e418e2059e6f3cf9a26488efcade90a74eca5b","modified":1592477051623},{"_id":"source/_posts/Mac设置终端走代理.md","hash":"b6acf0cd47909e7029c35cbf1a2f756772a063a9","modified":1592477081049},{"_id":"source/_posts/Markdown写作示例.md","hash":"47b7d8c2003c515971d94e9a020aa5b62715e6d6","modified":1592477215851},{"_id":"source/_posts/PT站点备忘.md","hash":"ba4611d3567e29e993033048d2e88faec6152275","modified":1592477201077},{"_id":"source/_posts/iOS开发中的知识点.md","hash":"f844d63229d56a74501520c14d6059471093bd46","modified":1592477034951},{"_id":"source/_posts/《Swift中文指南》读书笔记.md","hash":"2d6e7d9805df4d8868014b5b62a5404babbc987c","modified":1592476945281},{"_id":"source/_posts/在Flutter中使用WebView.md","hash":"1aa8bbf1d0c266b6f9a3460d9e284ea9914b255f","modified":1592477018312},{"_id":"source/_posts/天涯神贴之意淫中国未来.md","hash":"8a32ddee5a2b25c5494deebe1e13eae966a0b350","modified":1592477180986},{"_id":"source/about/index.md","hash":"19aad7a9f25084fee8ef58a193f37a5ea51af844","modified":1587887531941},{"_id":"source/_posts/诗词名句鉴赏.md","hash":"69fe6801d5dfb2f2152b89f78b0eaf36837c5274","modified":1592477190490},{"_id":"source/categories/index.md","hash":"2ea52d99e6d1379dcbf7229453d9398e26bcc328","modified":1592460118036},{"_id":"source/friends/index.md","hash":"c08a0a906495f662180390d2302dc66667be51c3","modified":1592460249130},{"_id":"source/links/index.md","hash":"c776a928994f58a6252b00345e7be26f45cd3901","modified":1587887531941},{"_id":"source/soft/index.md","hash":"24bd5409c9298f956c366833f3e7ca27e7cc9cbf","modified":1592474907258},{"_id":"source/tags/index.md","hash":"52a995ce0cd1ade3379c68071cb74f84922ddadd","modified":1592459483783},{"_id":"themes/oranges/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1592452752256},{"_id":"themes/oranges/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1592452752257},{"_id":"themes/oranges/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1592452752257},{"_id":"themes/oranges/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1592452752257},{"_id":"themes/oranges/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1592452752257},{"_id":"themes/oranges/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1592452752257},{"_id":"themes/oranges/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1592452752257},{"_id":"themes/oranges/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1592452752257},{"_id":"themes/oranges/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1592452752257},{"_id":"themes/oranges/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1592452752257},{"_id":"themes/oranges/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1592452752258},{"_id":"themes/oranges/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1592452752258},{"_id":"themes/oranges/layout/archive.ejs","hash":"85390da2158731d6b5e8ae7a8faa9cf5106976a8","modified":1592537015467},{"_id":"themes/oranges/layout/category.ejs","hash":"940f65848b1a2d59dfed10b626f194dafe4e0139","modified":1592537018438},{"_id":"themes/oranges/layout/index.ejs","hash":"6f509ebf957c90fcbe38222268c5d92b288d7a9a","modified":1592537019826},{"_id":"themes/oranges/layout/layout.ejs","hash":"b8f5938c01a4241af978f9dca8aa456e033a46b8","modified":1592537021567},{"_id":"themes/oranges/layout/tag.ejs","hash":"82cfdba6fe17c9b8edead28d0dbb688062dabc80","modified":1592537013972},{"_id":"themes/oranges/layout/post.ejs","hash":"b4e7a0b82c9d702d51f352fff79a150a5a9e5347","modified":1592534897909},{"_id":"themes/oranges/source/.DS_Store","hash":"7c1dcf178c1e176172006923ff320380247b3c71","modified":1592460736429},{"_id":"themes/oranges/layout/_partial/backtotop.ejs","hash":"a7dfc124629cb256adf26963bb393b89f09a3476","modified":1592452752258},{"_id":"themes/oranges/layout/_partial/comments.ejs","hash":"a8669eb55260a3ae86f4b87b9e769d490129a4db","modified":1592452752258},{"_id":"themes/oranges/layout/_partial/catalog.ejs","hash":"652256b6b383614abd8d99a7c6247463c8e7ec3e","modified":1592452752258},{"_id":"themes/oranges/layout/_partial/header.ejs","hash":"e6550d583630f2d5b6cce48974c2294ddd5b97be","modified":1592464038782},{"_id":"themes/oranges/layout/_partial/navigation.ejs","hash":"28df402aa21b7e27b92644815013e88d7045dd9a","modified":1592452752258},{"_id":"themes/oranges/layout/_partial/footer.ejs","hash":"c399fd6447b765311dfaa351302f9cde92e03e3e","modified":1592452752258},{"_id":"themes/oranges/source/css/base.css","hash":"5dcd9a9d71e909053ab631c812276c9e85574f52","modified":1592537016756},{"_id":"themes/oranges/source/iconfont/demo_index.html","hash":"8269e07bec84bfdf0fb7a703a9baff82be784780","modified":1592452752261},{"_id":"themes/oranges/source/css/github-markdown.css","hash":"9b6a1e8183161cafb1f325541fff63fd9d28383e","modified":1592537029703},{"_id":"themes/oranges/source/css/highlight.css","hash":"035edefe020c2facda4f945bba340251bc884443","modified":1592476609848},{"_id":"themes/oranges/source/iconfont/iconfont.eot","hash":"da65d01b9562a571b2d3911533f412ad7b253fa0","modified":1592452752261},{"_id":"themes/oranges/source/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1592452752260},{"_id":"themes/oranges/source/iconfont/iconfont.ttf","hash":"04395c87490111da5f90c0821b669d1e5b284768","modified":1592452752263},{"_id":"themes/oranges/source/iconfont/iconfont.woff","hash":"a71a601c46bf3cd9bcfe5c153d2677310e145182","modified":1592452752263},{"_id":"themes/oranges/source/iconfont/iconfont.woff2","hash":"8684913946bc851157b5ea3891981ab17855f8eb","modified":1592452752263},{"_id":"themes/oranges/source/iconfont/iconfont.css","hash":"b4bcf9ed7d0b616ef2b7a2d984f1a3ba456ced92","modified":1592452752261},{"_id":"themes/oranges/source/iconfont/iconfont.json","hash":"6bceb90c71158f57ba7e09f7322d01115b91be27","modified":1592452752262},{"_id":"themes/oranges/source/images/.DS_Store","hash":"0ab3dcbd2ccffd477ffcfae10662c7ffe5c0cd4f","modified":1592460741502},{"_id":"themes/oranges/source/iconfont/iconfont.svg","hash":"cbe10c88150e119137df4d65ce3359a7e99da9b3","modified":1592452752262},{"_id":"themes/oranges/source/images/favicon.png","hash":"21cf9c2e9c36c244a6542a3b6c220f13fa1a67cc","modified":1592452752263},{"_id":"themes/oranges/source/js/activeNav.js","hash":"06aa9a2985f1d328f0b7fe69a28bee31f16ebb1a","modified":1592452752264},{"_id":"themes/oranges/source/js/backtotop.js","hash":"6a0aa333941e28f78227625d8d49ba60be42337e","modified":1592452752264},{"_id":"themes/oranges/source/js/catalog.js","hash":"5617cd7a8bca47debb29ca45e1ec33c84e6603f7","modified":1592452752264},{"_id":"themes/oranges/source/js/fancybox.js","hash":"b531b59bc7db8b39ed517938c31c3bd746b628ba","modified":1592452752264},{"_id":"themes/oranges/source/iconfont/iconfont.js","hash":"3a74b65911031bd1c7a83be7a9287f8a2642bcb2","modified":1592452752261},{"_id":"themes/oranges/source/images/avatar的副本.png","hash":"d0c356c82965a5f598a7587c5a4175d2fb2dd1c7","modified":1592460831105},{"_id":"themes/oranges/source/images/favicon.ico","hash":"25bf3e78d9e80be41c60519c6762468988bfc167","modified":1587887531948},{"_id":"themes/oranges/source/images/avatar.png","hash":"a39ab42c54f70e00ef7e7729d8162efbbe635275","modified":1587887531949},{"_id":"public/baidu_urls.txt","hash":"ff266a41e3eaed6de68f5d6dcb2cceb971f0a689","modified":1592548220507},{"_id":"public/atom.xml","hash":"c02255c6fa8a0a5ec94941f03ac6c3afe85a6a56","modified":1592548220507},{"_id":"public/sitemap.xml","hash":"f3296457210bc7d9f3ce3f191ffd1f0954725611","modified":1592548220507},{"_id":"public/content.json","hash":"f9027216e0be531bece0e9266ba44462aa423c08","modified":1592548220507},{"_id":"public/baidusitemap.xml","hash":"bc4e126e099fca73dbb9471f83c126574155d6d4","modified":1592548220507},{"_id":"public/about/index.html","hash":"0a32eba822dcd4b02ad442232eba7a02e392963e","modified":1592548220507},{"_id":"public/categories/index.html","hash":"c8d496ea81fee0820e676b8fe2ad38d2ae1fa9d0","modified":1592548220507},{"_id":"public/friends/index.html","hash":"cb8730b8a3336a262e10ff2516809c4bf9960119","modified":1592548220507},{"_id":"public/soft/index.html","hash":"4405d733e274007bc031a3f665912b089615fcca","modified":1592548220507},{"_id":"public/links/index.html","hash":"eda11d85ee2b7ffaaf8b77d18fb663e99bb7d281","modified":1592548220507},{"_id":"public/tags/index.html","hash":"280991dffa768065fdb949cada5c65dc247d2781","modified":1592548220507},{"_id":"public/Create ML 自建数据集实现物体侦测/index.html","hash":"0b819884eed15fd0581396e8405a66e30dbb8e77","modified":1592548220507},{"_id":"public/Mac显示隐藏文件的两种方式/index.html","hash":"d262a6c8ef5c7318c5a705731b115ec4b4a4def6","modified":1592548220507},{"_id":"public/Flutter学习重点记录/index.html","hash":"f22baa7bef5aa09c89066a2ff3f484ddd0fb450b","modified":1592548220507},{"_id":"public/在Flutter中使用WebView/index.html","hash":"1d7885552e190638298ccbb36195318b0781a2f9","modified":1592548220507},{"_id":"public/Mac自带脚本一键部署Hexo/index.html","hash":"01aa045fe6538db218197ce24abb78bae29d5b8b","modified":1592548220507},{"_id":"public/诗词名句鉴赏/index.html","hash":"2a90da5f93e99fd71d7700681377b3ac006967f7","modified":1592548220507},{"_id":"public/Mac设置终端走代理/index.html","hash":"53a2f3dd59ea66c58a2646508bde1e18c503b61a","modified":1592548220507},{"_id":"public/PT站点备忘/index.html","hash":"33ed1f71c592aeb8fd2895dd0e739acbb7000647","modified":1592548220507},{"_id":"public/archives/index.html","hash":"26516fe6f093f11b2a28a7884d12495828401310","modified":1592548220507},{"_id":"public/archives/2019/03/index.html","hash":"a4aa66972d6f7a8155b8ffc97219cd0dda201c99","modified":1592548220507},{"_id":"public/archives/page/2/index.html","hash":"26516fe6f093f11b2a28a7884d12495828401310","modified":1592548220507},{"_id":"public/archives/2019/05/index.html","hash":"f9382573d54944e8e989d35956583b30ac3cd7de","modified":1592548220507},{"_id":"public/archives/2019/index.html","hash":"77c672da7492e8bda397035ee8e453cae0cbe3d6","modified":1592548220507},{"_id":"public/archives/2019/06/index.html","hash":"8ed90a3724f5a40b6213e655bfad48eb03be9751","modified":1592548220507},{"_id":"public/archives/2020/index.html","hash":"a97fecf864c53e316a19ebbef5aa738cd0074c06","modified":1592548220507},{"_id":"public/archives/2020/03/index.html","hash":"b27f95b51226111f4d0cb9b6565895d12b23d984","modified":1592548220507},{"_id":"public/archives/2020/04/index.html","hash":"0be59f38ee179c61ddef43c55948dc08bdfb61b7","modified":1592548220507},{"_id":"public/archives/2020/05/index.html","hash":"f686572ac0cf32d9a2717975b1be9327ccc724d8","modified":1592548220507},{"_id":"public/archives/2020/06/index.html","hash":"cd1d2ff9d24972ecb5754741c9fe0e1a5ccf0943","modified":1592548220507},{"_id":"public/categories/机器学习/index.html","hash":"b42392473abdc5f472383f26f74e54355ab9aac9","modified":1592548220507},{"_id":"public/categories/技巧/index.html","hash":"514083f8f9c0aefba204ca95572bae6784055118","modified":1592548220507},{"_id":"public/categories/前端/index.html","hash":"bdaaf4dcd4dfac9e49c79c01c3767ec6da864ad1","modified":1592548220507},{"_id":"public/categories/其他/index.html","hash":"821d9323d894ccda6b1a4383d5bdaa32507d0292","modified":1592548220507},{"_id":"public/categories/iOS/index.html","hash":"f53424516100912ba0dcbc3aa979ff01e743bf1c","modified":1592548220507},{"_id":"public/page/2/index.html","hash":"ff5e2fa39eb548e51077d7750c4673165ce02ec0","modified":1592548220507},{"_id":"public/tags/VPS/index.html","hash":"aba640587ee1fccd227332d740541f66db088a41","modified":1592548220507},{"_id":"public/index.html","hash":"165b2076d87df9cf8c8b226d3348b00bfac2fbed","modified":1592548220507},{"_id":"public/tags/Flutter/index.html","hash":"bb02b3abdde676d84896bc2c0c8e8af15c648e00","modified":1592548220507},{"_id":"public/tags/Mac/index.html","hash":"3ac687e2ad97d5d7868145e551e3247987a2d1fc","modified":1592548220507},{"_id":"public/tags/Markdown/index.html","hash":"3f3ca0536fcf8af829cf9a3c8257426e80c460d8","modified":1592548220507},{"_id":"public/tags/Hexo/index.html","hash":"a8ea96e4345e9bd819631067ddd3b09acdf3fe2b","modified":1592548220507},{"_id":"public/tags/Create-ML/index.html","hash":"503e43ee158dcbfc6bd8c61202910b29067be090","modified":1592548220507},{"_id":"public/tags/面试/index.html","hash":"6d6fc1e3a79819c7124b21695e2175732f06728e","modified":1592548220507},{"_id":"public/tags/PT/index.html","hash":"2b6871b7bbf29be7dcbd03c1acf9d8751d428ab9","modified":1592548220507},{"_id":"public/tags/Swift/index.html","hash":"4abf5225b5838f4a501a24fbcca704f5cc7d639a","modified":1592548220507},{"_id":"public/tags/中国未来/index.html","hash":"93bd87f238ebeb56c77bb164d5d49b58630a8585","modified":1592548220507},{"_id":"public/tags/诗词/index.html","hash":"997cc350e89cc32b833526e14c801d7915c66bc0","modified":1592548220507},{"_id":"public/iOS开发中的知识点/index.html","hash":"5a48a797d8e243604a9b1333f9baf363e75fd6b5","modified":1592548220507},{"_id":"public/Centos7系统VPS配置记录/index.html","hash":"77405738c1a2ffaa0de999dd73667a9ae08fd30b","modified":1592548220507},{"_id":"public/天涯神贴之意淫中国未来/index.html","hash":"003b259ad03db83bf491647a4039ce3593a4f630","modified":1592548220507},{"_id":"public/《Swift中文指南》读书笔记/index.html","hash":"788c47fdabf3d6dfc469a7a8ff5ef3910c819652","modified":1592548220507},{"_id":"public/Markdown写作示例/index.html","hash":"ee1442c2da0f374a9d06813fa5e3c1be231407f0","modified":1592548220507},{"_id":"public/robots.txt","hash":"81aa9bddceea5e48482f76bc5ffd519f95adf7b8","modified":1592548220507},{"_id":"public/iconfont/iconfont.eot","hash":"da65d01b9562a571b2d3911533f412ad7b253fa0","modified":1592548220507},{"_id":"public/iconfont/iconfont.woff2","hash":"8684913946bc851157b5ea3891981ab17855f8eb","modified":1592548220507},{"_id":"public/iconfont/iconfont.woff","hash":"a71a601c46bf3cd9bcfe5c153d2677310e145182","modified":1592548220507},{"_id":"public/iconfont/iconfont.ttf","hash":"04395c87490111da5f90c0821b669d1e5b284768","modified":1592548220507},{"_id":"public/images/favicon.png","hash":"21cf9c2e9c36c244a6542a3b6c220f13fa1a67cc","modified":1592548220507},{"_id":"public/iconfont/iconfont.svg","hash":"cbe10c88150e119137df4d65ce3359a7e99da9b3","modified":1592548220507},{"_id":"public/images/favicon.ico","hash":"25bf3e78d9e80be41c60519c6762468988bfc167","modified":1592548220507},{"_id":"public/images/avatar的副本.png","hash":"d0c356c82965a5f598a7587c5a4175d2fb2dd1c7","modified":1592548220507},{"_id":"public/css/base.css","hash":"5dcd9a9d71e909053ab631c812276c9e85574f52","modified":1592548220507},{"_id":"public/css/github-markdown.css","hash":"9b6a1e8183161cafb1f325541fff63fd9d28383e","modified":1592548220507},{"_id":"public/css/highlight.css","hash":"035edefe020c2facda4f945bba340251bc884443","modified":1592548220507},{"_id":"public/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1592548220507},{"_id":"public/iconfont/iconfont.json","hash":"db75f6dc5e0cb0129b7c730367a04e92a738096f","modified":1592548220507},{"_id":"public/iconfont/iconfont.css","hash":"b4bcf9ed7d0b616ef2b7a2d984f1a3ba456ced92","modified":1592548220507},{"_id":"public/js/catalog.js","hash":"5617cd7a8bca47debb29ca45e1ec33c84e6603f7","modified":1592548220507},{"_id":"public/js/activeNav.js","hash":"06aa9a2985f1d328f0b7fe69a28bee31f16ebb1a","modified":1592548220507},{"_id":"public/js/backtotop.js","hash":"6a0aa333941e28f78227625d8d49ba60be42337e","modified":1592548220507},{"_id":"public/js/fancybox.js","hash":"b531b59bc7db8b39ed517938c31c3bd746b628ba","modified":1592548220507},{"_id":"public/iconfont/iconfont.js","hash":"3a74b65911031bd1c7a83be7a9287f8a2642bcb2","modified":1592548220507},{"_id":"public/iconfont/demo_index.html","hash":"cadec352c0f9386ff57be3b6ee27fb4b80104751","modified":1592548220507},{"_id":"public/images/avatar.png","hash":"a39ab42c54f70e00ef7e7729d8162efbbe635275","modified":1592548220507}],"Category":[{"name":"机器学习","_id":"ckblu3byp0004hb8yf6c735f9"},{"name":"flutter","_id":"ckblu3byu000bhb8y5hej58q5"},{"name":"技巧","_id":"ckblu3byy000hhb8yczu04qyt"},{"name":"前端","_id":"ckblu3bz2000nhb8ygip567cn"},{"name":"其他","_id":"ckblu3bzf0018hb8y7urb8o14"},{"name":"iOS","_id":"ckblu3bzg001ehb8y8s771a93"}],"Data":[],"Page":[{"title":"关于我","date":"2020-03-26T09:43:29.000Z","_content":"\n> 专长\n\n- 擅长 Ai、Fw、Br、Ae、Pr、Ps 等软件的安装与卸载\n- 熟悉 Windows、Linux、OS X、Android、iOS 等系统的开关机\n- 精通 CSS、JavaScript、PHP、C、C++、Perl、Python、Objective-C 等单词的拼写\n\n> 联系我\n\n- 邮箱：wannayoung@163.com\n- Github：https://github.com/WannaYoung\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2020-03-26 17:43:29\n---\n\n> 专长\n\n- 擅长 Ai、Fw、Br、Ae、Pr、Ps 等软件的安装与卸载\n- 熟悉 Windows、Linux、OS X、Android、iOS 等系统的开关机\n- 精通 CSS、JavaScript、PHP、C、C++、Perl、Python、Objective-C 等单词的拼写\n\n> 联系我\n\n- 邮箱：wannayoung@163.com\n- Github：https://github.com/WannaYoung\n\n","updated":"2020-04-26T07:52:11.941Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckblu3bym0001hb8yfc397x8m","content":"<blockquote>\n<p>专长</p>\n</blockquote>\n<ul>\n<li>擅长 Ai、Fw、Br、Ae、Pr、Ps 等软件的安装与卸载</li>\n<li>熟悉 Windows、Linux、OS X、Android、iOS 等系统的开关机</li>\n<li>精通 CSS、JavaScript、PHP、C、C++、Perl、Python、Objective-C 等单词的拼写</li>\n</ul>\n<blockquote>\n<p>联系我</p>\n</blockquote>\n<ul>\n<li>邮箱：<a href=\"mailto:wannayoung@163.com\">wannayoung@163.com</a></li>\n<li>Github：<a href=\"https://github.com/WannaYoung\" target=\"_blank\" rel=\"noopener\">https://github.com/WannaYoung</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>专长</p>\n</blockquote>\n<ul>\n<li>擅长 Ai、Fw、Br、Ae、Pr、Ps 等软件的安装与卸载</li>\n<li>熟悉 Windows、Linux、OS X、Android、iOS 等系统的开关机</li>\n<li>精通 CSS、JavaScript、PHP、C、C++、Perl、Python、Objective-C 等单词的拼写</li>\n</ul>\n<blockquote>\n<p>联系我</p>\n</blockquote>\n<ul>\n<li>邮箱：<a href=\"mailto:wannayoung@163.com\">wannayoung@163.com</a></li>\n<li>Github：<a href=\"https://github.com/WannaYoung\" target=\"_blank\" rel=\"noopener\">https://github.com/WannaYoung</a></li>\n</ul>\n"},{"title":"categories","date":"2020-06-18T05:53:19.000Z","type":"categories","categories":null,"tags":null,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-06-18 13:53:19\ntype: \"categories\"\ncategories:\ntags:\n---","updated":"2020-06-18T06:01:58.036Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckblu3byo0003hb8yd06xb2dw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"friends","date":"2020-06-18T05:51:39.000Z","type":"friends","categories":null,"tags":null,"_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-06-18 13:51:39\ntype: \"friends\"\ncategories:\ntags:\n---","updated":"2020-06-18T06:04:09.130Z","path":"friends/index.html","comments":1,"layout":"page","_id":"ckblu3byr0007hb8y0epn5wgy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"友情链接","date":"2020-03-26T09:43:20.000Z","_content":"\n## 博客\n\n> 开发\n\n- [OneV's Den](https://onevcat.com/) 国内iOS开发先驱\n- [唐巧](http://blog.devtang.com/) 努力学习做业务的中年程序员\n\n> 技巧\n\n- [Oldiy](https://odcn.top/) 花样玩群晖NAS\n- [黑苹果社区](https://osx.cx/) 教你安装黑苹果\n\n## 网站\n\n> 开发\n\n- [掘金](http://e.xitu.io/) 程序员的技术看板\n- [objc.io](https://www.objc.io/) 贩卖iOS开发书籍的网站\n- [Runoob](https://www.runoob.com/) 学的不是技术而是梦想\n- [RayWenderlich](https://www.raywenderlich.com/) 汇聚大量开发课程\n- [Hacking with Swift](https://www.hackingwithswift.com/) 学习Swift的好地方\n\n> 设计\n\n- [Unsplash](https://unsplash.com/) 各种各样的图片素材\n- [Sketch中文网](http://sketchcn.com/index.html) 分享关于 Sketch 的一切\n- [Sketch App Sources](https://www.sketchappsources.com/) App专用的Sketch资源\n\n> 工具\n\n- [Xclient](https://xclient.info/) Mac 软件学习版\n- [Shortcuts](https://shortcuts.sspai.com/) 少数派捷径大全\n- [Carbon](https://carbon.now.sh/) 导出漂亮的代码截图\n- [装备前线](https://www.zfrontier.com/) 各种高大上的外设\n\n> PT 大站\n\n- [HDSky](https://hdsky.me/) 天空\n- [MTeam](https://pt.m-team.cc/) 馒头\n- [CHDBits](https://chdbits.co/) 彩虹岛\n- [HDChina](https://hdchina.org/) 瓷器\n- [ToTheGlory](https://totheglory.im/) 套套哥\n- [SpringSunday](https://springsunday.net/) 固态硬盘","source":"links/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-03-26 17:43:20\n---\n\n## 博客\n\n> 开发\n\n- [OneV's Den](https://onevcat.com/) 国内iOS开发先驱\n- [唐巧](http://blog.devtang.com/) 努力学习做业务的中年程序员\n\n> 技巧\n\n- [Oldiy](https://odcn.top/) 花样玩群晖NAS\n- [黑苹果社区](https://osx.cx/) 教你安装黑苹果\n\n## 网站\n\n> 开发\n\n- [掘金](http://e.xitu.io/) 程序员的技术看板\n- [objc.io](https://www.objc.io/) 贩卖iOS开发书籍的网站\n- [Runoob](https://www.runoob.com/) 学的不是技术而是梦想\n- [RayWenderlich](https://www.raywenderlich.com/) 汇聚大量开发课程\n- [Hacking with Swift](https://www.hackingwithswift.com/) 学习Swift的好地方\n\n> 设计\n\n- [Unsplash](https://unsplash.com/) 各种各样的图片素材\n- [Sketch中文网](http://sketchcn.com/index.html) 分享关于 Sketch 的一切\n- [Sketch App Sources](https://www.sketchappsources.com/) App专用的Sketch资源\n\n> 工具\n\n- [Xclient](https://xclient.info/) Mac 软件学习版\n- [Shortcuts](https://shortcuts.sspai.com/) 少数派捷径大全\n- [Carbon](https://carbon.now.sh/) 导出漂亮的代码截图\n- [装备前线](https://www.zfrontier.com/) 各种高大上的外设\n\n> PT 大站\n\n- [HDSky](https://hdsky.me/) 天空\n- [MTeam](https://pt.m-team.cc/) 馒头\n- [CHDBits](https://chdbits.co/) 彩虹岛\n- [HDChina](https://hdchina.org/) 瓷器\n- [ToTheGlory](https://totheglory.im/) 套套哥\n- [SpringSunday](https://springsunday.net/) 固态硬盘","updated":"2020-04-26T07:52:11.941Z","path":"links/index.html","comments":1,"layout":"page","_id":"ckblu3byt0009hb8y53ko2moa","content":"<h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><blockquote>\n<p>开发</p>\n</blockquote>\n<ul>\n<li><a href=\"https://onevcat.com/\" target=\"_blank\" rel=\"noopener\">OneV’s Den</a> 国内iOS开发先驱</li>\n<li><a href=\"http://blog.devtang.com/\" target=\"_blank\" rel=\"noopener\">唐巧</a> 努力学习做业务的中年程序员</li>\n</ul>\n<blockquote>\n<p>技巧</p>\n</blockquote>\n<ul>\n<li><a href=\"https://odcn.top/\" target=\"_blank\" rel=\"noopener\">Oldiy</a> 花样玩群晖NAS</li>\n<li><a href=\"https://osx.cx/\" target=\"_blank\" rel=\"noopener\">黑苹果社区</a> 教你安装黑苹果</li>\n</ul>\n<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><blockquote>\n<p>开发</p>\n</blockquote>\n<ul>\n<li><a href=\"http://e.xitu.io/\" target=\"_blank\" rel=\"noopener\">掘金</a> 程序员的技术看板</li>\n<li><a href=\"https://www.objc.io/\" target=\"_blank\" rel=\"noopener\">objc.io</a> 贩卖iOS开发书籍的网站</li>\n<li><a href=\"https://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">Runoob</a> 学的不是技术而是梦想</li>\n<li><a href=\"https://www.raywenderlich.com/\" target=\"_blank\" rel=\"noopener\">RayWenderlich</a> 汇聚大量开发课程</li>\n<li><a href=\"https://www.hackingwithswift.com/\" target=\"_blank\" rel=\"noopener\">Hacking with Swift</a> 学习Swift的好地方</li>\n</ul>\n<blockquote>\n<p>设计</p>\n</blockquote>\n<ul>\n<li><a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">Unsplash</a> 各种各样的图片素材</li>\n<li><a href=\"http://sketchcn.com/index.html\" target=\"_blank\" rel=\"noopener\">Sketch中文网</a> 分享关于 Sketch 的一切</li>\n<li><a href=\"https://www.sketchappsources.com/\" target=\"_blank\" rel=\"noopener\">Sketch App Sources</a> App专用的Sketch资源</li>\n</ul>\n<blockquote>\n<p>工具</p>\n</blockquote>\n<ul>\n<li><a href=\"https://xclient.info/\" target=\"_blank\" rel=\"noopener\">Xclient</a> Mac 软件学习版</li>\n<li><a href=\"https://shortcuts.sspai.com/\" target=\"_blank\" rel=\"noopener\">Shortcuts</a> 少数派捷径大全</li>\n<li><a href=\"https://carbon.now.sh/\" target=\"_blank\" rel=\"noopener\">Carbon</a> 导出漂亮的代码截图</li>\n<li><a href=\"https://www.zfrontier.com/\" target=\"_blank\" rel=\"noopener\">装备前线</a> 各种高大上的外设</li>\n</ul>\n<blockquote>\n<p>PT 大站</p>\n</blockquote>\n<ul>\n<li><a href=\"https://hdsky.me/\" target=\"_blank\" rel=\"noopener\">HDSky</a> 天空</li>\n<li><a href=\"https://pt.m-team.cc/\" target=\"_blank\" rel=\"noopener\">MTeam</a> 馒头</li>\n<li><a href=\"https://chdbits.co/\" target=\"_blank\" rel=\"noopener\">CHDBits</a> 彩虹岛</li>\n<li><a href=\"https://hdchina.org/\" target=\"_blank\" rel=\"noopener\">HDChina</a> 瓷器</li>\n<li><a href=\"https://totheglory.im/\" target=\"_blank\" rel=\"noopener\">ToTheGlory</a> 套套哥</li>\n<li><a href=\"https://springsunday.net/\" target=\"_blank\" rel=\"noopener\">SpringSunday</a> 固态硬盘</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h2><blockquote>\n<p>开发</p>\n</blockquote>\n<ul>\n<li><a href=\"https://onevcat.com/\" target=\"_blank\" rel=\"noopener\">OneV’s Den</a> 国内iOS开发先驱</li>\n<li><a href=\"http://blog.devtang.com/\" target=\"_blank\" rel=\"noopener\">唐巧</a> 努力学习做业务的中年程序员</li>\n</ul>\n<blockquote>\n<p>技巧</p>\n</blockquote>\n<ul>\n<li><a href=\"https://odcn.top/\" target=\"_blank\" rel=\"noopener\">Oldiy</a> 花样玩群晖NAS</li>\n<li><a href=\"https://osx.cx/\" target=\"_blank\" rel=\"noopener\">黑苹果社区</a> 教你安装黑苹果</li>\n</ul>\n<h2 id=\"网站\"><a href=\"#网站\" class=\"headerlink\" title=\"网站\"></a>网站</h2><blockquote>\n<p>开发</p>\n</blockquote>\n<ul>\n<li><a href=\"http://e.xitu.io/\" target=\"_blank\" rel=\"noopener\">掘金</a> 程序员的技术看板</li>\n<li><a href=\"https://www.objc.io/\" target=\"_blank\" rel=\"noopener\">objc.io</a> 贩卖iOS开发书籍的网站</li>\n<li><a href=\"https://www.runoob.com/\" target=\"_blank\" rel=\"noopener\">Runoob</a> 学的不是技术而是梦想</li>\n<li><a href=\"https://www.raywenderlich.com/\" target=\"_blank\" rel=\"noopener\">RayWenderlich</a> 汇聚大量开发课程</li>\n<li><a href=\"https://www.hackingwithswift.com/\" target=\"_blank\" rel=\"noopener\">Hacking with Swift</a> 学习Swift的好地方</li>\n</ul>\n<blockquote>\n<p>设计</p>\n</blockquote>\n<ul>\n<li><a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">Unsplash</a> 各种各样的图片素材</li>\n<li><a href=\"http://sketchcn.com/index.html\" target=\"_blank\" rel=\"noopener\">Sketch中文网</a> 分享关于 Sketch 的一切</li>\n<li><a href=\"https://www.sketchappsources.com/\" target=\"_blank\" rel=\"noopener\">Sketch App Sources</a> App专用的Sketch资源</li>\n</ul>\n<blockquote>\n<p>工具</p>\n</blockquote>\n<ul>\n<li><a href=\"https://xclient.info/\" target=\"_blank\" rel=\"noopener\">Xclient</a> Mac 软件学习版</li>\n<li><a href=\"https://shortcuts.sspai.com/\" target=\"_blank\" rel=\"noopener\">Shortcuts</a> 少数派捷径大全</li>\n<li><a href=\"https://carbon.now.sh/\" target=\"_blank\" rel=\"noopener\">Carbon</a> 导出漂亮的代码截图</li>\n<li><a href=\"https://www.zfrontier.com/\" target=\"_blank\" rel=\"noopener\">装备前线</a> 各种高大上的外设</li>\n</ul>\n<blockquote>\n<p>PT 大站</p>\n</blockquote>\n<ul>\n<li><a href=\"https://hdsky.me/\" target=\"_blank\" rel=\"noopener\">HDSky</a> 天空</li>\n<li><a href=\"https://pt.m-team.cc/\" target=\"_blank\" rel=\"noopener\">MTeam</a> 馒头</li>\n<li><a href=\"https://chdbits.co/\" target=\"_blank\" rel=\"noopener\">CHDBits</a> 彩虹岛</li>\n<li><a href=\"https://hdchina.org/\" target=\"_blank\" rel=\"noopener\">HDChina</a> 瓷器</li>\n<li><a href=\"https://totheglory.im/\" target=\"_blank\" rel=\"noopener\">ToTheGlory</a> 套套哥</li>\n<li><a href=\"https://springsunday.net/\" target=\"_blank\" rel=\"noopener\">SpringSunday</a> 固态硬盘</li>\n</ul>\n"},{"title":"软件分享","date":"2020-03-26T09:42:09.000Z","_content":"\n> 所有软件可在 [可道网盘](http://t.cn/A6ZyFYFc)「提取码: **1113**」找到，可能打开某些Mac软件需要密码，请使用密码 **xclient.info**。\n\n## \u0014Mac软件\n\n| 软件图标                                                     | 软件名称         | 软件介绍                                                     |\n| :----------------------------------------------------------- | :--------------- | :----------------------------------------------------------- |\n| ![sip](https://i.loli.net/2020/03/31/rvyuEDRLh7FMWjo.png)    | **Sip**          | Sip 是一款非常不错的Mac屏幕取色软件，你只需要鼠标点一下即可取得屏幕当前位置的颜色值，支持 CSS、UIColor 等多种格式。 |\n| ![Paw](https://i.loli.net/2020/03/31/EInMcvkQDgxoaBi.png)    | **Paw**          | Paw 是一款实用的HTTP/REST服务测试工具，可以设置请求Header和参数，模拟发送请求，测试响应数据，支持OAuth, Cookies，JSONP等。 |\n| ![charles](https://i.loli.net/2020/03/31/fUFlTsabtxoOvS8.png) | **Charles**      | Charles 是一款用于HTTP信息抓包工具，可以快速有效的获得HTTP信息，非常利于开发者的网页开发和调试修改等。 |\n| ![RF3](https://i.loli.net/2020/03/31/dG1vhMUrQOzJ6lj.png)    | **Reflector**    | Reflector 是一款优秀的iOS设备AirPlay屏幕镜像工具，可以让我们将iPhone、iPad的屏幕无线镜像输出到Mac上，软件还支持录制iPhone或iPad的屏幕。 |\n| ![Kaleidoscope](https://i.loli.net/2020/03/31/W8xth6Gk31mjQoN.png) | **Kaleidoscope** | Kaleidoscope 是一款强大的文件和图像比较工具，支持任意文本文件和 jpeg、tiff、png 等格式的图像文件，同时和 git、svn 等版本控制工具能够完美的结合。 |\n| ![iconkit](https://i.loli.net/2020/03/31/aoChuW9LXlvnbgE.png) | **IconKit**      | IconKit是Mac OS X 平台上一款适用于ios和mac的应用图标制作工具，你只需要将你的图片拖进　IconKit ，他就能够自动制作成你需要的图标格式。支持图标的圆角效果，光泽，大小的调整，和视网膜适配。 |\n| ![shortmenu](https://i.loli.net/2020/03/31/NjcDAK23oeb1ugm.png) | **ShortMenu**    | Short Menu 是一款 MAC 上的短网址生成工具，支持的短网址服务蛮多的，扩展功能超级丰富，点击SM菜单右下角的缩短按钮即可生成短网址。 |\n| ![Slidepad](https://i.loli.net/2020/03/31/GYdVPrQen7vgca9.png) | **Slidepad**     | 通过Slidepad可以能够帮助我们在系统侧边上设置一个窗口提供我们使用，通过该窗口能够快速放置你最喜欢的网络应用程序和网站。它甚至支持通知，并允许您为每个应用程序或网站定义声音设置。 |\n| ![Retrobatch](https://i.loli.net/2020/03/31/UVMJBX4wPLaHOIA.png) | **Retrobatch**   | Retrobatch 能够帮助用户批量添加图片水印以及剪辑，调色和滤镜等等图片批量操作处理，可以说是提高生产力的利器。 |\n\n## Windows软件\n","source":"soft/index.md","raw":"---\ntitle: 软件分享\ndate: 2020-03-26 17:42:09\n---\n\n> 所有软件可在 [可道网盘](http://t.cn/A6ZyFYFc)「提取码: **1113**」找到，可能打开某些Mac软件需要密码，请使用密码 **xclient.info**。\n\n## \u0014Mac软件\n\n| 软件图标                                                     | 软件名称         | 软件介绍                                                     |\n| :----------------------------------------------------------- | :--------------- | :----------------------------------------------------------- |\n| ![sip](https://i.loli.net/2020/03/31/rvyuEDRLh7FMWjo.png)    | **Sip**          | Sip 是一款非常不错的Mac屏幕取色软件，你只需要鼠标点一下即可取得屏幕当前位置的颜色值，支持 CSS、UIColor 等多种格式。 |\n| ![Paw](https://i.loli.net/2020/03/31/EInMcvkQDgxoaBi.png)    | **Paw**          | Paw 是一款实用的HTTP/REST服务测试工具，可以设置请求Header和参数，模拟发送请求，测试响应数据，支持OAuth, Cookies，JSONP等。 |\n| ![charles](https://i.loli.net/2020/03/31/fUFlTsabtxoOvS8.png) | **Charles**      | Charles 是一款用于HTTP信息抓包工具，可以快速有效的获得HTTP信息，非常利于开发者的网页开发和调试修改等。 |\n| ![RF3](https://i.loli.net/2020/03/31/dG1vhMUrQOzJ6lj.png)    | **Reflector**    | Reflector 是一款优秀的iOS设备AirPlay屏幕镜像工具，可以让我们将iPhone、iPad的屏幕无线镜像输出到Mac上，软件还支持录制iPhone或iPad的屏幕。 |\n| ![Kaleidoscope](https://i.loli.net/2020/03/31/W8xth6Gk31mjQoN.png) | **Kaleidoscope** | Kaleidoscope 是一款强大的文件和图像比较工具，支持任意文本文件和 jpeg、tiff、png 等格式的图像文件，同时和 git、svn 等版本控制工具能够完美的结合。 |\n| ![iconkit](https://i.loli.net/2020/03/31/aoChuW9LXlvnbgE.png) | **IconKit**      | IconKit是Mac OS X 平台上一款适用于ios和mac的应用图标制作工具，你只需要将你的图片拖进　IconKit ，他就能够自动制作成你需要的图标格式。支持图标的圆角效果，光泽，大小的调整，和视网膜适配。 |\n| ![shortmenu](https://i.loli.net/2020/03/31/NjcDAK23oeb1ugm.png) | **ShortMenu**    | Short Menu 是一款 MAC 上的短网址生成工具，支持的短网址服务蛮多的，扩展功能超级丰富，点击SM菜单右下角的缩短按钮即可生成短网址。 |\n| ![Slidepad](https://i.loli.net/2020/03/31/GYdVPrQen7vgca9.png) | **Slidepad**     | 通过Slidepad可以能够帮助我们在系统侧边上设置一个窗口提供我们使用，通过该窗口能够快速放置你最喜欢的网络应用程序和网站。它甚至支持通知，并允许您为每个应用程序或网站定义声音设置。 |\n| ![Retrobatch](https://i.loli.net/2020/03/31/UVMJBX4wPLaHOIA.png) | **Retrobatch**   | Retrobatch 能够帮助用户批量添加图片水印以及剪辑，调色和滤镜等等图片批量操作处理，可以说是提高生产力的利器。 |\n\n## Windows软件\n","updated":"2020-06-18T10:08:27.258Z","path":"soft/index.html","comments":1,"layout":"page","_id":"ckblu3bzy0024hb8y0ovm73k9","content":"<blockquote>\n<p>所有软件可在 <a href=\"http://t.cn/A6ZyFYFc\" target=\"_blank\" rel=\"noopener\">可道网盘</a>「提取码: <strong>1113</strong>」找到，可能打开某些Mac软件需要密码，请使用密码 <strong>xclient.info</strong>。</p>\n</blockquote>\n<h2 id=\"Mac软件\"><a href=\"#Mac软件\" class=\"headerlink\" title=\"\u0014Mac软件\"></a>\u0014Mac软件</h2><table>\n<thead>\n<tr>\n<th align=\"left\">软件图标</th>\n<th align=\"left\">软件名称</th>\n<th align=\"left\">软件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/rvyuEDRLh7FMWjo.png\" alt=\"sip\"></td>\n<td align=\"left\"><strong>Sip</strong></td>\n<td align=\"left\">Sip 是一款非常不错的Mac屏幕取色软件，你只需要鼠标点一下即可取得屏幕当前位置的颜色值，支持 CSS、UIColor 等多种格式。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/EInMcvkQDgxoaBi.png\" alt=\"Paw\"></td>\n<td align=\"left\"><strong>Paw</strong></td>\n<td align=\"left\">Paw 是一款实用的HTTP/REST服务测试工具，可以设置请求Header和参数，模拟发送请求，测试响应数据，支持OAuth, Cookies，JSONP等。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/fUFlTsabtxoOvS8.png\" alt=\"charles\"></td>\n<td align=\"left\"><strong>Charles</strong></td>\n<td align=\"left\">Charles 是一款用于HTTP信息抓包工具，可以快速有效的获得HTTP信息，非常利于开发者的网页开发和调试修改等。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/dG1vhMUrQOzJ6lj.png\" alt=\"RF3\"></td>\n<td align=\"left\"><strong>Reflector</strong></td>\n<td align=\"left\">Reflector 是一款优秀的iOS设备AirPlay屏幕镜像工具，可以让我们将iPhone、iPad的屏幕无线镜像输出到Mac上，软件还支持录制iPhone或iPad的屏幕。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/W8xth6Gk31mjQoN.png\" alt=\"Kaleidoscope\"></td>\n<td align=\"left\"><strong>Kaleidoscope</strong></td>\n<td align=\"left\">Kaleidoscope 是一款强大的文件和图像比较工具，支持任意文本文件和 jpeg、tiff、png 等格式的图像文件，同时和 git、svn 等版本控制工具能够完美的结合。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/aoChuW9LXlvnbgE.png\" alt=\"iconkit\"></td>\n<td align=\"left\"><strong>IconKit</strong></td>\n<td align=\"left\">IconKit是Mac OS X 平台上一款适用于ios和mac的应用图标制作工具，你只需要将你的图片拖进　IconKit ，他就能够自动制作成你需要的图标格式。支持图标的圆角效果，光泽，大小的调整，和视网膜适配。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/NjcDAK23oeb1ugm.png\" alt=\"shortmenu\"></td>\n<td align=\"left\"><strong>ShortMenu</strong></td>\n<td align=\"left\">Short Menu 是一款 MAC 上的短网址生成工具，支持的短网址服务蛮多的，扩展功能超级丰富，点击SM菜单右下角的缩短按钮即可生成短网址。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/GYdVPrQen7vgca9.png\" alt=\"Slidepad\"></td>\n<td align=\"left\"><strong>Slidepad</strong></td>\n<td align=\"left\">通过Slidepad可以能够帮助我们在系统侧边上设置一个窗口提供我们使用，通过该窗口能够快速放置你最喜欢的网络应用程序和网站。它甚至支持通知，并允许您为每个应用程序或网站定义声音设置。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/UVMJBX4wPLaHOIA.png\" alt=\"Retrobatch\"></td>\n<td align=\"left\"><strong>Retrobatch</strong></td>\n<td align=\"left\">Retrobatch 能够帮助用户批量添加图片水印以及剪辑，调色和滤镜等等图片批量操作处理，可以说是提高生产力的利器。</td>\n</tr>\n</tbody></table>\n<h2 id=\"Windows软件\"><a href=\"#Windows软件\" class=\"headerlink\" title=\"Windows软件\"></a>Windows软件</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>所有软件可在 <a href=\"http://t.cn/A6ZyFYFc\" target=\"_blank\" rel=\"noopener\">可道网盘</a>「提取码: <strong>1113</strong>」找到，可能打开某些Mac软件需要密码，请使用密码 <strong>xclient.info</strong>。</p>\n</blockquote>\n<h2 id=\"Mac软件\"><a href=\"#Mac软件\" class=\"headerlink\" title=\"\u0014Mac软件\"></a>\u0014Mac软件</h2><table>\n<thead>\n<tr>\n<th align=\"left\">软件图标</th>\n<th align=\"left\">软件名称</th>\n<th align=\"left\">软件介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/rvyuEDRLh7FMWjo.png\" alt=\"sip\"></td>\n<td align=\"left\"><strong>Sip</strong></td>\n<td align=\"left\">Sip 是一款非常不错的Mac屏幕取色软件，你只需要鼠标点一下即可取得屏幕当前位置的颜色值，支持 CSS、UIColor 等多种格式。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/EInMcvkQDgxoaBi.png\" alt=\"Paw\"></td>\n<td align=\"left\"><strong>Paw</strong></td>\n<td align=\"left\">Paw 是一款实用的HTTP/REST服务测试工具，可以设置请求Header和参数，模拟发送请求，测试响应数据，支持OAuth, Cookies，JSONP等。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/fUFlTsabtxoOvS8.png\" alt=\"charles\"></td>\n<td align=\"left\"><strong>Charles</strong></td>\n<td align=\"left\">Charles 是一款用于HTTP信息抓包工具，可以快速有效的获得HTTP信息，非常利于开发者的网页开发和调试修改等。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/dG1vhMUrQOzJ6lj.png\" alt=\"RF3\"></td>\n<td align=\"left\"><strong>Reflector</strong></td>\n<td align=\"left\">Reflector 是一款优秀的iOS设备AirPlay屏幕镜像工具，可以让我们将iPhone、iPad的屏幕无线镜像输出到Mac上，软件还支持录制iPhone或iPad的屏幕。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/W8xth6Gk31mjQoN.png\" alt=\"Kaleidoscope\"></td>\n<td align=\"left\"><strong>Kaleidoscope</strong></td>\n<td align=\"left\">Kaleidoscope 是一款强大的文件和图像比较工具，支持任意文本文件和 jpeg、tiff、png 等格式的图像文件，同时和 git、svn 等版本控制工具能够完美的结合。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/aoChuW9LXlvnbgE.png\" alt=\"iconkit\"></td>\n<td align=\"left\"><strong>IconKit</strong></td>\n<td align=\"left\">IconKit是Mac OS X 平台上一款适用于ios和mac的应用图标制作工具，你只需要将你的图片拖进　IconKit ，他就能够自动制作成你需要的图标格式。支持图标的圆角效果，光泽，大小的调整，和视网膜适配。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/NjcDAK23oeb1ugm.png\" alt=\"shortmenu\"></td>\n<td align=\"left\"><strong>ShortMenu</strong></td>\n<td align=\"left\">Short Menu 是一款 MAC 上的短网址生成工具，支持的短网址服务蛮多的，扩展功能超级丰富，点击SM菜单右下角的缩短按钮即可生成短网址。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/GYdVPrQen7vgca9.png\" alt=\"Slidepad\"></td>\n<td align=\"left\"><strong>Slidepad</strong></td>\n<td align=\"left\">通过Slidepad可以能够帮助我们在系统侧边上设置一个窗口提供我们使用，通过该窗口能够快速放置你最喜欢的网络应用程序和网站。它甚至支持通知，并允许您为每个应用程序或网站定义声音设置。</td>\n</tr>\n<tr>\n<td align=\"left\"><img src=\"https://i.loli.net/2020/03/31/UVMJBX4wPLaHOIA.png\" alt=\"Retrobatch\"></td>\n<td align=\"left\"><strong>Retrobatch</strong></td>\n<td align=\"left\">Retrobatch 能够帮助用户批量添加图片水印以及剪辑，调色和滤镜等等图片批量操作处理，可以说是提高生产力的利器。</td>\n</tr>\n</tbody></table>\n<h2 id=\"Windows软件\"><a href=\"#Windows软件\" class=\"headerlink\" title=\"Windows软件\"></a>Windows软件</h2>"},{"title":"tags","date":"2020-06-18T05:50:49.000Z","type":"tags","categories":null,"tags":null,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-06-18 13:50:49\ntype: \"tags\"\ncategories:\ntags:\n---","updated":"2020-06-18T05:51:23.783Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckblu3bzz0025hb8y03r1fa26","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"TensorFlow图像识别","date":"2020-05-18T02:30:15.000Z","_content":"\n准备图片数据\n\n1、使用tf.keras中的ImageDataGenerator工具构建图片数据生成器\n\n2、使用tf.data.Dataset搭配tf.image中的一些图片处理方法构建数据管道\n\n第一种方法更为简单，第二种方法是TensorFlow的原生方法，更加灵活，可以获得更好的性能。\n\n定义模型\n\n1、使用Sequential按层顺序构建模型\n\n2、使用函数式API构建任意结构模型\n\n3、继承Model基类构建自定义模型\n\n训练模型\n\n1、内置fit\n\n2、内置train_on_batch\n\n3、自定义训练循环\n\n### Anaconda上传环境\n\n```shell\nconda env export -n my-environment -f my-environment.yml\n```\n\n```shell\nanaconda upload my-environment.yml\n```\n\n","source":"_drafts/TensorFlow图像识别.md","raw":"---\ntitle: TensorFlow图像识别\ndate: 2020-05-18 10:30:15\ncategories:\n- 机器学习\ntags:\n- TensorFlow\n---\n\n准备图片数据\n\n1、使用tf.keras中的ImageDataGenerator工具构建图片数据生成器\n\n2、使用tf.data.Dataset搭配tf.image中的一些图片处理方法构建数据管道\n\n第一种方法更为简单，第二种方法是TensorFlow的原生方法，更加灵活，可以获得更好的性能。\n\n定义模型\n\n1、使用Sequential按层顺序构建模型\n\n2、使用函数式API构建任意结构模型\n\n3、继承Model基类构建自定义模型\n\n训练模型\n\n1、内置fit\n\n2、内置train_on_batch\n\n3、自定义训练循环\n\n### Anaconda上传环境\n\n```shell\nconda env export -n my-environment -f my-environment.yml\n```\n\n```shell\nanaconda upload my-environment.yml\n```\n\n","slug":"TensorFlow图像识别","published":0,"updated":"2020-05-18T09:17:04.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3byi0000hb8y0kaj42lj","content":"<p>准备图片数据</p>\n<p>1、使用tf.keras中的ImageDataGenerator工具构建图片数据生成器</p>\n<p>2、使用tf.data.Dataset搭配tf.image中的一些图片处理方法构建数据管道</p>\n<p>第一种方法更为简单，第二种方法是TensorFlow的原生方法，更加灵活，可以获得更好的性能。</p>\n<p>定义模型</p>\n<p>1、使用Sequential按层顺序构建模型</p>\n<p>2、使用函数式API构建任意结构模型</p>\n<p>3、继承Model基类构建自定义模型</p>\n<p>训练模型</p>\n<p>1、内置fit</p>\n<p>2、内置train_on_batch</p>\n<p>3、自定义训练循环</p>\n<h3 id=\"Anaconda上传环境\"><a href=\"#Anaconda上传环境\" class=\"headerlink\" title=\"Anaconda上传环境\"></a>Anaconda上传环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env export -n my-environment -f my-environment.yml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anaconda upload my-environment.yml</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>准备图片数据</p>\n<p>1、使用tf.keras中的ImageDataGenerator工具构建图片数据生成器</p>\n<p>2、使用tf.data.Dataset搭配tf.image中的一些图片处理方法构建数据管道</p>\n<p>第一种方法更为简单，第二种方法是TensorFlow的原生方法，更加灵活，可以获得更好的性能。</p>\n<p>定义模型</p>\n<p>1、使用Sequential按层顺序构建模型</p>\n<p>2、使用函数式API构建任意结构模型</p>\n<p>3、继承Model基类构建自定义模型</p>\n<p>训练模型</p>\n<p>1、内置fit</p>\n<p>2、内置train_on_batch</p>\n<p>3、自定义训练循环</p>\n<h3 id=\"Anaconda上传环境\"><a href=\"#Anaconda上传环境\" class=\"headerlink\" title=\"Anaconda上传环境\"></a>Anaconda上传环境</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda env export -n my-environment -f my-environment.yml</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">anaconda upload my-environment.yml</span><br></pre></td></tr></table></figure>\n\n"},{"title":"在Flutter中使用Bloc","date":"2020-05-06T03:31:18.000Z","_content":"\n","source":"_drafts/在Flutter中使用Bloc.md","raw":"---\ntitle: 在Flutter中使用Bloc\ndate: 2020-05-06 11:31:18\ncategories:\n- flutter\ntags:\n- flutter\n- bloc\n---\n\n","slug":"在Flutter中使用Bloc","published":0,"updated":"2020-05-18T02:32:17.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3byn0002hb8y6txi0n1j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Centos7系统VPS配置记录","date":"2020-03-29T12:25:12.000Z","_content":"\n> 搬瓦工的VPS确实不错，我是17年买的18.99刀一年的，现在已经没有这个套餐了。系统选用的是Centos 7，已完成的软件和设置是 「私钥ssh + V2Ray + 锐速 + Nginx + Https」。做此篇备忘，防止以后再设置VPS的时候到处翻找教程。\n\n### VPS配置如图\n\n本来还担心512M RAM安装Centos 7不够用，目前来看还是不用太担心的。\n\n![vps](https://i.loli.net/2020/03/29/cjf8SFQw5WXaLEk.png)\n\n### 1、ssh私钥登录\n\n- 生成公私钥\n\n  ```shell\n  ssh-keygen -t rsa\n  ```\n\n  会提示公私钥保存路径和设置私钥密码，路径保持默认即可，生成的公私钥保存在 **/root/.ssh**，id_rsa.pub 为公钥，id_rsa 为私钥。\n\n- 安装公钥\n\n  复制公钥内容到/root/.ssh/authorized_keys，修改 .ssh文件夹权限，修改 authorized_keys文件权限。\n\n  ```shell\n  cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys\n  chmod 600  /root/.ssh/authorized_keys\n  chmod 700  /root/.ssh\n  ```\n\n- 修改SSH配置\n\n  编辑修改 **/etc/ssh/sshd_config** 文件\n\n  ```nginx\n  RSAAuthentication yes # 开启密钥登入的认证方式\n  PubkeyAuthentication yes # 开启密钥登入的认证方式\n  PermitRootLogin yes #root用户能否通过ssh登录\n  ```\n\n  重启ssh服务\n\n  ```shell\n  service sshd restart\n  ```\n\n  保存私钥到本地，在ssh客户端使用私钥登录。\n\n### 2、安装V2Ray代理\n\n- 使用V2Ray一键安装脚本\n\n  ```shell\n  bash <(curl -s -L https://git.io/v2ray.sh)\n  ```\n\n- 具体介绍和配置请参考 [V2Ray官网](https://www.v2ray.com/) 和 [V2Ray一键安装脚本](https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC)\n\n### 3、启用锐速\n\n- 内核降级\n\n  ```shell\n  wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh\n  ```\n\n- 安装锐速\n\n  ```shell\n  yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install\n  ```\n\n- 常用命令\n\n  ```shell\n  #查看运行状态\n  /appex/bin/serverSpeeder.sh status\n  #启动锐速\n  /appex/bin/serverSpeeder.sh start\n  #停止锐速\n  /appex/bin/serverSpeeder.sh stop\n  #重启锐速\n  /appex/bin/serverSpeeder.sh restart\n  #卸载锐速\n  /appex/bin/serverSpeeder.sh uninstall\n  ```\n\n### 4、安装配置 Nginx\n\n- 安装 Nginx\n\n  添加yum源\n\n  ```shell\n  sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n  ```\n\n  安装 Nginx\n\n  ```shell\n  sudo yum install nginx\n  ```\n\n  设置开机启动\n\n  ```shell\n  sudo systemctl enable nginx\n  ```\n\n  常用命令\n\n  ```shell\n  sudo systemctl start nginx  #启动服务\n  sudo systemctl restart nginx  #重启服务\nsudo systemctl reload nginx  ##重载服务\n  ```\n\n- 配置 Nginx\n\n  ```nginx\n  server {\n      listen 80;\n      server_name example.com www.example.com;\n      rewrite ^(.*) https://$server_name$1 permanent;\n  }\n  server {\n      listen 443 ssl;\n      server_name  example.com www.example.com;\n      ssl_certificate  /etc/nginx/ssl/fullchain.cer;\n      ssl_certificate_key  /etc/nginx/ssl/example.com.key;\n      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;\n      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n      ssl_prefer_server_ciphers on;\n      location / {\n          root /usr/share/nginx/home;\n          index index.html index.htm;\n      }\n  }\n  \n  server {\n      listen 80;\n      server_name blog.example.com;\n      rewrite ^(.*) https://$server_name$1 permanent;\n  }\n  server {\n      listen 443 ssl;\n      server_name  blog.example.com;\n      ssl_certificate  /etc/nginx/ssl/fullchain.cer;\n      ssl_certificate_key  /etc/nginx/ssl/example.com.key;\n      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;\n      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n      ssl_prefer_server_ciphers on;\n      location / {\n          root /usr/share/nginx/blog;\n          index index.html index.htm;\n      }\n  }\n  ```\n\n### 5、申请证书打开Https\n\n- 安装acme.sh，安装后请 **重启终端** 使用\n\n  ```shell\n  curl  https://get.acme.sh | sh\n  ```\n\n- 生成证书\n\n  我使用的是阿里云的域名，生成主域名+泛域名证书，其他生成方式见 [acem.sh文档](https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E)\n\n  ```shell\n  export Ali_Key=\"Ali_Key\"\n  export Ali_Secret=\"Ali_Secret\"\n  acme.sh --issue --dns dns_ali -d example.com -d *.example.com\n  ```\n\n- 安装证书\n\n  我使用的nginx安装证书，其他安装方式见 [acem.sh文档](https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E)\n\n  ```shell\n  acme.sh --installcert -d example.com -d *.example.com \\\n  --key-file       /etc/nginx/ssl/example.com.key  \\\n  --fullchain-file /etc/nginx/ssl/fullchain.cer \\\n  --reloadcmd     \"service nginx force-reload\"\n  ```\n\n- 更新证书\n\n  目前证书在 60 天以后会自动更新, 无需任何操作。\n\n- 配置https访问\n\n  > 参考第4步: Nginx配置","source":"_posts/Centos7系统VPS配置记录.md","raw":"---\ntitle: Centos7系统VPS配置记录\ncategories:\n  - 技巧\ntags:\n  - VPS\ndate: 2020-03-29 20:25:12\n---\n\n> 搬瓦工的VPS确实不错，我是17年买的18.99刀一年的，现在已经没有这个套餐了。系统选用的是Centos 7，已完成的软件和设置是 「私钥ssh + V2Ray + 锐速 + Nginx + Https」。做此篇备忘，防止以后再设置VPS的时候到处翻找教程。\n\n### VPS配置如图\n\n本来还担心512M RAM安装Centos 7不够用，目前来看还是不用太担心的。\n\n![vps](https://i.loli.net/2020/03/29/cjf8SFQw5WXaLEk.png)\n\n### 1、ssh私钥登录\n\n- 生成公私钥\n\n  ```shell\n  ssh-keygen -t rsa\n  ```\n\n  会提示公私钥保存路径和设置私钥密码，路径保持默认即可，生成的公私钥保存在 **/root/.ssh**，id_rsa.pub 为公钥，id_rsa 为私钥。\n\n- 安装公钥\n\n  复制公钥内容到/root/.ssh/authorized_keys，修改 .ssh文件夹权限，修改 authorized_keys文件权限。\n\n  ```shell\n  cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys\n  chmod 600  /root/.ssh/authorized_keys\n  chmod 700  /root/.ssh\n  ```\n\n- 修改SSH配置\n\n  编辑修改 **/etc/ssh/sshd_config** 文件\n\n  ```nginx\n  RSAAuthentication yes # 开启密钥登入的认证方式\n  PubkeyAuthentication yes # 开启密钥登入的认证方式\n  PermitRootLogin yes #root用户能否通过ssh登录\n  ```\n\n  重启ssh服务\n\n  ```shell\n  service sshd restart\n  ```\n\n  保存私钥到本地，在ssh客户端使用私钥登录。\n\n### 2、安装V2Ray代理\n\n- 使用V2Ray一键安装脚本\n\n  ```shell\n  bash <(curl -s -L https://git.io/v2ray.sh)\n  ```\n\n- 具体介绍和配置请参考 [V2Ray官网](https://www.v2ray.com/) 和 [V2Ray一键安装脚本](https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC)\n\n### 3、启用锐速\n\n- 内核降级\n\n  ```shell\n  wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh && bash rskernel.sh\n  ```\n\n- 安装锐速\n\n  ```shell\n  yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install\n  ```\n\n- 常用命令\n\n  ```shell\n  #查看运行状态\n  /appex/bin/serverSpeeder.sh status\n  #启动锐速\n  /appex/bin/serverSpeeder.sh start\n  #停止锐速\n  /appex/bin/serverSpeeder.sh stop\n  #重启锐速\n  /appex/bin/serverSpeeder.sh restart\n  #卸载锐速\n  /appex/bin/serverSpeeder.sh uninstall\n  ```\n\n### 4、安装配置 Nginx\n\n- 安装 Nginx\n\n  添加yum源\n\n  ```shell\n  sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm\n  ```\n\n  安装 Nginx\n\n  ```shell\n  sudo yum install nginx\n  ```\n\n  设置开机启动\n\n  ```shell\n  sudo systemctl enable nginx\n  ```\n\n  常用命令\n\n  ```shell\n  sudo systemctl start nginx  #启动服务\n  sudo systemctl restart nginx  #重启服务\nsudo systemctl reload nginx  ##重载服务\n  ```\n\n- 配置 Nginx\n\n  ```nginx\n  server {\n      listen 80;\n      server_name example.com www.example.com;\n      rewrite ^(.*) https://$server_name$1 permanent;\n  }\n  server {\n      listen 443 ssl;\n      server_name  example.com www.example.com;\n      ssl_certificate  /etc/nginx/ssl/fullchain.cer;\n      ssl_certificate_key  /etc/nginx/ssl/example.com.key;\n      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;\n      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n      ssl_prefer_server_ciphers on;\n      location / {\n          root /usr/share/nginx/home;\n          index index.html index.htm;\n      }\n  }\n  \n  server {\n      listen 80;\n      server_name blog.example.com;\n      rewrite ^(.*) https://$server_name$1 permanent;\n  }\n  server {\n      listen 443 ssl;\n      server_name  blog.example.com;\n      ssl_certificate  /etc/nginx/ssl/fullchain.cer;\n      ssl_certificate_key  /etc/nginx/ssl/example.com.key;\n      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;\n      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n      ssl_prefer_server_ciphers on;\n      location / {\n          root /usr/share/nginx/blog;\n          index index.html index.htm;\n      }\n  }\n  ```\n\n### 5、申请证书打开Https\n\n- 安装acme.sh，安装后请 **重启终端** 使用\n\n  ```shell\n  curl  https://get.acme.sh | sh\n  ```\n\n- 生成证书\n\n  我使用的是阿里云的域名，生成主域名+泛域名证书，其他生成方式见 [acem.sh文档](https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E)\n\n  ```shell\n  export Ali_Key=\"Ali_Key\"\n  export Ali_Secret=\"Ali_Secret\"\n  acme.sh --issue --dns dns_ali -d example.com -d *.example.com\n  ```\n\n- 安装证书\n\n  我使用的nginx安装证书，其他安装方式见 [acem.sh文档](https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E)\n\n  ```shell\n  acme.sh --installcert -d example.com -d *.example.com \\\n  --key-file       /etc/nginx/ssl/example.com.key  \\\n  --fullchain-file /etc/nginx/ssl/fullchain.cer \\\n  --reloadcmd     \"service nginx force-reload\"\n  ```\n\n- 更新证书\n\n  目前证书在 60 天以后会自动更新, 无需任何操作。\n\n- 配置https访问\n\n  > 参考第4步: Nginx配置","slug":"Centos7系统VPS配置记录","published":1,"updated":"2020-06-18T10:43:13.891Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3byq0006hb8y1zeth7wk","content":"<blockquote>\n<p>搬瓦工的VPS确实不错，我是17年买的18.99刀一年的，现在已经没有这个套餐了。系统选用的是Centos 7，已完成的软件和设置是 「私钥ssh + V2Ray + 锐速 + Nginx + Https」。做此篇备忘，防止以后再设置VPS的时候到处翻找教程。</p>\n</blockquote>\n<h3 id=\"VPS配置如图\"><a href=\"#VPS配置如图\" class=\"headerlink\" title=\"VPS配置如图\"></a>VPS配置如图</h3><p>本来还担心512M RAM安装Centos 7不够用，目前来看还是不用太担心的。</p>\n<p><img src=\"https://i.loli.net/2020/03/29/cjf8SFQw5WXaLEk.png\" alt=\"vps\"></p>\n<h3 id=\"1、ssh私钥登录\"><a href=\"#1、ssh私钥登录\" class=\"headerlink\" title=\"1、ssh私钥登录\"></a>1、ssh私钥登录</h3><ul>\n<li><p>生成公私钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>会提示公私钥保存路径和设置私钥密码，路径保持默认即可，生成的公私钥保存在 <strong>/root/.ssh</strong>，id_rsa.pub 为公钥，id_rsa 为私钥。</p>\n</li>\n<li><p>安装公钥</p>\n<p>复制公钥内容到/root/.ssh/authorized_keys，修改 .ssh文件夹权限，修改 authorized_keys文件权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span><br><span class=\"line\">chmod 600  /root/.ssh/authorized_keys</span><br><span class=\"line\">chmod 700  /root/.ssh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改SSH配置</p>\n<p>编辑修改 <strong>/etc/ssh/sshd_config</strong> 文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">RSAAuthentication</span> <span class=\"literal\">yes</span> <span class=\"comment\"># 开启密钥登入的认证方式</span></span><br><span class=\"line\">PubkeyAuthentication <span class=\"literal\">yes</span> <span class=\"comment\"># 开启密钥登入的认证方式</span></span><br><span class=\"line\">PermitRootLogin <span class=\"literal\">yes</span> <span class=\"comment\">#root用户能否通过ssh登录</span></span><br></pre></td></tr></table></figure>\n\n<p>重启ssh服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n\n<p>保存私钥到本地，在ssh客户端使用私钥登录。</p>\n</li>\n</ul>\n<h3 id=\"2、安装V2Ray代理\"><a href=\"#2、安装V2Ray代理\" class=\"headerlink\" title=\"2、安装V2Ray代理\"></a>2、安装V2Ray代理</h3><ul>\n<li><p>使用V2Ray一键安装脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体介绍和配置请参考 <a href=\"https://www.v2ray.com/\" target=\"_blank\" rel=\"noopener\">V2Ray官网</a> 和 <a href=\"https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC\" target=\"_blank\" rel=\"noopener\">V2Ray一键安装脚本</a></p>\n</li>\n</ul>\n<h3 id=\"3、启用锐速\"><a href=\"#3、启用锐速\" class=\"headerlink\" title=\"3、启用锐速\"></a>3、启用锐速</h3><ul>\n<li><p>内核降级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装锐速</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看运行状态</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh status</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh uninstall</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"4、安装配置-Nginx\"><a href=\"#4、安装配置-Nginx\" class=\"headerlink\" title=\"4、安装配置 Nginx\"></a>4、安装配置 Nginx</h3><ul>\n<li><p>安装 Nginx</p>\n<p>添加yum源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装 Nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n\n<p>设置开机启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure>\n\n<p>常用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  sudo systemctl start nginx  #启动服务</span><br><span class=\"line\">  sudo systemctl restart nginx  #重启服务</span><br><span class=\"line\">sudo systemctl reload nginx  ##重载服务</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 Nginx</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com www.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.com www.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>  /etc/nginx/ssl/fullchain.cer;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span>  /etc/nginx/ssl/example.com.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/home;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> blog.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  blog.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>  /etc/nginx/ssl/fullchain.cer;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span>  /etc/nginx/ssl/example.com.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/blog;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"5、申请证书打开Https\"><a href=\"#5、申请证书打开Https\" class=\"headerlink\" title=\"5、申请证书打开Https\"></a>5、申请证书打开Https</h3><ul>\n<li><p>安装acme.sh，安装后请 <strong>重启终端</strong> 使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成证书</p>\n<p>我使用的是阿里云的域名，生成主域名+泛域名证书，其他生成方式见 <a href=\"https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"noopener\">acem.sh文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export Ali_Key=\"Ali_Key\"</span><br><span class=\"line\">export Ali_Secret=\"Ali_Secret\"</span><br><span class=\"line\">acme.sh --issue --dns dns_ali -d example.com -d *.example.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装证书</p>\n<p>我使用的nginx安装证书，其他安装方式见 <a href=\"https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"noopener\">acem.sh文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acme.sh --installcert -d example.com -d *.example.com \\</span><br><span class=\"line\">--key-file       /etc/nginx/ssl/example.com.key  \\</span><br><span class=\"line\">--fullchain-file /etc/nginx/ssl/fullchain.cer \\</span><br><span class=\"line\">--reloadcmd     \"service nginx force-reload\"</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新证书</p>\n<p>目前证书在 60 天以后会自动更新, 无需任何操作。</p>\n</li>\n<li><p>配置https访问</p>\n<blockquote>\n<p>参考第4步: Nginx配置</p>\n</blockquote>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>搬瓦工的VPS确实不错，我是17年买的18.99刀一年的，现在已经没有这个套餐了。系统选用的是Centos 7，已完成的软件和设置是 「私钥ssh + V2Ray + 锐速 + Nginx + Https」。做此篇备忘，防止以后再设置VPS的时候到处翻找教程。</p>\n</blockquote>\n<h3 id=\"VPS配置如图\"><a href=\"#VPS配置如图\" class=\"headerlink\" title=\"VPS配置如图\"></a>VPS配置如图</h3><p>本来还担心512M RAM安装Centos 7不够用，目前来看还是不用太担心的。</p>\n<p><img src=\"https://i.loli.net/2020/03/29/cjf8SFQw5WXaLEk.png\" alt=\"vps\"></p>\n<h3 id=\"1、ssh私钥登录\"><a href=\"#1、ssh私钥登录\" class=\"headerlink\" title=\"1、ssh私钥登录\"></a>1、ssh私钥登录</h3><ul>\n<li><p>生成公私钥</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>会提示公私钥保存路径和设置私钥密码，路径保持默认即可，生成的公私钥保存在 <strong>/root/.ssh</strong>，id_rsa.pub 为公钥，id_rsa 为私钥。</p>\n</li>\n<li><p>安装公钥</p>\n<p>复制公钥内容到/root/.ssh/authorized_keys，修改 .ssh文件夹权限，修改 authorized_keys文件权限。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span><br><span class=\"line\">chmod 600  /root/.ssh/authorized_keys</span><br><span class=\"line\">chmod 700  /root/.ssh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改SSH配置</p>\n<p>编辑修改 <strong>/etc/ssh/sshd_config</strong> 文件</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">RSAAuthentication</span> <span class=\"literal\">yes</span> <span class=\"comment\"># 开启密钥登入的认证方式</span></span><br><span class=\"line\">PubkeyAuthentication <span class=\"literal\">yes</span> <span class=\"comment\"># 开启密钥登入的认证方式</span></span><br><span class=\"line\">PermitRootLogin <span class=\"literal\">yes</span> <span class=\"comment\">#root用户能否通过ssh登录</span></span><br></pre></td></tr></table></figure>\n\n<p>重启ssh服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service sshd restart</span><br></pre></td></tr></table></figure>\n\n<p>保存私钥到本地，在ssh客户端使用私钥登录。</p>\n</li>\n</ul>\n<h3 id=\"2、安装V2Ray代理\"><a href=\"#2、安装V2Ray代理\" class=\"headerlink\" title=\"2、安装V2Ray代理\"></a>2、安装V2Ray代理</h3><ul>\n<li><p>使用V2Ray一键安装脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>具体介绍和配置请参考 <a href=\"https://www.v2ray.com/\" target=\"_blank\" rel=\"noopener\">V2Ray官网</a> 和 <a href=\"https://github.com/233boy/v2ray/wiki/V2Ray%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC\" target=\"_blank\" rel=\"noopener\">V2Ray一键安装脚本</a></p>\n</li>\n</ul>\n<h3 id=\"3、启用锐速\"><a href=\"#3、启用锐速\" class=\"headerlink\" title=\"3、启用锐速\"></a>3、启用锐速</h3><ul>\n<li><p>内核降级</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/uxh/shadowsocks_bash/master/rskernel.sh &amp;&amp; bash rskernel.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装锐速</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install net-tools -y &amp;&amp; wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh &amp;&amp; bash appex.sh install</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>常用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">查看运行状态</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh status</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh start</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh stop</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">重启锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh restart</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">卸载锐速</span></span><br><span class=\"line\">/appex/bin/serverSpeeder.sh uninstall</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"4、安装配置-Nginx\"><a href=\"#4、安装配置-Nginx\" class=\"headerlink\" title=\"4、安装配置 Nginx\"></a>4、安装配置 Nginx</h3><ul>\n<li><p>安装 Nginx</p>\n<p>添加yum源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装 Nginx</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install nginx</span><br></pre></td></tr></table></figure>\n\n<p>设置开机启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable nginx</span><br></pre></td></tr></table></figure>\n\n<p>常用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  sudo systemctl start nginx  #启动服务</span><br><span class=\"line\">  sudo systemctl restart nginx  #重启服务</span><br><span class=\"line\">sudo systemctl reload nginx  ##重载服务</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 Nginx</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> example.com www.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  example.com www.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>  /etc/nginx/ssl/fullchain.cer;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span>  /etc/nginx/ssl/example.com.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/home;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> blog.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">rewrite</span><span class=\"regexp\"> ^(.*)</span> https://<span class=\"variable\">$server_name</span><span class=\"variable\">$1</span> <span class=\"literal\">permanent</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span> ssl;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span>  blog.example.com;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>  /etc/nginx/ssl/fullchain.cer;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span>  /etc/nginx/ssl/example.com.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4:!DH:!DHE;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> /usr/share/nginx/blog;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"5、申请证书打开Https\"><a href=\"#5、申请证书打开Https\" class=\"headerlink\" title=\"5、申请证书打开Https\"></a>5、申请证书打开Https</h3><ul>\n<li><p>安装acme.sh，安装后请 <strong>重启终端</strong> 使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成证书</p>\n<p>我使用的是阿里云的域名，生成主域名+泛域名证书，其他生成方式见 <a href=\"https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"noopener\">acem.sh文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export Ali_Key=\"Ali_Key\"</span><br><span class=\"line\">export Ali_Secret=\"Ali_Secret\"</span><br><span class=\"line\">acme.sh --issue --dns dns_ali -d example.com -d *.example.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装证书</p>\n<p>我使用的nginx安装证书，其他安装方式见 <a href=\"https://github.com/acmesh-official/acme.sh/wiki/%E8%AF%B4%E6%98%8E\" target=\"_blank\" rel=\"noopener\">acem.sh文档</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">acme.sh --installcert -d example.com -d *.example.com \\</span><br><span class=\"line\">--key-file       /etc/nginx/ssl/example.com.key  \\</span><br><span class=\"line\">--fullchain-file /etc/nginx/ssl/fullchain.cer \\</span><br><span class=\"line\">--reloadcmd     \"service nginx force-reload\"</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新证书</p>\n<p>目前证书在 60 天以后会自动更新, 无需任何操作。</p>\n</li>\n<li><p>配置https访问</p>\n<blockquote>\n<p>参考第4步: Nginx配置</p>\n</blockquote>\n</li>\n</ul>\n"},{"title":"Flutter学习重点记录","date":"2020-04-15T11:03:32.000Z","_content":"\n> Flutter 中的重点知识和报错解决记录\n\n### 知识点\n\n1. #### 全屏 push 实现，类似 iOS 的 present\n\n   ```dart\n   // 添加 fullscreenDialog: true\n   Navigator.push(\n   \tcontext, \n   \tMaterialPageRoute(\n   \t\tbuilder: (context) => YourPage(),\n   \t\tfullscreenDialog: true\n   \t)\n   );\n   ```\n\n2. #### 页面跳转隐藏左上角返回按钮\n\n   ```dart\n   // 使用 Navigator.pushReplacement 替换 Navigator.push\n   Navigator.pushReplacement(\n   \tcontext, \n   \tMaterialPageRoute(\n   \t\tbuilder: (context) => YourPage(),\n   \t)\n   );\n   ```\n\n### 错误解决\n\n1. #### setState() called after dispose()\n\n   界面释放以后调用 setState 方法，导致抛出异常\n\n   ```dart\n   // 调用 setState 方法前添加 !mounted 判断\n   if (!mounted) return;\n   setState(() {\n   \t//Your code\n   });\n   ```\n   \n2. #### setState() or markNeedsBuild called during build\n\n   报错原因是手势方法调用错误，直接调用了 doSomething()\n\n   ```dart\n   // 修改为 onTap: () => doSomething()\n   GestureDetector(\n   \tonTap: onTap: () => doSomething(), \n   \tchild: Text(\"helllo\")\n   )\n   ```\n\n","source":"_posts/Flutter学习重点记录.md","raw":"---\ntitle: Flutter学习重点记录\ncategories:\n  - 前端\ntags:\n  - Flutter\ndate: 2020-04-15 19:03:32\n---\n\n> Flutter 中的重点知识和报错解决记录\n\n### 知识点\n\n1. #### 全屏 push 实现，类似 iOS 的 present\n\n   ```dart\n   // 添加 fullscreenDialog: true\n   Navigator.push(\n   \tcontext, \n   \tMaterialPageRoute(\n   \t\tbuilder: (context) => YourPage(),\n   \t\tfullscreenDialog: true\n   \t)\n   );\n   ```\n\n2. #### 页面跳转隐藏左上角返回按钮\n\n   ```dart\n   // 使用 Navigator.pushReplacement 替换 Navigator.push\n   Navigator.pushReplacement(\n   \tcontext, \n   \tMaterialPageRoute(\n   \t\tbuilder: (context) => YourPage(),\n   \t)\n   );\n   ```\n\n### 错误解决\n\n1. #### setState() called after dispose()\n\n   界面释放以后调用 setState 方法，导致抛出异常\n\n   ```dart\n   // 调用 setState 方法前添加 !mounted 判断\n   if (!mounted) return;\n   setState(() {\n   \t//Your code\n   });\n   ```\n   \n2. #### setState() or markNeedsBuild called during build\n\n   报错原因是手势方法调用错误，直接调用了 doSomething()\n\n   ```dart\n   // 修改为 onTap: () => doSomething()\n   GestureDetector(\n   \tonTap: onTap: () => doSomething(), \n   \tchild: Text(\"helllo\")\n   )\n   ```\n\n","slug":"Flutter学习重点记录","published":1,"updated":"2020-06-18T10:43:30.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bys0008hb8y40ate1zh","content":"<blockquote>\n<p>Flutter 中的重点知识和报错解决记录</p>\n</blockquote>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ol>\n<li><h4 id=\"全屏-push-实现，类似-iOS-的-present\"><a href=\"#全屏-push-实现，类似-iOS-的-present\" class=\"headerlink\" title=\"全屏 push 实现，类似 iOS 的 present\"></a>全屏 push 实现，类似 iOS 的 present</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加 fullscreenDialog: true</span></span><br><span class=\"line\">Navigator.push(</span><br><span class=\"line\">\tcontext, </span><br><span class=\"line\">\tMaterialPageRoute(</span><br><span class=\"line\">\t\tbuilder: (context) =&gt; YourPage(),</span><br><span class=\"line\">\t\tfullscreenDialog: <span class=\"keyword\">true</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"页面跳转隐藏左上角返回按钮\"><a href=\"#页面跳转隐藏左上角返回按钮\" class=\"headerlink\" title=\"页面跳转隐藏左上角返回按钮\"></a>页面跳转隐藏左上角返回按钮</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Navigator.pushReplacement 替换 Navigator.push</span></span><br><span class=\"line\">Navigator.pushReplacement(</span><br><span class=\"line\">\tcontext, </span><br><span class=\"line\">\tMaterialPageRoute(</span><br><span class=\"line\">\t\tbuilder: (context) =&gt; YourPage(),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h3><ol>\n<li><h4 id=\"setState-called-after-dispose\"><a href=\"#setState-called-after-dispose\" class=\"headerlink\" title=\"setState() called after dispose()\"></a>setState() called after dispose()</h4><p>界面释放以后调用 setState 方法，导致抛出异常</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 setState 方法前添加 !mounted 判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!mounted) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">setState(() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Your code</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"setState-or-markNeedsBuild-called-during-build\"><a href=\"#setState-or-markNeedsBuild-called-during-build\" class=\"headerlink\" title=\"setState() or markNeedsBuild called during build\"></a>setState() or markNeedsBuild called during build</h4><p>报错原因是手势方法调用错误，直接调用了 doSomething()</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改为 onTap: () =&gt; doSomething()</span></span><br><span class=\"line\">GestureDetector(</span><br><span class=\"line\">\tonTap: onTap: () =&gt; doSomething(), </span><br><span class=\"line\">\tchild: Text(<span class=\"string\">\"helllo\"</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Flutter 中的重点知识和报错解决记录</p>\n</blockquote>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><ol>\n<li><h4 id=\"全屏-push-实现，类似-iOS-的-present\"><a href=\"#全屏-push-实现，类似-iOS-的-present\" class=\"headerlink\" title=\"全屏 push 实现，类似 iOS 的 present\"></a>全屏 push 实现，类似 iOS 的 present</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加 fullscreenDialog: true</span></span><br><span class=\"line\">Navigator.push(</span><br><span class=\"line\">\tcontext, </span><br><span class=\"line\">\tMaterialPageRoute(</span><br><span class=\"line\">\t\tbuilder: (context) =&gt; YourPage(),</span><br><span class=\"line\">\t\tfullscreenDialog: <span class=\"keyword\">true</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"页面跳转隐藏左上角返回按钮\"><a href=\"#页面跳转隐藏左上角返回按钮\" class=\"headerlink\" title=\"页面跳转隐藏左上角返回按钮\"></a>页面跳转隐藏左上角返回按钮</h4><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Navigator.pushReplacement 替换 Navigator.push</span></span><br><span class=\"line\">Navigator.pushReplacement(</span><br><span class=\"line\">\tcontext, </span><br><span class=\"line\">\tMaterialPageRoute(</span><br><span class=\"line\">\t\tbuilder: (context) =&gt; YourPage(),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h3><ol>\n<li><h4 id=\"setState-called-after-dispose\"><a href=\"#setState-called-after-dispose\" class=\"headerlink\" title=\"setState() called after dispose()\"></a>setState() called after dispose()</h4><p>界面释放以后调用 setState 方法，导致抛出异常</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 调用 setState 方法前添加 !mounted 判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!mounted) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">setState(() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Your code</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"setState-or-markNeedsBuild-called-during-build\"><a href=\"#setState-or-markNeedsBuild-called-during-build\" class=\"headerlink\" title=\"setState() or markNeedsBuild called during build\"></a>setState() or markNeedsBuild called during build</h4><p>报错原因是手势方法调用错误，直接调用了 doSomething()</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改为 onTap: () =&gt; doSomething()</span></span><br><span class=\"line\">GestureDetector(</span><br><span class=\"line\">\tonTap: onTap: () =&gt; doSomething(), </span><br><span class=\"line\">\tchild: Text(<span class=\"string\">\"helllo\"</span>)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"Create ML 自建数据集实现物体侦测","date":"2020-06-16T09:12:35.000Z","_content":"\n### Create ML 介绍\n\nCreate ML 可以与 Swift 和 macOS Playground 等您所熟悉的工具搭配使用，在 Mac 上创建和训练自定的机器学习模型。您可以训练模型来完成一些任务，例如识别图像、提取文本含义或查找数字值之间的关系。\n\n### Create ML 模型种类\n\n![模型分类](https://i.loli.net/2020/06/17/LwsEPZMcrJbVSvI.png)\n\n### 自建数据集实现物体侦测\n\n1. ##### 创建图像侦测 Create ML 项目\n\n   新建 Create ML 项目\n\n   ![创建模型](https://i.loli.net/2020/06/17/t1FvVm8H6S59pKs.png)\n\n   项目面板介绍\n\n   ![项目面板](https://i.loli.net/2020/06/17/QwRdbG3WEgMJkXC.png)\n\n2. ##### 自建用于训练的数据集\n\n   数据集整理如下，包含需要训练的图片和标记文件\n\n   ![截屏2020-06-17 18.38.09](https://i.loli.net/2020/06/17/HT4jxsbMySFzr9h.png)\n\n   annotations.json 格式如下，image → 图片名称，label → 标记类别，coordinates → 标记位置\n\n   ```json\n   [\n     {\"image\":\"domino_01.jpg\",\"annotations\":[\n        {\"label\":\"fall\",\"coordinates\":{\"x\":94,\"y\":409,\"width\":146,\"height\":225}},\n        {\"label\":\"stand\",\"coordinates\":{\"x\":259,\"y\":268,\"width\":159,\"height\":269}}]\n     },\n     {\"image\":\"domino_02.jpg\",\"annotations\":[\n        {\"label\":\"fall\",\"coordinates\":{\"x\":196,\"y\":642,\"width\":200,\"height\":278}},\n        {\"label\":\"stand\",\"coordinates\":{\"x\":153,\"y\":373,\"width\":189,\"height\":263}}]\n     }\n   ]\n   ```\n\n   > 可以使用 IBM Cloud 标记工具来标记数据集，具体方法可参考  [Create ML 标记神器](https://blog.csdn.net/duxinshuxiaobian/article/details/95915249)\n\n3. ##### 开始模型训练\n\n   数据集整理完成后，直接把数据集文件夹拖入项目的训练数据即可。项目会自动识别数据集的总类别数，数据集包含图片数量，填入训练步数后点击“运行”按钮开始训练。注意：必须完成所有训练步数才能生成模型，中途取消不会生成模型。\n\n   在项目面板可以查看 loss 趋势，训练完成后可看到各个类别的识别率。\n\n   ![截屏2020-06-17 18.49.49](https://i.loli.net/2020/06/17/pIAiKnek27YS8u5.png)\n\n4. ##### 使用测试数据验证模型\n\n   <iframe height=\"400\" width=\"600\" src=\"//player.bilibili.com/player.html?aid=371069850&bvid=BV1kZ4y1H7ct&cid=203127865&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n5. ##### 导出模型并集成进 iOS 应用\n\n   \n\n   \n\n","source":"_posts/Create ML 自建数据集实现物体侦测.md","raw":"---\ntitle: Create ML 自建数据集实现物体侦测\ncategories:\n  - 机器学习\ntags:\n  - Create ML\ndate: 2020-06-16 17:12:35\n---\n\n### Create ML 介绍\n\nCreate ML 可以与 Swift 和 macOS Playground 等您所熟悉的工具搭配使用，在 Mac 上创建和训练自定的机器学习模型。您可以训练模型来完成一些任务，例如识别图像、提取文本含义或查找数字值之间的关系。\n\n### Create ML 模型种类\n\n![模型分类](https://i.loli.net/2020/06/17/LwsEPZMcrJbVSvI.png)\n\n### 自建数据集实现物体侦测\n\n1. ##### 创建图像侦测 Create ML 项目\n\n   新建 Create ML 项目\n\n   ![创建模型](https://i.loli.net/2020/06/17/t1FvVm8H6S59pKs.png)\n\n   项目面板介绍\n\n   ![项目面板](https://i.loli.net/2020/06/17/QwRdbG3WEgMJkXC.png)\n\n2. ##### 自建用于训练的数据集\n\n   数据集整理如下，包含需要训练的图片和标记文件\n\n   ![截屏2020-06-17 18.38.09](https://i.loli.net/2020/06/17/HT4jxsbMySFzr9h.png)\n\n   annotations.json 格式如下，image → 图片名称，label → 标记类别，coordinates → 标记位置\n\n   ```json\n   [\n     {\"image\":\"domino_01.jpg\",\"annotations\":[\n        {\"label\":\"fall\",\"coordinates\":{\"x\":94,\"y\":409,\"width\":146,\"height\":225}},\n        {\"label\":\"stand\",\"coordinates\":{\"x\":259,\"y\":268,\"width\":159,\"height\":269}}]\n     },\n     {\"image\":\"domino_02.jpg\",\"annotations\":[\n        {\"label\":\"fall\",\"coordinates\":{\"x\":196,\"y\":642,\"width\":200,\"height\":278}},\n        {\"label\":\"stand\",\"coordinates\":{\"x\":153,\"y\":373,\"width\":189,\"height\":263}}]\n     }\n   ]\n   ```\n\n   > 可以使用 IBM Cloud 标记工具来标记数据集，具体方法可参考  [Create ML 标记神器](https://blog.csdn.net/duxinshuxiaobian/article/details/95915249)\n\n3. ##### 开始模型训练\n\n   数据集整理完成后，直接把数据集文件夹拖入项目的训练数据即可。项目会自动识别数据集的总类别数，数据集包含图片数量，填入训练步数后点击“运行”按钮开始训练。注意：必须完成所有训练步数才能生成模型，中途取消不会生成模型。\n\n   在项目面板可以查看 loss 趋势，训练完成后可看到各个类别的识别率。\n\n   ![截屏2020-06-17 18.49.49](https://i.loli.net/2020/06/17/pIAiKnek27YS8u5.png)\n\n4. ##### 使用测试数据验证模型\n\n   <iframe height=\"400\" width=\"600\" src=\"//player.bilibili.com/player.html?aid=371069850&bvid=BV1kZ4y1H7ct&cid=203127865&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n\n5. ##### 导出模型并集成进 iOS 应用\n\n   \n\n   \n\n","slug":"Create ML 自建数据集实现物体侦测","published":1,"updated":"2020-06-18T10:45:09.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3byu000ahb8y1n6xd15m","content":"<h3 id=\"Create-ML-介绍\"><a href=\"#Create-ML-介绍\" class=\"headerlink\" title=\"Create ML 介绍\"></a>Create ML 介绍</h3><p>Create ML 可以与 Swift 和 macOS Playground 等您所熟悉的工具搭配使用，在 Mac 上创建和训练自定的机器学习模型。您可以训练模型来完成一些任务，例如识别图像、提取文本含义或查找数字值之间的关系。</p>\n<h3 id=\"Create-ML-模型种类\"><a href=\"#Create-ML-模型种类\" class=\"headerlink\" title=\"Create ML 模型种类\"></a>Create ML 模型种类</h3><p><img src=\"https://i.loli.net/2020/06/17/LwsEPZMcrJbVSvI.png\" alt=\"模型分类\"></p>\n<h3 id=\"自建数据集实现物体侦测\"><a href=\"#自建数据集实现物体侦测\" class=\"headerlink\" title=\"自建数据集实现物体侦测\"></a>自建数据集实现物体侦测</h3><ol>\n<li><h5 id=\"创建图像侦测-Create-ML-项目\"><a href=\"#创建图像侦测-Create-ML-项目\" class=\"headerlink\" title=\"创建图像侦测 Create ML 项目\"></a>创建图像侦测 Create ML 项目</h5><p>新建 Create ML 项目</p>\n<p><img src=\"https://i.loli.net/2020/06/17/t1FvVm8H6S59pKs.png\" alt=\"创建模型\"></p>\n<p>项目面板介绍</p>\n<p><img src=\"https://i.loli.net/2020/06/17/QwRdbG3WEgMJkXC.png\" alt=\"项目面板\"></p>\n</li>\n<li><h5 id=\"自建用于训练的数据集\"><a href=\"#自建用于训练的数据集\" class=\"headerlink\" title=\"自建用于训练的数据集\"></a>自建用于训练的数据集</h5><p>数据集整理如下，包含需要训练的图片和标记文件</p>\n<p><img src=\"https://i.loli.net/2020/06/17/HT4jxsbMySFzr9h.png\" alt=\"截屏2020-06-17 18.38.09\"></p>\n<p>annotations.json 格式如下，image → 图片名称，label → 标记类别，coordinates → 标记位置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;<span class=\"attr\">\"image\"</span>:<span class=\"string\">\"domino_01.jpg\"</span>,<span class=\"attr\">\"annotations\"</span>:[</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"fall\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">94</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">409</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">146</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">225</span>&#125;&#125;,</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"stand\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">259</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">268</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">159</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">269</span>&#125;&#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">\"image\"</span>:<span class=\"string\">\"domino_02.jpg\"</span>,<span class=\"attr\">\"annotations\"</span>:[</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"fall\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">196</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">642</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">200</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">278</span>&#125;&#125;,</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"stand\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">153</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">373</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">189</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">263</span>&#125;&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以使用 IBM Cloud 标记工具来标记数据集，具体方法可参考  <a href=\"https://blog.csdn.net/duxinshuxiaobian/article/details/95915249\" target=\"_blank\" rel=\"noopener\">Create ML 标记神器</a></p>\n</blockquote>\n</li>\n<li><h5 id=\"开始模型训练\"><a href=\"#开始模型训练\" class=\"headerlink\" title=\"开始模型训练\"></a>开始模型训练</h5><p>数据集整理完成后，直接把数据集文件夹拖入项目的训练数据即可。项目会自动识别数据集的总类别数，数据集包含图片数量，填入训练步数后点击“运行”按钮开始训练。注意：必须完成所有训练步数才能生成模型，中途取消不会生成模型。</p>\n<p>在项目面板可以查看 loss 趋势，训练完成后可看到各个类别的识别率。</p>\n<p><img src=\"https://i.loli.net/2020/06/17/pIAiKnek27YS8u5.png\" alt=\"截屏2020-06-17 18.49.49\"></p>\n</li>\n<li><h5 id=\"使用测试数据验证模型\"><a href=\"#使用测试数据验证模型\" class=\"headerlink\" title=\"使用测试数据验证模型\"></a>使用测试数据验证模型</h5><iframe height=\"400\" width=\"600\" src=\"//player.bilibili.com/player.html?aid=371069850&bvid=BV1kZ4y1H7ct&cid=203127865&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n</li>\n<li><h5 id=\"导出模型并集成进-iOS-应用\"><a href=\"#导出模型并集成进-iOS-应用\" class=\"headerlink\" title=\"导出模型并集成进 iOS 应用\"></a>导出模型并集成进 iOS 应用</h5></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Create-ML-介绍\"><a href=\"#Create-ML-介绍\" class=\"headerlink\" title=\"Create ML 介绍\"></a>Create ML 介绍</h3><p>Create ML 可以与 Swift 和 macOS Playground 等您所熟悉的工具搭配使用，在 Mac 上创建和训练自定的机器学习模型。您可以训练模型来完成一些任务，例如识别图像、提取文本含义或查找数字值之间的关系。</p>\n<h3 id=\"Create-ML-模型种类\"><a href=\"#Create-ML-模型种类\" class=\"headerlink\" title=\"Create ML 模型种类\"></a>Create ML 模型种类</h3><p><img src=\"https://i.loli.net/2020/06/17/LwsEPZMcrJbVSvI.png\" alt=\"模型分类\"></p>\n<h3 id=\"自建数据集实现物体侦测\"><a href=\"#自建数据集实现物体侦测\" class=\"headerlink\" title=\"自建数据集实现物体侦测\"></a>自建数据集实现物体侦测</h3><ol>\n<li><h5 id=\"创建图像侦测-Create-ML-项目\"><a href=\"#创建图像侦测-Create-ML-项目\" class=\"headerlink\" title=\"创建图像侦测 Create ML 项目\"></a>创建图像侦测 Create ML 项目</h5><p>新建 Create ML 项目</p>\n<p><img src=\"https://i.loli.net/2020/06/17/t1FvVm8H6S59pKs.png\" alt=\"创建模型\"></p>\n<p>项目面板介绍</p>\n<p><img src=\"https://i.loli.net/2020/06/17/QwRdbG3WEgMJkXC.png\" alt=\"项目面板\"></p>\n</li>\n<li><h5 id=\"自建用于训练的数据集\"><a href=\"#自建用于训练的数据集\" class=\"headerlink\" title=\"自建用于训练的数据集\"></a>自建用于训练的数据集</h5><p>数据集整理如下，包含需要训练的图片和标记文件</p>\n<p><img src=\"https://i.loli.net/2020/06/17/HT4jxsbMySFzr9h.png\" alt=\"截屏2020-06-17 18.38.09\"></p>\n<p>annotations.json 格式如下，image → 图片名称，label → 标记类别，coordinates → 标记位置</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;<span class=\"attr\">\"image\"</span>:<span class=\"string\">\"domino_01.jpg\"</span>,<span class=\"attr\">\"annotations\"</span>:[</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"fall\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">94</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">409</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">146</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">225</span>&#125;&#125;,</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"stand\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">259</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">268</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">159</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">269</span>&#125;&#125;]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;<span class=\"attr\">\"image\"</span>:<span class=\"string\">\"domino_02.jpg\"</span>,<span class=\"attr\">\"annotations\"</span>:[</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"fall\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">196</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">642</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">200</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">278</span>&#125;&#125;,</span><br><span class=\"line\">     &#123;<span class=\"attr\">\"label\"</span>:<span class=\"string\">\"stand\"</span>,<span class=\"attr\">\"coordinates\"</span>:&#123;<span class=\"attr\">\"x\"</span>:<span class=\"number\">153</span>,<span class=\"attr\">\"y\"</span>:<span class=\"number\">373</span>,<span class=\"attr\">\"width\"</span>:<span class=\"number\">189</span>,<span class=\"attr\">\"height\"</span>:<span class=\"number\">263</span>&#125;&#125;]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以使用 IBM Cloud 标记工具来标记数据集，具体方法可参考  <a href=\"https://blog.csdn.net/duxinshuxiaobian/article/details/95915249\" target=\"_blank\" rel=\"noopener\">Create ML 标记神器</a></p>\n</blockquote>\n</li>\n<li><h5 id=\"开始模型训练\"><a href=\"#开始模型训练\" class=\"headerlink\" title=\"开始模型训练\"></a>开始模型训练</h5><p>数据集整理完成后，直接把数据集文件夹拖入项目的训练数据即可。项目会自动识别数据集的总类别数，数据集包含图片数量，填入训练步数后点击“运行”按钮开始训练。注意：必须完成所有训练步数才能生成模型，中途取消不会生成模型。</p>\n<p>在项目面板可以查看 loss 趋势，训练完成后可看到各个类别的识别率。</p>\n<p><img src=\"https://i.loli.net/2020/06/17/pIAiKnek27YS8u5.png\" alt=\"截屏2020-06-17 18.49.49\"></p>\n</li>\n<li><h5 id=\"使用测试数据验证模型\"><a href=\"#使用测试数据验证模型\" class=\"headerlink\" title=\"使用测试数据验证模型\"></a>使用测试数据验证模型</h5><iframe height=\"400\" width=\"600\" src=\"//player.bilibili.com/player.html?aid=371069850&bvid=BV1kZ4y1H7ct&cid=203127865&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"> </iframe>\n</li>\n<li><h5 id=\"导出模型并集成进-iOS-应用\"><a href=\"#导出模型并集成进-iOS-应用\" class=\"headerlink\" title=\"导出模型并集成进 iOS 应用\"></a>导出模型并集成进 iOS 应用</h5></li>\n</ol>\n"},{"title":"Mac显示隐藏文件的两种方式","date":"2020-05-12T02:32:11.000Z","_content":"\n## Mac上的隐藏文件？\n\n在Mac中，隐藏文件不会显示在正常的文件和文件夹列表中。它们以 “.” 命名。在他们的名字之前隐藏文件可以是任何类型，例如，它可以是 .bash_profile，.htaccess 文件或 .svn 目录。如果希望，还可以隐藏/ bin，/ usr和/ etc等文件夹。\n\n修改这些文件和文件夹可能很危险，导致MacBook无法正常运行。有时，您所做的更改是不可逆转的，导致您的数据永久丢失。\n\n## 如何在Mac上显示隐藏文件\n\n> 以下两种方法在 macOS 10.15.4 系统下亲测可用，推荐使用第二种方法\n\n- ### 使用命令显示隐藏文件和文件夹\n\n  显示隐藏文件\n\n  ```bash\n  defaults write com.apple.finder AppleShowAllFiles Yes && killall Finder\n  ```\n\n  不显示隐藏文件\n\n  ```bash\n  defaults write com.apple.finder AppleShowAllFiles No && killall Finder\n  \n  ```\n\n- ### 使用 “自动操作” 创建服务显示隐藏文件\n\n  打开 “自动操作”（应用程序文件夹中）并新建 “快速操作”。在资源库中选择 “实用工具” ——“运行 Shell 脚本”，并将它拖到右边的工作区中。将以下代码复制到文本框中\n\n  ```bash\n  STATUS=`defaults read com.apple.finder AppleShowAllFiles`\n  if [ $STATUS == YES ];\n  then\n      defaults write com.apple.finder AppleShowAllFiles NO\n  else\n      defaults write com.apple.finder AppleShowAllFiles YES\n  fi\n  killall Finder\n  ```\n\n  具体设置如图，然后将工作流程保存为 “隐藏显示文件”\n\n  ![截屏2020-05-12 10.46.27](https://i.loli.net/2020/05/12/iFDz73tGQNxIAyj.png)\n\n  现 在，如果你打开Finder——服务，你会看到刚才制作的 “隐藏显示文件” 选项。\n\n  打开系统偏好设置——键盘，点击快捷键选项卡。在左边选择服务，然后勾上“隐藏显示文件”，在它的右边双击鼠标，然后按下你想要设定成为的快捷键。我使用的是Command+Shift+.（点）。\n\n  ![截屏2020-05-12 10.53.58](https://i.loli.net/2020/05/12/g78UbdPH6x1kwte.png)\n\n","source":"_posts/Mac显示隐藏文件的两种方式.md","raw":"---\ntitle: Mac显示隐藏文件的两种方式\ncategories:\n  - 技巧\ntags:\n  - Mac\ndate: 2020-05-12 10:32:11\n---\n\n## Mac上的隐藏文件？\n\n在Mac中，隐藏文件不会显示在正常的文件和文件夹列表中。它们以 “.” 命名。在他们的名字之前隐藏文件可以是任何类型，例如，它可以是 .bash_profile，.htaccess 文件或 .svn 目录。如果希望，还可以隐藏/ bin，/ usr和/ etc等文件夹。\n\n修改这些文件和文件夹可能很危险，导致MacBook无法正常运行。有时，您所做的更改是不可逆转的，导致您的数据永久丢失。\n\n## 如何在Mac上显示隐藏文件\n\n> 以下两种方法在 macOS 10.15.4 系统下亲测可用，推荐使用第二种方法\n\n- ### 使用命令显示隐藏文件和文件夹\n\n  显示隐藏文件\n\n  ```bash\n  defaults write com.apple.finder AppleShowAllFiles Yes && killall Finder\n  ```\n\n  不显示隐藏文件\n\n  ```bash\n  defaults write com.apple.finder AppleShowAllFiles No && killall Finder\n  \n  ```\n\n- ### 使用 “自动操作” 创建服务显示隐藏文件\n\n  打开 “自动操作”（应用程序文件夹中）并新建 “快速操作”。在资源库中选择 “实用工具” ——“运行 Shell 脚本”，并将它拖到右边的工作区中。将以下代码复制到文本框中\n\n  ```bash\n  STATUS=`defaults read com.apple.finder AppleShowAllFiles`\n  if [ $STATUS == YES ];\n  then\n      defaults write com.apple.finder AppleShowAllFiles NO\n  else\n      defaults write com.apple.finder AppleShowAllFiles YES\n  fi\n  killall Finder\n  ```\n\n  具体设置如图，然后将工作流程保存为 “隐藏显示文件”\n\n  ![截屏2020-05-12 10.46.27](https://i.loli.net/2020/05/12/iFDz73tGQNxIAyj.png)\n\n  现 在，如果你打开Finder——服务，你会看到刚才制作的 “隐藏显示文件” 选项。\n\n  打开系统偏好设置——键盘，点击快捷键选项卡。在左边选择服务，然后勾上“隐藏显示文件”，在它的右边双击鼠标，然后按下你想要设定成为的快捷键。我使用的是Command+Shift+.（点）。\n\n  ![截屏2020-05-12 10.53.58](https://i.loli.net/2020/05/12/g78UbdPH6x1kwte.png)\n\n","slug":"Mac显示隐藏文件的两种方式","published":1,"updated":"2020-06-18T10:56:16.655Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3byv000ehb8y4u7ad0t5","content":"<h2 id=\"Mac上的隐藏文件？\"><a href=\"#Mac上的隐藏文件？\" class=\"headerlink\" title=\"Mac上的隐藏文件？\"></a>Mac上的隐藏文件？</h2><p>在Mac中，隐藏文件不会显示在正常的文件和文件夹列表中。它们以 “.” 命名。在他们的名字之前隐藏文件可以是任何类型，例如，它可以是 .bash_profile，.htaccess 文件或 .svn 目录。如果希望，还可以隐藏/ bin，/ usr和/ etc等文件夹。</p>\n<p>修改这些文件和文件夹可能很危险，导致MacBook无法正常运行。有时，您所做的更改是不可逆转的，导致您的数据永久丢失。</p>\n<h2 id=\"如何在Mac上显示隐藏文件\"><a href=\"#如何在Mac上显示隐藏文件\" class=\"headerlink\" title=\"如何在Mac上显示隐藏文件\"></a>如何在Mac上显示隐藏文件</h2><blockquote>\n<p>以下两种方法在 macOS 10.15.4 系统下亲测可用，推荐使用第二种方法</p>\n</blockquote>\n<ul>\n<li><h3 id=\"使用命令显示隐藏文件和文件夹\"><a href=\"#使用命令显示隐藏文件和文件夹\" class=\"headerlink\" title=\"使用命令显示隐藏文件和文件夹\"></a>使用命令显示隐藏文件和文件夹</h3><p>显示隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>\n\n<p>不显示隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"使用-“自动操作”-创建服务显示隐藏文件\"><a href=\"#使用-“自动操作”-创建服务显示隐藏文件\" class=\"headerlink\" title=\"使用 “自动操作” 创建服务显示隐藏文件\"></a>使用 “自动操作” 创建服务显示隐藏文件</h3><p>打开 “自动操作”（应用程序文件夹中）并新建 “快速操作”。在资源库中选择 “实用工具” ——“运行 Shell 脚本”，并将它拖到右边的工作区中。将以下代码复制到文本框中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS=`defaults <span class=\"built_in\">read</span> com.apple.finder AppleShowAllFiles`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$STATUS</span> == YES ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    defaults write com.apple.finder AppleShowAllFiles NO</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    defaults write com.apple.finder AppleShowAllFiles YES</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">killall Finder</span><br></pre></td></tr></table></figure>\n\n<p>具体设置如图，然后将工作流程保存为 “隐藏显示文件”</p>\n<p><img src=\"https://i.loli.net/2020/05/12/iFDz73tGQNxIAyj.png\" alt=\"截屏2020-05-12 10.46.27\"></p>\n<p>现 在，如果你打开Finder——服务，你会看到刚才制作的 “隐藏显示文件” 选项。</p>\n<p>打开系统偏好设置——键盘，点击快捷键选项卡。在左边选择服务，然后勾上“隐藏显示文件”，在它的右边双击鼠标，然后按下你想要设定成为的快捷键。我使用的是Command+Shift+.（点）。</p>\n<p><img src=\"https://i.loli.net/2020/05/12/g78UbdPH6x1kwte.png\" alt=\"截屏2020-05-12 10.53.58\"></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Mac上的隐藏文件？\"><a href=\"#Mac上的隐藏文件？\" class=\"headerlink\" title=\"Mac上的隐藏文件？\"></a>Mac上的隐藏文件？</h2><p>在Mac中，隐藏文件不会显示在正常的文件和文件夹列表中。它们以 “.” 命名。在他们的名字之前隐藏文件可以是任何类型，例如，它可以是 .bash_profile，.htaccess 文件或 .svn 目录。如果希望，还可以隐藏/ bin，/ usr和/ etc等文件夹。</p>\n<p>修改这些文件和文件夹可能很危险，导致MacBook无法正常运行。有时，您所做的更改是不可逆转的，导致您的数据永久丢失。</p>\n<h2 id=\"如何在Mac上显示隐藏文件\"><a href=\"#如何在Mac上显示隐藏文件\" class=\"headerlink\" title=\"如何在Mac上显示隐藏文件\"></a>如何在Mac上显示隐藏文件</h2><blockquote>\n<p>以下两种方法在 macOS 10.15.4 系统下亲测可用，推荐使用第二种方法</p>\n</blockquote>\n<ul>\n<li><h3 id=\"使用命令显示隐藏文件和文件夹\"><a href=\"#使用命令显示隐藏文件和文件夹\" class=\"headerlink\" title=\"使用命令显示隐藏文件和文件夹\"></a>使用命令显示隐藏文件和文件夹</h3><p>显示隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles Yes &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>\n\n<p>不显示隐藏文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.finder AppleShowAllFiles No &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>\n</li>\n<li><h3 id=\"使用-“自动操作”-创建服务显示隐藏文件\"><a href=\"#使用-“自动操作”-创建服务显示隐藏文件\" class=\"headerlink\" title=\"使用 “自动操作” 创建服务显示隐藏文件\"></a>使用 “自动操作” 创建服务显示隐藏文件</h3><p>打开 “自动操作”（应用程序文件夹中）并新建 “快速操作”。在资源库中选择 “实用工具” ——“运行 Shell 脚本”，并将它拖到右边的工作区中。将以下代码复制到文本框中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">STATUS=`defaults <span class=\"built_in\">read</span> com.apple.finder AppleShowAllFiles`</span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$STATUS</span> == YES ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    defaults write com.apple.finder AppleShowAllFiles NO</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    defaults write com.apple.finder AppleShowAllFiles YES</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\">killall Finder</span><br></pre></td></tr></table></figure>\n\n<p>具体设置如图，然后将工作流程保存为 “隐藏显示文件”</p>\n<p><img src=\"https://i.loli.net/2020/05/12/iFDz73tGQNxIAyj.png\" alt=\"截屏2020-05-12 10.46.27\"></p>\n<p>现 在，如果你打开Finder——服务，你会看到刚才制作的 “隐藏显示文件” 选项。</p>\n<p>打开系统偏好设置——键盘，点击快捷键选项卡。在左边选择服务，然后勾上“隐藏显示文件”，在它的右边双击鼠标，然后按下你想要设定成为的快捷键。我使用的是Command+Shift+.（点）。</p>\n<p><img src=\"https://i.loli.net/2020/05/12/g78UbdPH6x1kwte.png\" alt=\"截屏2020-05-12 10.53.58\"></p>\n</li>\n</ul>\n"},{"title":"使用Mac自带脚本一键部署Hexo","date":"2020-03-27T03:19:55.000Z","_content":"\n网上 Hexo 自动部署流程大都是抓取 Git 提交，自动部署博客，常见的实现方式是: Travis CI 和 Git Hooks。 不过我不喜欢这种频繁提交 Git 来部署的方式，但是又不想每次打开终端使用命令行部署，于是想到使用Mac系统自带的AppleScript实现。\n\n#### 在Hexo根目录新建 publish.sh 文件\n\n```shell\nrm -rf ~/Library/Caches/google/Chrome/Default/  #清除chrome缓存\ncd /Users/yang/Desktop/Hexo  #打开Hexo根目录\nhexo clean && hexo d -g  #部署Hexo\n```\n\n#### 新建 AppleScript，实现在 iTerm 运行 publish.sh 文件\n\n```vbscript\ntell application \"iTerm\"\n\tactivate\n\ttell current window\n\t\ttell current session\n\t\t\twrite text \"/Users/yang/Desktop/Hexo/publish.sh\"\n\t\tend tell\n\tend tell\nend tell\n```\n\n> 我用的终端是 iTerm，使用自带终端同理。\n\n#### AppleScript 导出为“应用程序”\n\n![AppleScript](https://tva1.sinaimg.cn/large/00831rSTgy1gdbxvlon6mj30uw0fp49j.jpg)\n\n> 可以通过替换应用包里面的 /Contents/Resources/applet.icns 文件来修改应用图标\n\n最终实现的效果就是使用 Markdown 编辑器写好文章后，使用Alfred输入 AppleScript 导出的应用程序名称，Hexo便自动部署至设置好的VPS。Markdown 编辑器推荐使用 Typora，特别好用。","source":"_posts/Mac自带脚本一键部署Hexo.md","raw":"---\ntitle: 使用Mac自带脚本一键部署Hexo\ncategories:\n  - 技巧\ntags:\n  - Hexo\ndate: 2020-03-27 11:19:55\n---\n\n网上 Hexo 自动部署流程大都是抓取 Git 提交，自动部署博客，常见的实现方式是: Travis CI 和 Git Hooks。 不过我不喜欢这种频繁提交 Git 来部署的方式，但是又不想每次打开终端使用命令行部署，于是想到使用Mac系统自带的AppleScript实现。\n\n#### 在Hexo根目录新建 publish.sh 文件\n\n```shell\nrm -rf ~/Library/Caches/google/Chrome/Default/  #清除chrome缓存\ncd /Users/yang/Desktop/Hexo  #打开Hexo根目录\nhexo clean && hexo d -g  #部署Hexo\n```\n\n#### 新建 AppleScript，实现在 iTerm 运行 publish.sh 文件\n\n```vbscript\ntell application \"iTerm\"\n\tactivate\n\ttell current window\n\t\ttell current session\n\t\t\twrite text \"/Users/yang/Desktop/Hexo/publish.sh\"\n\t\tend tell\n\tend tell\nend tell\n```\n\n> 我用的终端是 iTerm，使用自带终端同理。\n\n#### AppleScript 导出为“应用程序”\n\n![AppleScript](https://tva1.sinaimg.cn/large/00831rSTgy1gdbxvlon6mj30uw0fp49j.jpg)\n\n> 可以通过替换应用包里面的 /Contents/Resources/applet.icns 文件来修改应用图标\n\n最终实现的效果就是使用 Markdown 编辑器写好文章后，使用Alfred输入 AppleScript 导出的应用程序名称，Hexo便自动部署至设置好的VPS。Markdown 编辑器推荐使用 Typora，特别好用。","slug":"Mac自带脚本一键部署Hexo","published":1,"updated":"2020-06-18T10:44:11.623Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3byx000fhb8y2en24a7g","content":"<p>网上 Hexo 自动部署流程大都是抓取 Git 提交，自动部署博客，常见的实现方式是: Travis CI 和 Git Hooks。 不过我不喜欢这种频繁提交 Git 来部署的方式，但是又不想每次打开终端使用命令行部署，于是想到使用Mac系统自带的AppleScript实现。</p>\n<h4 id=\"在Hexo根目录新建-publish-sh-文件\"><a href=\"#在Hexo根目录新建-publish-sh-文件\" class=\"headerlink\" title=\"在Hexo根目录新建 publish.sh 文件\"></a>在Hexo根目录新建 publish.sh 文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ~/Library/Caches/google/Chrome/Default/  #清除chrome缓存</span><br><span class=\"line\">cd /Users/yang/Desktop/Hexo  #打开Hexo根目录</span><br><span class=\"line\">hexo clean &amp;&amp; hexo d -g  #部署Hexo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建-AppleScript，实现在-iTerm-运行-publish-sh-文件\"><a href=\"#新建-AppleScript，实现在-iTerm-运行-publish-sh-文件\" class=\"headerlink\" title=\"新建 AppleScript，实现在 iTerm 运行 publish.sh 文件\"></a>新建 AppleScript，实现在 iTerm 运行 publish.sh 文件</h4><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application <span class=\"string\">\"iTerm\"</span></span><br><span class=\"line\">\tactivate</span><br><span class=\"line\">\ttell current window</span><br><span class=\"line\">\t\ttell current session</span><br><span class=\"line\">\t\t\twrite text <span class=\"string\">\"/Users/yang/Desktop/Hexo/publish.sh\"</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span> tell</span><br><span class=\"line\">\t<span class=\"keyword\">end</span> tell</span><br><span class=\"line\"><span class=\"keyword\">end</span> tell</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我用的终端是 iTerm，使用自带终端同理。</p>\n</blockquote>\n<h4 id=\"AppleScript-导出为“应用程序”\"><a href=\"#AppleScript-导出为“应用程序”\" class=\"headerlink\" title=\"AppleScript 导出为“应用程序”\"></a>AppleScript 导出为“应用程序”</h4><p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbxvlon6mj30uw0fp49j.jpg\" alt=\"AppleScript\"></p>\n<blockquote>\n<p>可以通过替换应用包里面的 /Contents/Resources/applet.icns 文件来修改应用图标</p>\n</blockquote>\n<p>最终实现的效果就是使用 Markdown 编辑器写好文章后，使用Alfred输入 AppleScript 导出的应用程序名称，Hexo便自动部署至设置好的VPS。Markdown 编辑器推荐使用 Typora，特别好用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>网上 Hexo 自动部署流程大都是抓取 Git 提交，自动部署博客，常见的实现方式是: Travis CI 和 Git Hooks。 不过我不喜欢这种频繁提交 Git 来部署的方式，但是又不想每次打开终端使用命令行部署，于是想到使用Mac系统自带的AppleScript实现。</p>\n<h4 id=\"在Hexo根目录新建-publish-sh-文件\"><a href=\"#在Hexo根目录新建-publish-sh-文件\" class=\"headerlink\" title=\"在Hexo根目录新建 publish.sh 文件\"></a>在Hexo根目录新建 publish.sh 文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf ~/Library/Caches/google/Chrome/Default/  #清除chrome缓存</span><br><span class=\"line\">cd /Users/yang/Desktop/Hexo  #打开Hexo根目录</span><br><span class=\"line\">hexo clean &amp;&amp; hexo d -g  #部署Hexo</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新建-AppleScript，实现在-iTerm-运行-publish-sh-文件\"><a href=\"#新建-AppleScript，实现在-iTerm-运行-publish-sh-文件\" class=\"headerlink\" title=\"新建 AppleScript，实现在 iTerm 运行 publish.sh 文件\"></a>新建 AppleScript，实现在 iTerm 运行 publish.sh 文件</h4><figure class=\"highlight vbscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tell application <span class=\"string\">\"iTerm\"</span></span><br><span class=\"line\">\tactivate</span><br><span class=\"line\">\ttell current window</span><br><span class=\"line\">\t\ttell current session</span><br><span class=\"line\">\t\t\twrite text <span class=\"string\">\"/Users/yang/Desktop/Hexo/publish.sh\"</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">end</span> tell</span><br><span class=\"line\">\t<span class=\"keyword\">end</span> tell</span><br><span class=\"line\"><span class=\"keyword\">end</span> tell</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>我用的终端是 iTerm，使用自带终端同理。</p>\n</blockquote>\n<h4 id=\"AppleScript-导出为“应用程序”\"><a href=\"#AppleScript-导出为“应用程序”\" class=\"headerlink\" title=\"AppleScript 导出为“应用程序”\"></a>AppleScript 导出为“应用程序”</h4><p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbxvlon6mj30uw0fp49j.jpg\" alt=\"AppleScript\"></p>\n<blockquote>\n<p>可以通过替换应用包里面的 /Contents/Resources/applet.icns 文件来修改应用图标</p>\n</blockquote>\n<p>最终实现的效果就是使用 Markdown 编辑器写好文章后，使用Alfred输入 AppleScript 导出的应用程序名称，Hexo便自动部署至设置好的VPS。Markdown 编辑器推荐使用 Typora，特别好用。</p>\n"},{"title":"Mac设置终端走代理","date":"2019-05-25T09:55:24.000Z","_content":"\n> Mac终端默认是不走代理的，使用brew、git、cocoapods速度极慢。设置终端走代理后速度明显好转，我用的是V2rayU，最近SS识别率太高了，建议有条件的都换用v2ray。\n\n### V2rayU\n\n多数人使用的是SS的方法实现科学上网，不过最近SS识别率大增，ip很容易被墙，于是我重新搭建了v2ray，客户端使用的是V2rayU。\n\n[v2ray 搭建教程](https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B)\n\n[V2rayU 下载地址](https://github.com/yanue/V2rayU/releases)\n\n### **终端代理设置**\n\n- #### 查看代理端口\n\n  打开代理软件的偏好设置，找到监控本地的默认HTTP端口，V2rayU默认是1087，如果改过默认端口，就使用你修改以后的端口，使用SS同理。\n\n  \n\n  ![v2rayu](https://tva1.sinaimg.cn/large/00831rSTgy1gd8m21ee6ej30pk0c8ack.jpg)\n\n  \n\n- #### 代理设置写入.bash_profile\n\n  编辑 .bash_profile 文件\n\n  ```shell\n  vi ~/.bash_profile\n  ```\n\n  在文件末尾添加以下代码\n\n  ```javascript\n  function proxy_on() {\n      export http_proxy=http://127.0.0.1:1087\n      export https_proxy=http://127.0.0.1:1087\n      echo -e \"已开启代理\"\n  }\n  \n  function proxy_off() {\n      unset http_proxy\n      unset https_proxy\n      echo -e \"已关闭代理\"\n  }\n  ```\n\n- #### 使代理文件生效\n\n  ```shell\n  source ~/.bash_profile\n  ```\n\n- #### 打开代理\n\n  先查看下当前的 ip 地址\n\n  ```shell\n  $ curl -L tool.lu/ip\n  当前IP: 183.193.7*.2**\n  归属地: 中国 上海 上海\n  ```\n\n  开启 proxy,再查看\n\n  ```shell\n  $ proxy_on\n  已开启代理\n  \n  $ curl -L tool.lu/ip\n  当前IP: 67.216.228.120\n  归属地: 美国 美国\n  ```\n\n- #### 关闭代理\n\n  ```shell\n  $ proxy_off\n  已关闭代理\n  ```\n\n  ","source":"_posts/Mac设置终端走代理.md","raw":"---\ntitle: Mac设置终端走代理\ncategories:\n  - 技巧\ntags:\n  - Mac\ndate: 2019-05-25 17:55:24\n---\n\n> Mac终端默认是不走代理的，使用brew、git、cocoapods速度极慢。设置终端走代理后速度明显好转，我用的是V2rayU，最近SS识别率太高了，建议有条件的都换用v2ray。\n\n### V2rayU\n\n多数人使用的是SS的方法实现科学上网，不过最近SS识别率大增，ip很容易被墙，于是我重新搭建了v2ray，客户端使用的是V2rayU。\n\n[v2ray 搭建教程](https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B)\n\n[V2rayU 下载地址](https://github.com/yanue/V2rayU/releases)\n\n### **终端代理设置**\n\n- #### 查看代理端口\n\n  打开代理软件的偏好设置，找到监控本地的默认HTTP端口，V2rayU默认是1087，如果改过默认端口，就使用你修改以后的端口，使用SS同理。\n\n  \n\n  ![v2rayu](https://tva1.sinaimg.cn/large/00831rSTgy1gd8m21ee6ej30pk0c8ack.jpg)\n\n  \n\n- #### 代理设置写入.bash_profile\n\n  编辑 .bash_profile 文件\n\n  ```shell\n  vi ~/.bash_profile\n  ```\n\n  在文件末尾添加以下代码\n\n  ```javascript\n  function proxy_on() {\n      export http_proxy=http://127.0.0.1:1087\n      export https_proxy=http://127.0.0.1:1087\n      echo -e \"已开启代理\"\n  }\n  \n  function proxy_off() {\n      unset http_proxy\n      unset https_proxy\n      echo -e \"已关闭代理\"\n  }\n  ```\n\n- #### 使代理文件生效\n\n  ```shell\n  source ~/.bash_profile\n  ```\n\n- #### 打开代理\n\n  先查看下当前的 ip 地址\n\n  ```shell\n  $ curl -L tool.lu/ip\n  当前IP: 183.193.7*.2**\n  归属地: 中国 上海 上海\n  ```\n\n  开启 proxy,再查看\n\n  ```shell\n  $ proxy_on\n  已开启代理\n  \n  $ curl -L tool.lu/ip\n  当前IP: 67.216.228.120\n  归属地: 美国 美国\n  ```\n\n- #### 关闭代理\n\n  ```shell\n  $ proxy_off\n  已关闭代理\n  ```\n\n  ","slug":"Mac设置终端走代理","published":1,"updated":"2020-06-18T10:44:41.049Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3byz000jhb8ycybxa6um","content":"<blockquote>\n<p>Mac终端默认是不走代理的，使用brew、git、cocoapods速度极慢。设置终端走代理后速度明显好转，我用的是V2rayU，最近SS识别率太高了，建议有条件的都换用v2ray。</p>\n</blockquote>\n<h3 id=\"V2rayU\"><a href=\"#V2rayU\" class=\"headerlink\" title=\"V2rayU\"></a>V2rayU</h3><p>多数人使用的是SS的方法实现科学上网，不过最近SS识别率大增，ip很容易被墙，于是我重新搭建了v2ray，客户端使用的是V2rayU。</p>\n<p><a href=\"https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">v2ray 搭建教程</a></p>\n<p><a href=\"https://github.com/yanue/V2rayU/releases\" target=\"_blank\" rel=\"noopener\">V2rayU 下载地址</a></p>\n<h3 id=\"终端代理设置\"><a href=\"#终端代理设置\" class=\"headerlink\" title=\"终端代理设置\"></a><strong>终端代理设置</strong></h3><ul>\n<li><h4 id=\"查看代理端口\"><a href=\"#查看代理端口\" class=\"headerlink\" title=\"查看代理端口\"></a>查看代理端口</h4><p>打开代理软件的偏好设置，找到监控本地的默认HTTP端口，V2rayU默认是1087，如果改过默认端口，就使用你修改以后的端口，使用SS同理。</p>\n</li>\n</ul>\n<p>  <img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd8m21ee6ej30pk0c8ack.jpg\" alt=\"v2rayu\"></p>\n<ul>\n<li><h4 id=\"代理设置写入-bash-profile\"><a href=\"#代理设置写入-bash-profile\" class=\"headerlink\" title=\"代理设置写入.bash_profile\"></a>代理设置写入.bash_profile</h4><p>编辑 .bash_profile 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy_on</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> http_proxy=http:<span class=\"comment\">//127.0.0.1:1087</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> https_proxy=http:<span class=\"comment\">//127.0.0.1:1087</span></span><br><span class=\"line\">    echo -e <span class=\"string\">\"已开启代理\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy_off</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    unset http_proxy</span><br><span class=\"line\">    unset https_proxy</span><br><span class=\"line\">    echo -e <span class=\"string\">\"已关闭代理\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"使代理文件生效\"><a href=\"#使代理文件生效\" class=\"headerlink\" title=\"使代理文件生效\"></a>使代理文件生效</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"打开代理\"><a href=\"#打开代理\" class=\"headerlink\" title=\"打开代理\"></a>打开代理</h4><p>先查看下当前的 ip 地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L tool.lu/ip</span></span><br><span class=\"line\">当前IP: 183.193.7*.2**</span><br><span class=\"line\">归属地: 中国 上海 上海</span><br></pre></td></tr></table></figure>\n\n<p>开启 proxy,再查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> proxy_on</span></span><br><span class=\"line\">已开启代理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L tool.lu/ip</span></span><br><span class=\"line\">当前IP: 67.216.228.120</span><br><span class=\"line\">归属地: 美国 美国</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"关闭代理\"><a href=\"#关闭代理\" class=\"headerlink\" title=\"关闭代理\"></a>关闭代理</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> proxy_off</span></span><br><span class=\"line\">已关闭代理</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Mac终端默认是不走代理的，使用brew、git、cocoapods速度极慢。设置终端走代理后速度明显好转，我用的是V2rayU，最近SS识别率太高了，建议有条件的都换用v2ray。</p>\n</blockquote>\n<h3 id=\"V2rayU\"><a href=\"#V2rayU\" class=\"headerlink\" title=\"V2rayU\"></a>V2rayU</h3><p>多数人使用的是SS的方法实现科学上网，不过最近SS识别率大增，ip很容易被墙，于是我重新搭建了v2ray，客户端使用的是V2rayU。</p>\n<p><a href=\"https://github.com/233boy/v2ray/wiki/V2Ray%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">v2ray 搭建教程</a></p>\n<p><a href=\"https://github.com/yanue/V2rayU/releases\" target=\"_blank\" rel=\"noopener\">V2rayU 下载地址</a></p>\n<h3 id=\"终端代理设置\"><a href=\"#终端代理设置\" class=\"headerlink\" title=\"终端代理设置\"></a><strong>终端代理设置</strong></h3><ul>\n<li><h4 id=\"查看代理端口\"><a href=\"#查看代理端口\" class=\"headerlink\" title=\"查看代理端口\"></a>查看代理端口</h4><p>打开代理软件的偏好设置，找到监控本地的默认HTTP端口，V2rayU默认是1087，如果改过默认端口，就使用你修改以后的端口，使用SS同理。</p>\n</li>\n</ul>\n<p>  <img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd8m21ee6ej30pk0c8ack.jpg\" alt=\"v2rayu\"></p>\n<ul>\n<li><h4 id=\"代理设置写入-bash-profile\"><a href=\"#代理设置写入-bash-profile\" class=\"headerlink\" title=\"代理设置写入.bash_profile\"></a>代理设置写入.bash_profile</h4><p>编辑 .bash_profile 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi ~/.bash_profile</span><br></pre></td></tr></table></figure>\n\n<p>在文件末尾添加以下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy_on</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> http_proxy=http:<span class=\"comment\">//127.0.0.1:1087</span></span><br><span class=\"line\">    <span class=\"keyword\">export</span> https_proxy=http:<span class=\"comment\">//127.0.0.1:1087</span></span><br><span class=\"line\">    echo -e <span class=\"string\">\"已开启代理\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">proxy_off</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    unset http_proxy</span><br><span class=\"line\">    unset https_proxy</span><br><span class=\"line\">    echo -e <span class=\"string\">\"已关闭代理\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"使代理文件生效\"><a href=\"#使代理文件生效\" class=\"headerlink\" title=\"使代理文件生效\"></a>使代理文件生效</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bash_profile</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"打开代理\"><a href=\"#打开代理\" class=\"headerlink\" title=\"打开代理\"></a>打开代理</h4><p>先查看下当前的 ip 地址</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L tool.lu/ip</span></span><br><span class=\"line\">当前IP: 183.193.7*.2**</span><br><span class=\"line\">归属地: 中国 上海 上海</span><br></pre></td></tr></table></figure>\n\n<p>开启 proxy,再查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> proxy_on</span></span><br><span class=\"line\">已开启代理</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> curl -L tool.lu/ip</span></span><br><span class=\"line\">当前IP: 67.216.228.120</span><br><span class=\"line\">归属地: 美国 美国</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"关闭代理\"><a href=\"#关闭代理\" class=\"headerlink\" title=\"关闭代理\"></a>关闭代理</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> proxy_off</span></span><br><span class=\"line\">已关闭代理</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"Markdown写作示例","date":"2019-03-16T07:24:16.000Z","_content":"\n## 什么是Markdown\n\nMarkdown是一个将文本转化为HTML的工具。简单来说，Markdown是一个兼顾可读性与易用性的轻量级标记体系。Markdown并不追求大而全，它只关心HTML里最常用的几个标记，对于一些不常用的标记它允许直接将HTML标记插入文本。\n\n------\n\n## 标题\n\nMarkdown提供了两种方式（Setext和Atx）来显示标题。\n\n#### 语法：\n\n```text\nSetext方式\n标题1\n=================\n\n标题2\n-----------------\n\nAtx方式\n# 标题1\n## 标题2\n###### 标题6\n```\n\n#### 效果：\n\nSetext方式\n\n# 标题1\n\n## 标题2\n\nAtx方式\n\n# 标题1\n\n## 标题2\n\n###### 标题6\n\n------\n\n## 换行\n\n在文字的末尾使用两个或两个以上的空格来表示换行。\n\n------\n\n## 引用\n\n行首使用`>`加上一个空格表示引用段落，内部可以嵌套多个引用。\n\n#### 语法：\n\n```text\n> 这是一个引用，\n> 这里木有换行，   \n> 在这里换行了。\n> > 内部嵌套\n```\n\n#### 效果：\n\n> 这是一个引用， 这里木有换行，\n> 在这里换行了。\n>\n> > 内部嵌套\n\n------\n\n## 列表\n\n**无序列表**使用`*`、`+`或`-`后面加上空格来表示。\n\n#### 语法：\n\n```text\n* Item 1\n* Item 2\n* Item 3\n\n+ Item 1\n+ Item 2\n+ Item 3\n\n- Item 1\n- Item 2\n- Item 3\n```\n\n#### 效果：\n\n- Item 1\n- Item 2\n- Item 3\n- Item 1\n- Item 2\n- Item 3\n- Item 1\n- Item 2\n- Item 3\n\n**有序列表**使用数字加英文句号加空格表示。\n\n#### 语法：\n\n```text\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n#### 效果：\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n------\n\n## 代码区域\n\n**行内代码**使用**反斜杠**```表示。\n**代码段落**则是在每行文字前加4个空格或者1个缩进符表示。\n\n#### 语法：\n\n```text\nBash中可以使用echo来进行输出。\n    $ echo 'Something'\n    $ echo -e '\\tSomething\\n'\n```\n\n#### 效果：\n\nBash中可以使用echo来进行输出。\n\n```text\n$ echo 'Something'\n$ echo -e '\\tSomething\\n'\n```\n\n------\n\n## 强调\n\nMarkdown使用`\\*`或`\\_`表示强调。\n\n#### 语法：\n\n```text\n单星号 = *斜体*\n单下划线 = _斜体_\n双星号 = **加粗**\n双下划线 = __加粗__\n```\n\n#### 效果：\n\n单星号 = *斜体*\n单下划线 = *斜体*\n双星号 = **加粗**\n双下划线 = **加粗**\n\n------\n\n## 链接\n\nMarkdown支持两种风格的链接：*Inline*和*Reference*。\n\n#### 语法：\n\n*Inline*：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用**空格**加**\"title属性\"**。\n*Reference*：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为`[链接文本][ref]`；定义部分可以出现在文本中的其他位置，格式为`[ref]: http://some/link/address (可选的标题)`。\n*注：ref中不区分大小写。*\n\n```text\n这是一个Inline[示例](http://equation85.github.com \"可选的title\")。\n这是一个Reference[示例][ref]。\n[ref]: http://equation85.github.com\n```\n\n#### 效果：\n\n这是一个*Inline*[示例](http://equation85.github.com/)。\n这是一个*Reference*[示例](http://equation85.github.com/)。\n\n------\n\n## 图片\n\n图片的使用方法基本上和链接类似，只是在中括号前加**叹号**。\n*注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记。*\n\n#### 语法：\n\n```text\nInline示例：![替代文本](/assets/images/jian.jpg \"可选的title\")\nReference示例：![替代文本][pic]\n[pic]: /assets/images/ship.jpg \"可选的title\"\nHTML示例：<img src=\"/assets/images/jian.jpg\" alt=\"替代文本\" title=\"标题文本\" width=\"200\" />\n```\n\n#### 效果：\n\n![替代文本](http://equation85.github.io/assets/images/jian.jpg)\n\n------\n\n## 其他\n\n#### 自动链接\n\n使用**尖括号**，可以为输入的URL或者邮箱自动创建链接。如[test@domain.com](mailto:test@domain.com)。\n\n#### 分隔线\n\n在一行中使用三个或三个以上的`*`、`-`或`_`可以添加分隔线，其中可以有空白，但是不能有其他字符。\n\n#### 转义字符\n\nMarkdown中的转义字符为`\\`，可以转义的有：\n\n- \\\\ 反斜杠\n- \\` 反引号\n- \\* 星号\n- \\_ 下划线\n- \\{\\} 大括号\n- \\[\\] 中括号\n- \\(\\) 小括号\n- \\# 井号\n- \\+ 加号\n- \\- 减号\n- \\. 英文句号\n- \\! 感叹号\n\n------\n\n## 结语\n\nMarkdown语法很大程度上减少了编辑的成本，但是在写作这篇文章的时候也发现某些标记对中文的支持似乎并不完美，虽然这些缺陷可以通过直接插入HTML代码解决（但这么做一点都不漂亮）。总的来说，能够在离线状态下使用命令行模式进行写作还是很爽的，相比在线写作模式精力可以更专注。","source":"_posts/Markdown写作示例.md","raw":"---\ntitle: Markdown写作示例\ncategories:\n  - 技巧\ntags:\n  - Markdown\ndate: 2019-03-16 15:24:16\n---\n\n## 什么是Markdown\n\nMarkdown是一个将文本转化为HTML的工具。简单来说，Markdown是一个兼顾可读性与易用性的轻量级标记体系。Markdown并不追求大而全，它只关心HTML里最常用的几个标记，对于一些不常用的标记它允许直接将HTML标记插入文本。\n\n------\n\n## 标题\n\nMarkdown提供了两种方式（Setext和Atx）来显示标题。\n\n#### 语法：\n\n```text\nSetext方式\n标题1\n=================\n\n标题2\n-----------------\n\nAtx方式\n# 标题1\n## 标题2\n###### 标题6\n```\n\n#### 效果：\n\nSetext方式\n\n# 标题1\n\n## 标题2\n\nAtx方式\n\n# 标题1\n\n## 标题2\n\n###### 标题6\n\n------\n\n## 换行\n\n在文字的末尾使用两个或两个以上的空格来表示换行。\n\n------\n\n## 引用\n\n行首使用`>`加上一个空格表示引用段落，内部可以嵌套多个引用。\n\n#### 语法：\n\n```text\n> 这是一个引用，\n> 这里木有换行，   \n> 在这里换行了。\n> > 内部嵌套\n```\n\n#### 效果：\n\n> 这是一个引用， 这里木有换行，\n> 在这里换行了。\n>\n> > 内部嵌套\n\n------\n\n## 列表\n\n**无序列表**使用`*`、`+`或`-`后面加上空格来表示。\n\n#### 语法：\n\n```text\n* Item 1\n* Item 2\n* Item 3\n\n+ Item 1\n+ Item 2\n+ Item 3\n\n- Item 1\n- Item 2\n- Item 3\n```\n\n#### 效果：\n\n- Item 1\n- Item 2\n- Item 3\n- Item 1\n- Item 2\n- Item 3\n- Item 1\n- Item 2\n- Item 3\n\n**有序列表**使用数字加英文句号加空格表示。\n\n#### 语法：\n\n```text\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n#### 效果：\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n------\n\n## 代码区域\n\n**行内代码**使用**反斜杠**```表示。\n**代码段落**则是在每行文字前加4个空格或者1个缩进符表示。\n\n#### 语法：\n\n```text\nBash中可以使用echo来进行输出。\n    $ echo 'Something'\n    $ echo -e '\\tSomething\\n'\n```\n\n#### 效果：\n\nBash中可以使用echo来进行输出。\n\n```text\n$ echo 'Something'\n$ echo -e '\\tSomething\\n'\n```\n\n------\n\n## 强调\n\nMarkdown使用`\\*`或`\\_`表示强调。\n\n#### 语法：\n\n```text\n单星号 = *斜体*\n单下划线 = _斜体_\n双星号 = **加粗**\n双下划线 = __加粗__\n```\n\n#### 效果：\n\n单星号 = *斜体*\n单下划线 = *斜体*\n双星号 = **加粗**\n双下划线 = **加粗**\n\n------\n\n## 链接\n\nMarkdown支持两种风格的链接：*Inline*和*Reference*。\n\n#### 语法：\n\n*Inline*：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用**空格**加**\"title属性\"**。\n*Reference*：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为`[链接文本][ref]`；定义部分可以出现在文本中的其他位置，格式为`[ref]: http://some/link/address (可选的标题)`。\n*注：ref中不区分大小写。*\n\n```text\n这是一个Inline[示例](http://equation85.github.com \"可选的title\")。\n这是一个Reference[示例][ref]。\n[ref]: http://equation85.github.com\n```\n\n#### 效果：\n\n这是一个*Inline*[示例](http://equation85.github.com/)。\n这是一个*Reference*[示例](http://equation85.github.com/)。\n\n------\n\n## 图片\n\n图片的使用方法基本上和链接类似，只是在中括号前加**叹号**。\n*注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记。*\n\n#### 语法：\n\n```text\nInline示例：![替代文本](/assets/images/jian.jpg \"可选的title\")\nReference示例：![替代文本][pic]\n[pic]: /assets/images/ship.jpg \"可选的title\"\nHTML示例：<img src=\"/assets/images/jian.jpg\" alt=\"替代文本\" title=\"标题文本\" width=\"200\" />\n```\n\n#### 效果：\n\n![替代文本](http://equation85.github.io/assets/images/jian.jpg)\n\n------\n\n## 其他\n\n#### 自动链接\n\n使用**尖括号**，可以为输入的URL或者邮箱自动创建链接。如[test@domain.com](mailto:test@domain.com)。\n\n#### 分隔线\n\n在一行中使用三个或三个以上的`*`、`-`或`_`可以添加分隔线，其中可以有空白，但是不能有其他字符。\n\n#### 转义字符\n\nMarkdown中的转义字符为`\\`，可以转义的有：\n\n- \\\\ 反斜杠\n- \\` 反引号\n- \\* 星号\n- \\_ 下划线\n- \\{\\} 大括号\n- \\[\\] 中括号\n- \\(\\) 小括号\n- \\# 井号\n- \\+ 加号\n- \\- 减号\n- \\. 英文句号\n- \\! 感叹号\n\n------\n\n## 结语\n\nMarkdown语法很大程度上减少了编辑的成本，但是在写作这篇文章的时候也发现某些标记对中文的支持似乎并不完美，虽然这些缺陷可以通过直接插入HTML代码解决（但这么做一点都不漂亮）。总的来说，能够在离线状态下使用命令行模式进行写作还是很爽的，相比在线写作模式精力可以更专注。","slug":"Markdown写作示例","published":1,"updated":"2020-06-18T10:46:55.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bz1000lhb8y5cobgsbn","content":"<h2 id=\"什么是Markdown\"><a href=\"#什么是Markdown\" class=\"headerlink\" title=\"什么是Markdown\"></a>什么是Markdown</h2><p>Markdown是一个将文本转化为HTML的工具。简单来说，Markdown是一个兼顾可读性与易用性的轻量级标记体系。Markdown并不追求大而全，它只关心HTML里最常用的几个标记，对于一些不常用的标记它允许直接将HTML标记插入文本。</p>\n<hr>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>Markdown提供了两种方式（Setext和Atx）来显示标题。</p>\n<h4 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Setext方式</span><br><span class=\"line\">标题1</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">标题2</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">Atx方式</span><br><span class=\"line\"># 标题1</span><br><span class=\"line\">## 标题2</span><br><span class=\"line\">###### 标题6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：\"><a href=\"#效果：\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>Setext方式</p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><p>Atx方式</p>\n<h1 id=\"标题1-1\"><a href=\"#标题1-1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2-1\"><a href=\"#标题2-1\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6><hr>\n<h2 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h2><p>在文字的末尾使用两个或两个以上的空格来表示换行。</p>\n<hr>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>行首使用<code>&gt;</code>加上一个空格表示引用段落，内部可以嵌套多个引用。</p>\n<h4 id=\"语法：-1\"><a href=\"#语法：-1\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这是一个引用，</span><br><span class=\"line\">&gt; 这里木有换行，   </span><br><span class=\"line\">&gt; 在这里换行了。</span><br><span class=\"line\">&gt; &gt; 内部嵌套</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-1\"><a href=\"#效果：-1\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><blockquote>\n<p>这是一个引用， 这里木有换行，<br>在这里换行了。</p>\n<blockquote>\n<p>内部嵌套</p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>无序列表</strong>使用<code>*</code>、<code>+</code>或<code>-</code>后面加上空格来表示。</p>\n<h4 id=\"语法：-2\"><a href=\"#语法：-2\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Item 1</span><br><span class=\"line\">* Item 2</span><br><span class=\"line\">* Item 3</span><br><span class=\"line\"></span><br><span class=\"line\">+ Item 1</span><br><span class=\"line\">+ Item 2</span><br><span class=\"line\">+ Item 3</span><br><span class=\"line\"></span><br><span class=\"line\">- Item 1</span><br><span class=\"line\">- Item 2</span><br><span class=\"line\">- Item 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-2\"><a href=\"#效果：-2\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><ul>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n</ul>\n<p><strong>有序列表</strong>使用数字加英文句号加空格表示。</p>\n<h4 id=\"语法：-3\"><a href=\"#语法：-3\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Item 1</span><br><span class=\"line\">2. Item 2</span><br><span class=\"line\">3. Item 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-3\"><a href=\"#效果：-3\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n</ol>\n<hr>\n<h2 id=\"代码区域\"><a href=\"#代码区域\" class=\"headerlink\" title=\"代码区域\"></a>代码区域</h2><p><strong>行内代码</strong>使用<strong>反斜杠</strong>```表示。<br><strong>代码段落</strong>则是在每行文字前加4个空格或者1个缩进符表示。</p>\n<h4 id=\"语法：-4\"><a href=\"#语法：-4\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bash中可以使用echo来进行输出。</span><br><span class=\"line\">    $ echo &#39;Something&#39;</span><br><span class=\"line\">    $ echo -e &#39;\\tSomething\\n&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-4\"><a href=\"#效果：-4\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>Bash中可以使用echo来进行输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &#39;Something&#39;</span><br><span class=\"line\">$ echo -e &#39;\\tSomething\\n&#39;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>Markdown使用<code>\\*</code>或<code>\\_</code>表示强调。</p>\n<h4 id=\"语法：-5\"><a href=\"#语法：-5\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单星号 &#x3D; *斜体*</span><br><span class=\"line\">单下划线 &#x3D; _斜体_</span><br><span class=\"line\">双星号 &#x3D; **加粗**</span><br><span class=\"line\">双下划线 &#x3D; __加粗__</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-5\"><a href=\"#效果：-5\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>单星号 = <em>斜体</em><br>单下划线 = <em>斜体</em><br>双星号 = <strong>加粗</strong><br>双下划线 = <strong>加粗</strong></p>\n<hr>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>Markdown支持两种风格的链接：<em>Inline</em>和<em>Reference</em>。</p>\n<h4 id=\"语法：-6\"><a href=\"#语法：-6\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p><em>Inline<em>：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用*</em>空格<strong>加</strong>“title属性”*<em>。<br>*Reference</em>：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为<code>[链接文本][ref]</code>；定义部分可以出现在文本中的其他位置，格式为<code>[ref]: http://some/link/address (可选的标题)</code>。<br>*注：ref中不区分大小写。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个Inline[示例](http:&#x2F;&#x2F;equation85.github.com &quot;可选的title&quot;)。</span><br><span class=\"line\">这是一个Reference[示例][ref]。</span><br><span class=\"line\">[ref]: http:&#x2F;&#x2F;equation85.github.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-6\"><a href=\"#效果：-6\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>这是一个<em>Inline</em><a href=\"http://equation85.github.com/\" target=\"_blank\" rel=\"noopener\">示例</a>。<br>这是一个<em>Reference</em><a href=\"http://equation85.github.com/\" target=\"_blank\" rel=\"noopener\">示例</a>。</p>\n<hr>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p>图片的使用方法基本上和链接类似，只是在中括号前加<strong>叹号</strong>。<br><em>注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记。</em></p>\n<h4 id=\"语法：-7\"><a href=\"#语法：-7\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Inline示例：![替代文本](&#x2F;assets&#x2F;images&#x2F;jian.jpg &quot;可选的title&quot;)</span><br><span class=\"line\">Reference示例：![替代文本][pic]</span><br><span class=\"line\">[pic]: &#x2F;assets&#x2F;images&#x2F;ship.jpg &quot;可选的title&quot;</span><br><span class=\"line\">HTML示例：&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;images&#x2F;jian.jpg&quot; alt&#x3D;&quot;替代文本&quot; title&#x3D;&quot;标题文本&quot; width&#x3D;&quot;200&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-7\"><a href=\"#效果：-7\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p><img src=\"http://equation85.github.io/assets/images/jian.jpg\" alt=\"替代文本\"></p>\n<hr>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h4 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h4><p>使用<strong>尖括号</strong>，可以为输入的URL或者邮箱自动创建链接。如<a href=\"mailto:test@domain.com\">test@domain.com</a>。</p>\n<h4 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h4><p>在一行中使用三个或三个以上的<code>*</code>、<code>-</code>或<code>_</code>可以添加分隔线，其中可以有空白，但是不能有其他字符。</p>\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h4><p>Markdown中的转义字符为<code>\\</code>，可以转义的有：</p>\n<ul>\n<li>\\ 反斜杠</li>\n<li>` 反引号</li>\n<li>* 星号</li>\n<li>_ 下划线</li>\n<li>{} 大括号</li>\n<li>[] 中括号</li>\n<li>() 小括号</li>\n<li># 井号</li>\n<li>+ 加号</li>\n<li>- 减号</li>\n<li>. 英文句号</li>\n<li>! 感叹号</li>\n</ul>\n<hr>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Markdown语法很大程度上减少了编辑的成本，但是在写作这篇文章的时候也发现某些标记对中文的支持似乎并不完美，虽然这些缺陷可以通过直接插入HTML代码解决（但这么做一点都不漂亮）。总的来说，能够在离线状态下使用命令行模式进行写作还是很爽的，相比在线写作模式精力可以更专注。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是Markdown\"><a href=\"#什么是Markdown\" class=\"headerlink\" title=\"什么是Markdown\"></a>什么是Markdown</h2><p>Markdown是一个将文本转化为HTML的工具。简单来说，Markdown是一个兼顾可读性与易用性的轻量级标记体系。Markdown并不追求大而全，它只关心HTML里最常用的几个标记，对于一些不常用的标记它允许直接将HTML标记插入文本。</p>\n<hr>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><p>Markdown提供了两种方式（Setext和Atx）来显示标题。</p>\n<h4 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Setext方式</span><br><span class=\"line\">标题1</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\"></span><br><span class=\"line\">标题2</span><br><span class=\"line\">-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">Atx方式</span><br><span class=\"line\"># 标题1</span><br><span class=\"line\">## 标题2</span><br><span class=\"line\">###### 标题6</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：\"><a href=\"#效果：\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>Setext方式</p>\n<h1 id=\"标题1\"><a href=\"#标题1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2\"><a href=\"#标题2\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><p>Atx方式</p>\n<h1 id=\"标题1-1\"><a href=\"#标题1-1\" class=\"headerlink\" title=\"标题1\"></a>标题1</h1><h2 id=\"标题2-1\"><a href=\"#标题2-1\" class=\"headerlink\" title=\"标题2\"></a>标题2</h2><h6 id=\"标题6\"><a href=\"#标题6\" class=\"headerlink\" title=\"标题6\"></a>标题6</h6><hr>\n<h2 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h2><p>在文字的末尾使用两个或两个以上的空格来表示换行。</p>\n<hr>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>行首使用<code>&gt;</code>加上一个空格表示引用段落，内部可以嵌套多个引用。</p>\n<h4 id=\"语法：-1\"><a href=\"#语法：-1\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; 这是一个引用，</span><br><span class=\"line\">&gt; 这里木有换行，   </span><br><span class=\"line\">&gt; 在这里换行了。</span><br><span class=\"line\">&gt; &gt; 内部嵌套</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-1\"><a href=\"#效果：-1\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><blockquote>\n<p>这是一个引用， 这里木有换行，<br>在这里换行了。</p>\n<blockquote>\n<p>内部嵌套</p>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><p><strong>无序列表</strong>使用<code>*</code>、<code>+</code>或<code>-</code>后面加上空格来表示。</p>\n<h4 id=\"语法：-2\"><a href=\"#语法：-2\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Item 1</span><br><span class=\"line\">* Item 2</span><br><span class=\"line\">* Item 3</span><br><span class=\"line\"></span><br><span class=\"line\">+ Item 1</span><br><span class=\"line\">+ Item 2</span><br><span class=\"line\">+ Item 3</span><br><span class=\"line\"></span><br><span class=\"line\">- Item 1</span><br><span class=\"line\">- Item 2</span><br><span class=\"line\">- Item 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-2\"><a href=\"#效果：-2\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><ul>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n</ul>\n<p><strong>有序列表</strong>使用数字加英文句号加空格表示。</p>\n<h4 id=\"语法：-3\"><a href=\"#语法：-3\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Item 1</span><br><span class=\"line\">2. Item 2</span><br><span class=\"line\">3. Item 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-3\"><a href=\"#效果：-3\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3</li>\n</ol>\n<hr>\n<h2 id=\"代码区域\"><a href=\"#代码区域\" class=\"headerlink\" title=\"代码区域\"></a>代码区域</h2><p><strong>行内代码</strong>使用<strong>反斜杠</strong>```表示。<br><strong>代码段落</strong>则是在每行文字前加4个空格或者1个缩进符表示。</p>\n<h4 id=\"语法：-4\"><a href=\"#语法：-4\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bash中可以使用echo来进行输出。</span><br><span class=\"line\">    $ echo &#39;Something&#39;</span><br><span class=\"line\">    $ echo -e &#39;\\tSomething\\n&#39;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-4\"><a href=\"#效果：-4\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>Bash中可以使用echo来进行输出。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo &#39;Something&#39;</span><br><span class=\"line\">$ echo -e &#39;\\tSomething\\n&#39;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h2><p>Markdown使用<code>\\*</code>或<code>\\_</code>表示强调。</p>\n<h4 id=\"语法：-5\"><a href=\"#语法：-5\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单星号 &#x3D; *斜体*</span><br><span class=\"line\">单下划线 &#x3D; _斜体_</span><br><span class=\"line\">双星号 &#x3D; **加粗**</span><br><span class=\"line\">双下划线 &#x3D; __加粗__</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-5\"><a href=\"#效果：-5\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>单星号 = <em>斜体</em><br>单下划线 = <em>斜体</em><br>双星号 = <strong>加粗</strong><br>双下划线 = <strong>加粗</strong></p>\n<hr>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><p>Markdown支持两种风格的链接：<em>Inline</em>和<em>Reference</em>。</p>\n<h4 id=\"语法：-6\"><a href=\"#语法：-6\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p><em>Inline<em>：以中括号标记显示的链接文本，后面紧跟用小括号包围的链接。如果链接有title属性，则在链接中使用*</em>空格<strong>加</strong>“title属性”*<em>。<br>*Reference</em>：一般应用于多个不同位置使用相同链接。通常分为两个部分，调用部分为<code>[链接文本][ref]</code>；定义部分可以出现在文本中的其他位置，格式为<code>[ref]: http://some/link/address (可选的标题)</code>。<br>*注：ref中不区分大小写。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是一个Inline[示例](http:&#x2F;&#x2F;equation85.github.com &quot;可选的title&quot;)。</span><br><span class=\"line\">这是一个Reference[示例][ref]。</span><br><span class=\"line\">[ref]: http:&#x2F;&#x2F;equation85.github.com</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-6\"><a href=\"#效果：-6\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p>这是一个<em>Inline</em><a href=\"http://equation85.github.com/\" target=\"_blank\" rel=\"noopener\">示例</a>。<br>这是一个<em>Reference</em><a href=\"http://equation85.github.com/\" target=\"_blank\" rel=\"noopener\">示例</a>。</p>\n<hr>\n<h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><p>图片的使用方法基本上和链接类似，只是在中括号前加<strong>叹号</strong>。<br><em>注：Markdown不能设置图片大小，如果必须设置则应使用HTML标记。</em></p>\n<h4 id=\"语法：-7\"><a href=\"#语法：-7\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Inline示例：![替代文本](&#x2F;assets&#x2F;images&#x2F;jian.jpg &quot;可选的title&quot;)</span><br><span class=\"line\">Reference示例：![替代文本][pic]</span><br><span class=\"line\">[pic]: &#x2F;assets&#x2F;images&#x2F;ship.jpg &quot;可选的title&quot;</span><br><span class=\"line\">HTML示例：&lt;img src&#x3D;&quot;&#x2F;assets&#x2F;images&#x2F;jian.jpg&quot; alt&#x3D;&quot;替代文本&quot; title&#x3D;&quot;标题文本&quot; width&#x3D;&quot;200&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果：-7\"><a href=\"#效果：-7\" class=\"headerlink\" title=\"效果：\"></a>效果：</h4><p><img src=\"http://equation85.github.io/assets/images/jian.jpg\" alt=\"替代文本\"></p>\n<hr>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h4 id=\"自动链接\"><a href=\"#自动链接\" class=\"headerlink\" title=\"自动链接\"></a>自动链接</h4><p>使用<strong>尖括号</strong>，可以为输入的URL或者邮箱自动创建链接。如<a href=\"mailto:test@domain.com\">test@domain.com</a>。</p>\n<h4 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h4><p>在一行中使用三个或三个以上的<code>*</code>、<code>-</code>或<code>_</code>可以添加分隔线，其中可以有空白，但是不能有其他字符。</p>\n<h4 id=\"转义字符\"><a href=\"#转义字符\" class=\"headerlink\" title=\"转义字符\"></a>转义字符</h4><p>Markdown中的转义字符为<code>\\</code>，可以转义的有：</p>\n<ul>\n<li>\\ 反斜杠</li>\n<li>` 反引号</li>\n<li>* 星号</li>\n<li>_ 下划线</li>\n<li>{} 大括号</li>\n<li>[] 中括号</li>\n<li>() 小括号</li>\n<li># 井号</li>\n<li>+ 加号</li>\n<li>- 减号</li>\n<li>. 英文句号</li>\n<li>! 感叹号</li>\n</ul>\n<hr>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>Markdown语法很大程度上减少了编辑的成本，但是在写作这篇文章的时候也发现某些标记对中文的支持似乎并不完美，虽然这些缺陷可以通过直接插入HTML代码解决（但这么做一点都不漂亮）。总的来说，能够在离线状态下使用命令行模式进行写作还是很爽的，相比在线写作模式精力可以更专注。</p>\n"},{"title":"PT站点备忘","date":"2019-03-23T09:34:12.000Z","_content":"\n> 有缘看到这篇帖子又有PT经验的可以向 wannayoung@163.com 发邮件求邀，请注意表格中邀请数量。\n\n| **站点**                                  | 等级    | 分享率 | 魔力   | 邀请 | 入站时间   |\n| :---------------------------------------- | :------ | :----- | :----- | ---: | :--------- |\n| **[BTSchool](https://pt.btschool.club/)** | Crazy   | 8.96   | 283902 |    3 | 2019/07/31 |\n| **[CHDBits](https://chdbits.co/)**        | Power   | 6.38   | 283545 |    0 | 2019/08/26 |\n| **[DicMusic](https://dicmusic.club/)**    | User    | 0.57   | 27638  |    0 | 2019/08/05 |\n| **[DiscFan](https://discfan.net/)**       | Veteran | 10.34  | 343148 |   15 | 2018/03/07 |\n| **[ExoticaZ](https://exoticaz.to/)**      | Veteran | 17.27  | 8391   |    0 | 2019/06/23 |\n| **[FileList](https://filelist.ro/)**      | Power   | 15.22  | 6525   |    0 | 2019/09/06 |\n| **[HDHome](https://hdhome.org/)**         | Insane  | 11.17  | 441378 |    0 | 2019/07/14 |\n| **[HDSky](https://hdsky.me/)**            | Power   | 10.28  | 80400  |    0 | 2019/11/01 |\n| **[IPTorrents](https://iptorrents.com/)** | Power   | 39.65  | 3640   |    3 | 2019/09/06 |\n| **[KeepFrds](https://pt.keepfrds.com/)**  | Crazy   | 6.63   | 100290 |    0 | 2019/07/26 |\n| **[MTeam](https://pt.m-team.cc/)**        | Nexus   | 11.06  | 636729 |    2 | 2018/01/04 |\n| [**MoeCat**](https://moecat.best/)        | Insane  | 10.5   | 443184 |    3 | 2019/07/02 |\n| **[NanYang](https://nanyangpt.com/)**     | Insane  | 7.11   | 247847 |    2 | 2019/07/12 |\n| **[OpenCD](https://open.cd/)**            | Crazy   | 3.39   | 193430 |    6 | 2019/07/29 |\n| **[OurBits](https://ourbits.club/)**      | Crazy   | 8.17   | 692703 |    0 | 2018/04/01 |\n| **[Pornbits](http://pornbits.net/)**      | User    | 10     | 1000   |    0 | 2019/12/27 |\n| **[PTer](https://pterclub.com/)**         | Crazy   | 6.86   | 234234 |   18 | 2019/07/16 |\n| **[PTHome](https://pthome.net/)**         | Insane  | 8.79   | 512684 |   12 | 2019/07/22 |\n| **[Spring](https://springsunday.net/)**   | Insane  | 12.6   | 282553 |    0 | 2019/07/22 |\n| **[SportCult](https://sportscult.org/)**  | Power   | 6.81   | 290    |    5 | 2019/09/05 |\n| **[TTG](https://totheglory.im/)**         | Crazy   | 4.95   | 42662  |    0 | 2019/07/14 |\n| **[YDY](https://pt.hdbd.us/)**            | Crazy   | 20.71  | 28795  |    0 | 2019/08/01 |\n| **[TJU](https://tjupt.org/)**             | Crazy   | 4.17   | 758148 |    5 | 2019/08/02 |\n\n","source":"_posts/PT站点备忘.md","raw":"---\ntitle: PT站点备忘\ncategories:\n  - 其他\ntags:\n  - PT\ndate: 2019-03-23 17:34:12\n---\n\n> 有缘看到这篇帖子又有PT经验的可以向 wannayoung@163.com 发邮件求邀，请注意表格中邀请数量。\n\n| **站点**                                  | 等级    | 分享率 | 魔力   | 邀请 | 入站时间   |\n| :---------------------------------------- | :------ | :----- | :----- | ---: | :--------- |\n| **[BTSchool](https://pt.btschool.club/)** | Crazy   | 8.96   | 283902 |    3 | 2019/07/31 |\n| **[CHDBits](https://chdbits.co/)**        | Power   | 6.38   | 283545 |    0 | 2019/08/26 |\n| **[DicMusic](https://dicmusic.club/)**    | User    | 0.57   | 27638  |    0 | 2019/08/05 |\n| **[DiscFan](https://discfan.net/)**       | Veteran | 10.34  | 343148 |   15 | 2018/03/07 |\n| **[ExoticaZ](https://exoticaz.to/)**      | Veteran | 17.27  | 8391   |    0 | 2019/06/23 |\n| **[FileList](https://filelist.ro/)**      | Power   | 15.22  | 6525   |    0 | 2019/09/06 |\n| **[HDHome](https://hdhome.org/)**         | Insane  | 11.17  | 441378 |    0 | 2019/07/14 |\n| **[HDSky](https://hdsky.me/)**            | Power   | 10.28  | 80400  |    0 | 2019/11/01 |\n| **[IPTorrents](https://iptorrents.com/)** | Power   | 39.65  | 3640   |    3 | 2019/09/06 |\n| **[KeepFrds](https://pt.keepfrds.com/)**  | Crazy   | 6.63   | 100290 |    0 | 2019/07/26 |\n| **[MTeam](https://pt.m-team.cc/)**        | Nexus   | 11.06  | 636729 |    2 | 2018/01/04 |\n| [**MoeCat**](https://moecat.best/)        | Insane  | 10.5   | 443184 |    3 | 2019/07/02 |\n| **[NanYang](https://nanyangpt.com/)**     | Insane  | 7.11   | 247847 |    2 | 2019/07/12 |\n| **[OpenCD](https://open.cd/)**            | Crazy   | 3.39   | 193430 |    6 | 2019/07/29 |\n| **[OurBits](https://ourbits.club/)**      | Crazy   | 8.17   | 692703 |    0 | 2018/04/01 |\n| **[Pornbits](http://pornbits.net/)**      | User    | 10     | 1000   |    0 | 2019/12/27 |\n| **[PTer](https://pterclub.com/)**         | Crazy   | 6.86   | 234234 |   18 | 2019/07/16 |\n| **[PTHome](https://pthome.net/)**         | Insane  | 8.79   | 512684 |   12 | 2019/07/22 |\n| **[Spring](https://springsunday.net/)**   | Insane  | 12.6   | 282553 |    0 | 2019/07/22 |\n| **[SportCult](https://sportscult.org/)**  | Power   | 6.81   | 290    |    5 | 2019/09/05 |\n| **[TTG](https://totheglory.im/)**         | Crazy   | 4.95   | 42662  |    0 | 2019/07/14 |\n| **[YDY](https://pt.hdbd.us/)**            | Crazy   | 20.71  | 28795  |    0 | 2019/08/01 |\n| **[TJU](https://tjupt.org/)**             | Crazy   | 4.17   | 758148 |    5 | 2019/08/02 |\n\n","slug":"PT站点备忘","published":1,"updated":"2020-06-18T10:46:41.077Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bz4000phb8y70wdaio3","content":"<blockquote>\n<p>有缘看到这篇帖子又有PT经验的可以向 <a href=\"mailto:wannayoung@163.com\">wannayoung@163.com</a> 发邮件求邀，请注意表格中邀请数量。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>站点</strong></th>\n<th align=\"left\">等级</th>\n<th align=\"left\">分享率</th>\n<th align=\"left\">魔力</th>\n<th align=\"right\">邀请</th>\n<th align=\"left\">入站时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong><a href=\"https://pt.btschool.club/\" target=\"_blank\" rel=\"noopener\">BTSchool</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">8.96</td>\n<td align=\"left\">283902</td>\n<td align=\"right\">3</td>\n<td align=\"left\">2019/07/31</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://chdbits.co/\" target=\"_blank\" rel=\"noopener\">CHDBits</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">6.38</td>\n<td align=\"left\">283545</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/08/26</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://dicmusic.club/\" target=\"_blank\" rel=\"noopener\">DicMusic</a></strong></td>\n<td align=\"left\">User</td>\n<td align=\"left\">0.57</td>\n<td align=\"left\">27638</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/08/05</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://discfan.net/\" target=\"_blank\" rel=\"noopener\">DiscFan</a></strong></td>\n<td align=\"left\">Veteran</td>\n<td align=\"left\">10.34</td>\n<td align=\"left\">343148</td>\n<td align=\"right\">15</td>\n<td align=\"left\">2018/03/07</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://exoticaz.to/\" target=\"_blank\" rel=\"noopener\">ExoticaZ</a></strong></td>\n<td align=\"left\">Veteran</td>\n<td align=\"left\">17.27</td>\n<td align=\"left\">8391</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/06/23</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://filelist.ro/\" target=\"_blank\" rel=\"noopener\">FileList</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">15.22</td>\n<td align=\"left\">6525</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/09/06</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://hdhome.org/\" target=\"_blank\" rel=\"noopener\">HDHome</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">11.17</td>\n<td align=\"left\">441378</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/14</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://hdsky.me/\" target=\"_blank\" rel=\"noopener\">HDSky</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">10.28</td>\n<td align=\"left\">80400</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/11/01</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://iptorrents.com/\" target=\"_blank\" rel=\"noopener\">IPTorrents</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">39.65</td>\n<td align=\"left\">3640</td>\n<td align=\"right\">3</td>\n<td align=\"left\">2019/09/06</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pt.keepfrds.com/\" target=\"_blank\" rel=\"noopener\">KeepFrds</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">6.63</td>\n<td align=\"left\">100290</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/26</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pt.m-team.cc/\" target=\"_blank\" rel=\"noopener\">MTeam</a></strong></td>\n<td align=\"left\">Nexus</td>\n<td align=\"left\">11.06</td>\n<td align=\"left\">636729</td>\n<td align=\"right\">2</td>\n<td align=\"left\">2018/01/04</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://moecat.best/\" target=\"_blank\" rel=\"noopener\"><strong>MoeCat</strong></a></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">10.5</td>\n<td align=\"left\">443184</td>\n<td align=\"right\">3</td>\n<td align=\"left\">2019/07/02</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://nanyangpt.com/\" target=\"_blank\" rel=\"noopener\">NanYang</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">7.11</td>\n<td align=\"left\">247847</td>\n<td align=\"right\">2</td>\n<td align=\"left\">2019/07/12</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://open.cd/\" target=\"_blank\" rel=\"noopener\">OpenCD</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">3.39</td>\n<td align=\"left\">193430</td>\n<td align=\"right\">6</td>\n<td align=\"left\">2019/07/29</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://ourbits.club/\" target=\"_blank\" rel=\"noopener\">OurBits</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">8.17</td>\n<td align=\"left\">692703</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2018/04/01</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"http://pornbits.net/\" target=\"_blank\" rel=\"noopener\">Pornbits</a></strong></td>\n<td align=\"left\">User</td>\n<td align=\"left\">10</td>\n<td align=\"left\">1000</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/12/27</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pterclub.com/\" target=\"_blank\" rel=\"noopener\">PTer</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">6.86</td>\n<td align=\"left\">234234</td>\n<td align=\"right\">18</td>\n<td align=\"left\">2019/07/16</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pthome.net/\" target=\"_blank\" rel=\"noopener\">PTHome</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">8.79</td>\n<td align=\"left\">512684</td>\n<td align=\"right\">12</td>\n<td align=\"left\">2019/07/22</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://springsunday.net/\" target=\"_blank\" rel=\"noopener\">Spring</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">12.6</td>\n<td align=\"left\">282553</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/22</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://sportscult.org/\" target=\"_blank\" rel=\"noopener\">SportCult</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">6.81</td>\n<td align=\"left\">290</td>\n<td align=\"right\">5</td>\n<td align=\"left\">2019/09/05</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://totheglory.im/\" target=\"_blank\" rel=\"noopener\">TTG</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">4.95</td>\n<td align=\"left\">42662</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/14</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pt.hdbd.us/\" target=\"_blank\" rel=\"noopener\">YDY</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">20.71</td>\n<td align=\"left\">28795</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/08/01</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://tjupt.org/\" target=\"_blank\" rel=\"noopener\">TJU</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">4.17</td>\n<td align=\"left\">758148</td>\n<td align=\"right\">5</td>\n<td align=\"left\">2019/08/02</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>有缘看到这篇帖子又有PT经验的可以向 <a href=\"mailto:wannayoung@163.com\">wannayoung@163.com</a> 发邮件求邀，请注意表格中邀请数量。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>站点</strong></th>\n<th align=\"left\">等级</th>\n<th align=\"left\">分享率</th>\n<th align=\"left\">魔力</th>\n<th align=\"right\">邀请</th>\n<th align=\"left\">入站时间</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><strong><a href=\"https://pt.btschool.club/\" target=\"_blank\" rel=\"noopener\">BTSchool</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">8.96</td>\n<td align=\"left\">283902</td>\n<td align=\"right\">3</td>\n<td align=\"left\">2019/07/31</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://chdbits.co/\" target=\"_blank\" rel=\"noopener\">CHDBits</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">6.38</td>\n<td align=\"left\">283545</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/08/26</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://dicmusic.club/\" target=\"_blank\" rel=\"noopener\">DicMusic</a></strong></td>\n<td align=\"left\">User</td>\n<td align=\"left\">0.57</td>\n<td align=\"left\">27638</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/08/05</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://discfan.net/\" target=\"_blank\" rel=\"noopener\">DiscFan</a></strong></td>\n<td align=\"left\">Veteran</td>\n<td align=\"left\">10.34</td>\n<td align=\"left\">343148</td>\n<td align=\"right\">15</td>\n<td align=\"left\">2018/03/07</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://exoticaz.to/\" target=\"_blank\" rel=\"noopener\">ExoticaZ</a></strong></td>\n<td align=\"left\">Veteran</td>\n<td align=\"left\">17.27</td>\n<td align=\"left\">8391</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/06/23</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://filelist.ro/\" target=\"_blank\" rel=\"noopener\">FileList</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">15.22</td>\n<td align=\"left\">6525</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/09/06</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://hdhome.org/\" target=\"_blank\" rel=\"noopener\">HDHome</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">11.17</td>\n<td align=\"left\">441378</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/14</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://hdsky.me/\" target=\"_blank\" rel=\"noopener\">HDSky</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">10.28</td>\n<td align=\"left\">80400</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/11/01</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://iptorrents.com/\" target=\"_blank\" rel=\"noopener\">IPTorrents</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">39.65</td>\n<td align=\"left\">3640</td>\n<td align=\"right\">3</td>\n<td align=\"left\">2019/09/06</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pt.keepfrds.com/\" target=\"_blank\" rel=\"noopener\">KeepFrds</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">6.63</td>\n<td align=\"left\">100290</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/26</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pt.m-team.cc/\" target=\"_blank\" rel=\"noopener\">MTeam</a></strong></td>\n<td align=\"left\">Nexus</td>\n<td align=\"left\">11.06</td>\n<td align=\"left\">636729</td>\n<td align=\"right\">2</td>\n<td align=\"left\">2018/01/04</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://moecat.best/\" target=\"_blank\" rel=\"noopener\"><strong>MoeCat</strong></a></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">10.5</td>\n<td align=\"left\">443184</td>\n<td align=\"right\">3</td>\n<td align=\"left\">2019/07/02</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://nanyangpt.com/\" target=\"_blank\" rel=\"noopener\">NanYang</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">7.11</td>\n<td align=\"left\">247847</td>\n<td align=\"right\">2</td>\n<td align=\"left\">2019/07/12</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://open.cd/\" target=\"_blank\" rel=\"noopener\">OpenCD</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">3.39</td>\n<td align=\"left\">193430</td>\n<td align=\"right\">6</td>\n<td align=\"left\">2019/07/29</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://ourbits.club/\" target=\"_blank\" rel=\"noopener\">OurBits</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">8.17</td>\n<td align=\"left\">692703</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2018/04/01</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"http://pornbits.net/\" target=\"_blank\" rel=\"noopener\">Pornbits</a></strong></td>\n<td align=\"left\">User</td>\n<td align=\"left\">10</td>\n<td align=\"left\">1000</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/12/27</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pterclub.com/\" target=\"_blank\" rel=\"noopener\">PTer</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">6.86</td>\n<td align=\"left\">234234</td>\n<td align=\"right\">18</td>\n<td align=\"left\">2019/07/16</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pthome.net/\" target=\"_blank\" rel=\"noopener\">PTHome</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">8.79</td>\n<td align=\"left\">512684</td>\n<td align=\"right\">12</td>\n<td align=\"left\">2019/07/22</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://springsunday.net/\" target=\"_blank\" rel=\"noopener\">Spring</a></strong></td>\n<td align=\"left\">Insane</td>\n<td align=\"left\">12.6</td>\n<td align=\"left\">282553</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/22</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://sportscult.org/\" target=\"_blank\" rel=\"noopener\">SportCult</a></strong></td>\n<td align=\"left\">Power</td>\n<td align=\"left\">6.81</td>\n<td align=\"left\">290</td>\n<td align=\"right\">5</td>\n<td align=\"left\">2019/09/05</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://totheglory.im/\" target=\"_blank\" rel=\"noopener\">TTG</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">4.95</td>\n<td align=\"left\">42662</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/07/14</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://pt.hdbd.us/\" target=\"_blank\" rel=\"noopener\">YDY</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">20.71</td>\n<td align=\"left\">28795</td>\n<td align=\"right\">0</td>\n<td align=\"left\">2019/08/01</td>\n</tr>\n<tr>\n<td align=\"left\"><strong><a href=\"https://tjupt.org/\" target=\"_blank\" rel=\"noopener\">TJU</a></strong></td>\n<td align=\"left\">Crazy</td>\n<td align=\"left\">4.17</td>\n<td align=\"left\">758148</td>\n<td align=\"right\">5</td>\n<td align=\"left\">2019/08/02</td>\n</tr>\n</tbody></table>\n"},{"title":"iOS开发中的知识点","date":"2020-03-30T07:56:45.000Z","_content":"\n> iOS开发中的重要知识点，方便自己随时回顾查看，不间断更新。\n\n## OC 相关\n\n### 1、多线程\n\n#### 进程与线程\n\n##### \t进程：\n\n- 进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单元\n\n- 进程是指在系统中正在运行的一个应用程序，就是一段程序的执行过程,我们可以理解为手机上的一个app\n\n- 每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源\n\n  ##### 线程：\n\n- 程序执行流的最小单元，线程是进程中的一个实体\n\n- 一个进程要想执行任务，必须至少有一条线程.应用程序启动的时候，系统会默认开启主线程\n\n  ##### 进程和线程：\n\n- 线程是进程的执行单元，进程的所有任务都在线程中执行\n\n- 线程是 CPU 分配资源和调度的最小单位\n\n- 一个程序可以对应多个进程(多进程),一个进程中可有多个线程,但至少要有一条线程\n  同一个进程内的线程共享进程资源\n\n#### 创建线程方式\n\n- NSThread面向对象的，需要手动创建线程，不需要手动销毁，子线程间通信很难\n- GCD基于C语言，充分利用设备的多核，自动管理线程生命周期，比NSOperation效率高\n- NSOperation基于GCD封装，更加面向对象，比GCD多了一些功能，可以添加线程间的依赖\n\n#### GCD（大中央调度）\n\n- 并发队列（让多个任务并发执行，异步任务下才有效）\n- 串行队列（任务一个接一个地执行，按照FIFO顺序执行）\n- 同步任务派发(synchronous，阻塞当前线程，等待任务块Block完成后,函数才能返回,后面的代码才能继续执行)\n- 异步任务派发(asynchronous，任务添加到队列后，函数立即返回，后面的代码不用等待任务完成后即可执行，异步提交任务执行无序)\n\n#### NSOpertionQueue\n\n1. 初始化NSOpertionQueue\n2. 创建线程队列的NSOpertion\n3. 添加NSOpertion的相关依赖\n4. 添加NSOpertion到NSOpertionQueue\n\n\n### 2、Runtime\n\n#### Runtime 机制\n\nruntime简称运行时。OC是运行时机制，也就是在运行时才做一些处理。\n例如：C语言在编译的时候就知道要调用哪个方法函数，而OC在编译的时候并不知道要调用哪个方法函数，只有在运行的时候才知道调用的方法函数名称，来找到对应的方法函数进行调用。\n\n#### Runtime 应用\n\n- 交换方法实现\n  场景：当第三方框架或者系统原生方法功能不能满足我们的时候，我们可以在保持系统原有方法功能的基础上，添加额外的功能。\n- 动态添加方法\n  场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。\n- 利用关联对象（AssociatedObject）给分类添加属性\n  场景：分类是不能自定义属性和变量的，这时候可以使用runtime动态添加属性方法\n  原理：给一个类声明属性，其实本质就是给这个类添加关联\n- 遍历类的所有成员变量\n   1)、NSCoding自动归档解档\n  场景：如果一个模型有许多个属性，实现自定义模型数据持久化时，需要对每个属性都实现一遍encodeObject 和decodeObjectForKey方法，比较麻烦。我们可以使用Runtime来解决。\n  原理：用runtime提供的函数遍历Model自身所有属性，并对属性进行encode和decode操作。\n   2)、字典转模型\n  原理：利用Runtime，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值\n  3)、修改textfield的占位文字颜色\n- 利用消息转发机制解决方法找不到的异常问题\n\n### 3、Runloop\n\n#### 什么是 RunLoop？\n\nRunLoop是一种高级的循环机制，让程序持续运行，并处理程序中的各种事件，让线程在需要做事的时候忙起来，不需要的话就让线程休眠。\n\n- RunLoop和线程是绑定在一起的，每条线程都有唯一一个与之对应的RunLoop对象。\n- 不能自己创建RunLoop对象，但是可以获取系统提供的RunLoop对象。\n- 主线程的RunLoop对象是由系统自动创建自动完成启动，而子线程中的RunLoop对象需要我们手动获取并启动。\n- NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，需设置Mode为Common模式。\n\n#### 列表Timer停止\n\n原因在于滑动时当前线程的Runloop切换了mode用于列表滑动，导致timer暂停。滑动列表时，Runloop的mode由原来的Default模式切换到了Event Tracking模式，timer停止工作。\n\nRunloop中的mode主要用来指定事件在runloop中的优先级，有以下几种：\n\n- Default：默认，一般情况下使用\n- Connection：一般系统用来处理NSConnection相关事件，开发者一般用不到\n- Modal：处理modal panels事件\n- Event Tracking：用于处理拖拽和用户交互的模式\n- Common：包括Default，Modal，Event Tracking三大模式，可以处理几乎所有事件\n\n```objective-c\n// 方法一是将timer加入到NSRunloopCommonModes中\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n\n// 方法二是将timer放到另一个线程中，然后开启另一个线程的runloop\ndispatch_async(dispatch_get_global_queue(0, 0), ^{\n\ttimer = [NSTimer scheduledTimerWithTimeInterval:1 ...];\n\t[[NSRunLoop currentRunLoop] run];\n});\n```\n\n### 4、KVC 和 KVO\n\n#### 什么是 KVC 和 KVO\n\nKVC(key-value-coding)键值编码，是一种间接访问实例变量的方法。提供一种机制来间接访问对象的属性。\n给私有变量赋值。\n\n- 给控件的内部属性赋值（如自定义UITextFiled的clearButton、placeholder的颜色，一般可利用runtime获取控件的内部属性名，Ivar *ivar = class_getInstanceVariable获取实例成员变量）\n  [textField setValue:[UIColor redColor] forKeyPath:@\"placeholderLabel.textColor\"];\n- 结合Runtime，model和字典的转换（setValuesForKeysWithDictionary，class_copyIvarList获取指定类的Ivar成员列表）\n\nKVO是一种基于KVC实现的观察者模式。当指被观察的对象的属性更改了，KVO会以自动或手动方式通知观察者。\n事例：监听 ScrollView 的 contentOffSet属性\n[scrollview addObserver:self forKeyPath:@\"contentOffset\" options: NSKeyValueObservingOptionNew context:nil];\n\n#### KVC的底层实现\n\n- 检查是否存在相应的key的set方法，如果存在，就调用set方法\n- 如果set方法不存在，就会查找与key相同名称并且带下划线的成员变量，如果有，则直接给成员变量属性赋值\n- 如果没有找到_key，就会查找相同名称的属性key，如果有就直接赋值\n- 如果还没有找到，则调用valueForUndefinedKey:和setValue:forUndefinedKey:方法，这些方法的默认实现都是抛出异常，我们可以根据需要重写它们\n\n#### KVO的底层实现\n\n- 当给A类添加KVO的时候，runtime动态的生成了一个子类NSKVONotifying_A，让A类的isa指针指向NSKVONotifying_A类，重写class方法，隐藏对象真实类信息\n- 重写监听属性的setter方法，在setter方法内部调用了Foundation 的 _NSSetObjectValueAndNotify 函数\n  _NSSetObjectValueAndNotify函数内部\n   1) 首先会调用 willChangeValueForKey\n   2) 然后给属性赋值\n   3) 最后调用 didChangeValueForKey\n   4) 最后调用 observer 的 observeValueForKeyPath 去告诉监听器属性值发生了改变 \n- 重写了dealloc做一些 KVO 内存释放\n\n## Swift 相关\n\n### 1、与 OC 比较\n\n#### 共同点\n\n- OC出现过的绝大多数概念，在Swift中继续有效（可能换个术语）\n- Swift和OC共用一套运行时环境，Swift的类型可以桥接到OC，反之亦然\n\n#### 比较\n\n- Swift注重安全，OC注重灵活\n- Swift注重值类型，OC注重指针和引用\n- Swift是静态类型语言，OC是动态类型语言\n- Swift注重面向协议编程、函数式编程、面向对象编程，OC注重面向对象编程\n\n#### 优点\n\n- Swift容易阅读，文件结构和语法简化\n- Swift中有各种方便快捷的高阶函数（函数式编程）\n- Swift中的可选类型，用于所有数据类型，而不仅仅局限于类\n- Swift中的泛型更加方便和通用，OC中只能为集合类型添加泛型\n- Swift细化权限，open > public > internal(默认) > fileprivate > private\n- Swift中独有的元组类型(tuples)，把多个值组合成复合值。元组内的值并不要求是相同类型的\n\n### 2、高级用法\n\n#### 柯里化（Currying）\n\n把接受多个参数的方法变换成接受第一个参数的方法，并且返回接受余下的参数并且返回结果的新方法\n\n```swift\nfunc add(_ v1:Int,_ v2:Int) -> Int {\n    return v1 + v2\n}\nprint(add(1, 2))\n\n// 柯里化(Currying)\nfunc add(_ v:Int) -> (Int) -> Int {\n    return {$0 + v}\n}\nprint(add(1)(2))\n```\n\n#### 关键字mutating\n\n使用 struct 或 enum 实现某协议时，协议的方法前加 mutating 关键字，可以在此方法中修改 struct 或 enum的变量。使用 class 实现协议时，方法前面是不需要加 mutating 修饰的，因为 class 可以随意更改自己的成员变量。\n\n```swift\nprotocol Vehicle {\n   var numberOfWheels:Int{get}\n   mutating func changeNumberOfWheels()\n}\n\nstruct MyCar:Vehicle {\n   var numberOfWheels: Int = 4\n   mutating func changeNumberOfWheels() {\n       numberOfWheels = 4\n   }\n}\n```\n\n#### 元组（Tuple）\n\n元组是swift编程语言中唯一的一种复合类型，他可以将指定有限个数的任何类型一次整理为一个对象，元组中的每一种类型都可以是任何的结构体、枚举或类类型。\n\n```swift\n// 交换输入普通实现：\nfunc swapMe<T>(a: inout T, b: inout T) {\n  let temp = a\n  a = b\n  b = temp\n}\n\n// 交换输入元组实现：\nfunc swapMe<T>(a: inout T, b: inout T) {\n\t(a,b) = (b,a)\n}\n```\n\n#### 操作符\n\n- precedencegroup：定义操作符的优先级\n- associativity：操作符的结合律\n- higherThan、lowerThan：运算符的优先级\n- prefix、infix、postfix：前缀、中缀、后缀运算符\n\n```swift\ninfix operator +++  // 中缀\nfunc +++(left: Int, right: Int) -> Int {\n    return left+right*2\n}\nprint(2+++3) // 8\n\nprefix operator ==+  // 前缀\nprefix func ==+(left: Int) -> Int {\n   return left*2\n}\nprint(==+2) // 4\n\npostfix operator +==  // 后缀\npostfix func +==(right: Int) -> Int {\n   return right*3\n}\nprint(2+==) // 6\n```\n\n#### 输入输出参数（inout）\n\n可变形式参数只能在函数的内部做改变。如果你想函数能够修改一个形式参数的值，而且你想这些改变在函数结束之后依然生效，那么就需要将形式参数定义为输入输出形式参数。\n\n```swift\nvar b = 10\nfunc test(a:inout Int) {\n   a = 20\n}\ntest(a: &b)\nprint(b) //20\n```\n\n#### 嵌套函数\n\n我们可以把函数当成参数或者变量来使用，函数内部嵌套函数。\n\n```swift\nfunc forward(_ forward:Bool) -> (Int) -> Int {\n    \n    func next(_ input:Int) -> Int {\n        input + 1\n    }\n\n    func previous(_ input:Int) -> Int {\n        input - 1\n    }\n  \n    return forward ? next : previous\n}\n```\n\n#### 命名空间\n\nSwift 的命名空间是基于 module 而不是在代码中显式地指明，每个 module 代表了 Swift 中的一个命名空间。也就是说，同一个 target 里的类型名称还是不能相同的。在我们进行 app 开发时，默认添加到 app 的主 target 的内容都是处于同一个命名空间中的，我们可以通过创建 Cocoa (Touch) Framework 的 target 的方法来新建一个 module，这样我们就可以在两个不同的 target 中添加同样名字的类型了。\n\n#### 别名（typealias）\n\n我们可以给一个复杂的难以理解的类型起一个别名，方便我们使用和理解。\n\n```swift\n// Swift 定义 Void 为空的元组\npublic typealias Void = ()\n\n// 函数别名\ntypealias IntFn = (Int,Int) -> Int\nfunc difference(v1:Int,v2:Int) -> Int {\n   v1 - v2\n}\nlet fn:IntFn = difference\nprint(fn(2,1))  //1\n\n// 元组别名\ntypealias Date = (year:Int,month:Int,day:Int)\nfunc test(_ date:Date) {\n   print(date.year)\n}\ntest((2019,10,30))\n```\n\n#### 可变参数\n\n一个可变形式参数可以接受零或者多个`特定类型的值`，可变参数必须是同一类型的。当调用函数的时候你可以利用可变形式参数来声明形式参数可以被传入值的数量是可变的。可以通过在形式参数的类型名称后边插入三个点符号（`...`）来书写可变形式参数。\n\n```swift\nfunc sum(_ numbers:Int...) -> Int{\n   var total = 0\n   for item in numbers {\n       total += item\n   }\n   return total\n}\nsum(1,2,3,4)  // 10\n```\n\n#### 初始化\n\n不同于 Objective-C 的初始化器，Swift 初始化器不返回值。这些初始化器主要的角色就是确保在第一次使用之前某类型的新实例能够正确初始化。\n\n```swift\nclass Person {\n   var age: Int\n   var name: String\n   //指定初始化器\n   init(age:Int, name:String) {\n       self.age = age\n       self.name = name\n   }\n   //便捷初始化器\n   convenience init(age:Int){\n       self.init(age:age,name:\"\")\n   }\n}\n```\n\n- 每一个类至少有一个指定初始化器\n- 默认初始化器总是类的指定初始化器\n- 一个类通常只有一个指定初始化器\n- 指定初始化器必须从他的直系父类调用指定初始化器\n- 便捷初始化器必须从相同的类里调用另一个初始化器\n- 便捷初始化器最终必须调用一个指定初始化器\n\n## 控件使用\n\n### 1、UIView\n\n### 2、UITableView\n\n## 实际应用\n\n### 网络封装\n\n1. 使用xcconfig配置不同环境host\n2. 添加通用的请求类和响应类\n3. 根据后台设计添加处理加密、验签等方法\n4. 封装get、post、upload请求方法\n5. 请求方法传入：响应类泛型、请求路径、请求参数\n6. 请求完成回调：成功（返回响应类型对象）、异常、失败\n7. 异常处理（退出登录、重试机制...）\n8. 添加统一的网络请求hud\n\n### 图片加载\n\n1. 显示placeholder占位图\n2. 以url为数据索引先在内存中查找是否有缓存\n3. 如果没有缓存，通过md5处理过的key来在磁盘查找，找到把的数据加载到内存并显示出来\n4. 如果内存和磁盘中都没有找到，就会向远程服务器发送请求，开始下载图片\n5. 下载完的图片加入缓存并写入到磁盘中\n6. 获取图片的过程是在子线程中进行，在主线程中显示\n\n## APP 架构\n\n### 1、组件化\n\n#### 优点\n\n- 业务分层、解耦，使代码变得可维护\n- 拆分、组织庞大的项目，使项目变得可维护\n- 便于各业务功能拆分、抽离，实现功能复用\n- 业务隔离，实现跨团队开发代码控制和版本风险控制\n- 模块化对代码的封装性、合理性都有一定的要求，提升开发人员编码能力\n- 在维护好组件的情况下，满足不同客户需求（在新的主App中使用当前组件）\n\n#### 实现\n\n- 基础组件：按功能分库，不涉及业务需求，通过接口供业务组件调用\n- 基础UI组件：各个业务模块依赖使用，但需要保持好定制扩展的设计\n- 业务组件：业务功能间相对独立，相互间没有Model共享的依赖\n- 中间件：target-action，url-block，protocol-class\n\n### 2、MVVM\n\n## App 优化\n\n### 1、启动优化\n\n- 删除无用代码\n- 抽象重复代码\n- 第三方库延迟初始化\n- 业务逻辑延迟或异步执行\n- App首页面先展示后渲染\n- Time Profiler查找耗时操作和页面\n\n### 2、网络优化\n\n#### 请求优化\n\n- 使用HttpDNS下发ip列表\n- 根据不同网络设置超时时间\n- 网络环境切换或失败，自动重发\n\n#### 传输优化\n\n- 使用http缓存\n- 文件传输启用Gzip\n- 采用WebP图片格式\n- 采用更好的序列化/反序列化方案\n\n### 3、体积优化\n\n- 开启Bitcode\n- 删除无用资源和代码\n- 对图片资源进行压缩\n- 使用更轻量级的第三方库\n- 使用纯代码进行界面布局\n- 启动图和引导图使用原生绘制或jpg\n- 某些资源文件放在服务器上，按需下载\n\n### 4、性能优化\n\n#### 速度优化\n\n- 耗时操作放入子线程\n- 使用图片缓存，数据缓存\n- 图文混排使用CoreText\n- 使图片适合UIImageView的尺寸\n- 减少离屏渲染，子线程绘制，主线程渲染\n- 减少subviews个数，用layer绘制元素\n- 减少clearColor，maskToBounds，阴影\n\n#### tableview优化\n\n- 使用cell复用机制\n- 不要动态添加视图\n- 图片异步加载并缓存\n- 手动计算高度缓存高度\n- 按需刷新，刷新最小列表单元\n\n","source":"_posts/iOS开发中的知识点.md","raw":"---\ntitle: iOS开发中的知识点\ncategories:\n  - iOS\ntags:\n  - 面试\ndate: 2020-03-30 15:56:45\n---\n\n> iOS开发中的重要知识点，方便自己随时回顾查看，不间断更新。\n\n## OC 相关\n\n### 1、多线程\n\n#### 进程与线程\n\n##### \t进程：\n\n- 进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单元\n\n- 进程是指在系统中正在运行的一个应用程序，就是一段程序的执行过程,我们可以理解为手机上的一个app\n\n- 每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源\n\n  ##### 线程：\n\n- 程序执行流的最小单元，线程是进程中的一个实体\n\n- 一个进程要想执行任务，必须至少有一条线程.应用程序启动的时候，系统会默认开启主线程\n\n  ##### 进程和线程：\n\n- 线程是进程的执行单元，进程的所有任务都在线程中执行\n\n- 线程是 CPU 分配资源和调度的最小单位\n\n- 一个程序可以对应多个进程(多进程),一个进程中可有多个线程,但至少要有一条线程\n  同一个进程内的线程共享进程资源\n\n#### 创建线程方式\n\n- NSThread面向对象的，需要手动创建线程，不需要手动销毁，子线程间通信很难\n- GCD基于C语言，充分利用设备的多核，自动管理线程生命周期，比NSOperation效率高\n- NSOperation基于GCD封装，更加面向对象，比GCD多了一些功能，可以添加线程间的依赖\n\n#### GCD（大中央调度）\n\n- 并发队列（让多个任务并发执行，异步任务下才有效）\n- 串行队列（任务一个接一个地执行，按照FIFO顺序执行）\n- 同步任务派发(synchronous，阻塞当前线程，等待任务块Block完成后,函数才能返回,后面的代码才能继续执行)\n- 异步任务派发(asynchronous，任务添加到队列后，函数立即返回，后面的代码不用等待任务完成后即可执行，异步提交任务执行无序)\n\n#### NSOpertionQueue\n\n1. 初始化NSOpertionQueue\n2. 创建线程队列的NSOpertion\n3. 添加NSOpertion的相关依赖\n4. 添加NSOpertion到NSOpertionQueue\n\n\n### 2、Runtime\n\n#### Runtime 机制\n\nruntime简称运行时。OC是运行时机制，也就是在运行时才做一些处理。\n例如：C语言在编译的时候就知道要调用哪个方法函数，而OC在编译的时候并不知道要调用哪个方法函数，只有在运行的时候才知道调用的方法函数名称，来找到对应的方法函数进行调用。\n\n#### Runtime 应用\n\n- 交换方法实现\n  场景：当第三方框架或者系统原生方法功能不能满足我们的时候，我们可以在保持系统原有方法功能的基础上，添加额外的功能。\n- 动态添加方法\n  场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。\n- 利用关联对象（AssociatedObject）给分类添加属性\n  场景：分类是不能自定义属性和变量的，这时候可以使用runtime动态添加属性方法\n  原理：给一个类声明属性，其实本质就是给这个类添加关联\n- 遍历类的所有成员变量\n   1)、NSCoding自动归档解档\n  场景：如果一个模型有许多个属性，实现自定义模型数据持久化时，需要对每个属性都实现一遍encodeObject 和decodeObjectForKey方法，比较麻烦。我们可以使用Runtime来解决。\n  原理：用runtime提供的函数遍历Model自身所有属性，并对属性进行encode和decode操作。\n   2)、字典转模型\n  原理：利用Runtime，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值\n  3)、修改textfield的占位文字颜色\n- 利用消息转发机制解决方法找不到的异常问题\n\n### 3、Runloop\n\n#### 什么是 RunLoop？\n\nRunLoop是一种高级的循环机制，让程序持续运行，并处理程序中的各种事件，让线程在需要做事的时候忙起来，不需要的话就让线程休眠。\n\n- RunLoop和线程是绑定在一起的，每条线程都有唯一一个与之对应的RunLoop对象。\n- 不能自己创建RunLoop对象，但是可以获取系统提供的RunLoop对象。\n- 主线程的RunLoop对象是由系统自动创建自动完成启动，而子线程中的RunLoop对象需要我们手动获取并启动。\n- NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，需设置Mode为Common模式。\n\n#### 列表Timer停止\n\n原因在于滑动时当前线程的Runloop切换了mode用于列表滑动，导致timer暂停。滑动列表时，Runloop的mode由原来的Default模式切换到了Event Tracking模式，timer停止工作。\n\nRunloop中的mode主要用来指定事件在runloop中的优先级，有以下几种：\n\n- Default：默认，一般情况下使用\n- Connection：一般系统用来处理NSConnection相关事件，开发者一般用不到\n- Modal：处理modal panels事件\n- Event Tracking：用于处理拖拽和用户交互的模式\n- Common：包括Default，Modal，Event Tracking三大模式，可以处理几乎所有事件\n\n```objective-c\n// 方法一是将timer加入到NSRunloopCommonModes中\n[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];\n\n// 方法二是将timer放到另一个线程中，然后开启另一个线程的runloop\ndispatch_async(dispatch_get_global_queue(0, 0), ^{\n\ttimer = [NSTimer scheduledTimerWithTimeInterval:1 ...];\n\t[[NSRunLoop currentRunLoop] run];\n});\n```\n\n### 4、KVC 和 KVO\n\n#### 什么是 KVC 和 KVO\n\nKVC(key-value-coding)键值编码，是一种间接访问实例变量的方法。提供一种机制来间接访问对象的属性。\n给私有变量赋值。\n\n- 给控件的内部属性赋值（如自定义UITextFiled的clearButton、placeholder的颜色，一般可利用runtime获取控件的内部属性名，Ivar *ivar = class_getInstanceVariable获取实例成员变量）\n  [textField setValue:[UIColor redColor] forKeyPath:@\"placeholderLabel.textColor\"];\n- 结合Runtime，model和字典的转换（setValuesForKeysWithDictionary，class_copyIvarList获取指定类的Ivar成员列表）\n\nKVO是一种基于KVC实现的观察者模式。当指被观察的对象的属性更改了，KVO会以自动或手动方式通知观察者。\n事例：监听 ScrollView 的 contentOffSet属性\n[scrollview addObserver:self forKeyPath:@\"contentOffset\" options: NSKeyValueObservingOptionNew context:nil];\n\n#### KVC的底层实现\n\n- 检查是否存在相应的key的set方法，如果存在，就调用set方法\n- 如果set方法不存在，就会查找与key相同名称并且带下划线的成员变量，如果有，则直接给成员变量属性赋值\n- 如果没有找到_key，就会查找相同名称的属性key，如果有就直接赋值\n- 如果还没有找到，则调用valueForUndefinedKey:和setValue:forUndefinedKey:方法，这些方法的默认实现都是抛出异常，我们可以根据需要重写它们\n\n#### KVO的底层实现\n\n- 当给A类添加KVO的时候，runtime动态的生成了一个子类NSKVONotifying_A，让A类的isa指针指向NSKVONotifying_A类，重写class方法，隐藏对象真实类信息\n- 重写监听属性的setter方法，在setter方法内部调用了Foundation 的 _NSSetObjectValueAndNotify 函数\n  _NSSetObjectValueAndNotify函数内部\n   1) 首先会调用 willChangeValueForKey\n   2) 然后给属性赋值\n   3) 最后调用 didChangeValueForKey\n   4) 最后调用 observer 的 observeValueForKeyPath 去告诉监听器属性值发生了改变 \n- 重写了dealloc做一些 KVO 内存释放\n\n## Swift 相关\n\n### 1、与 OC 比较\n\n#### 共同点\n\n- OC出现过的绝大多数概念，在Swift中继续有效（可能换个术语）\n- Swift和OC共用一套运行时环境，Swift的类型可以桥接到OC，反之亦然\n\n#### 比较\n\n- Swift注重安全，OC注重灵活\n- Swift注重值类型，OC注重指针和引用\n- Swift是静态类型语言，OC是动态类型语言\n- Swift注重面向协议编程、函数式编程、面向对象编程，OC注重面向对象编程\n\n#### 优点\n\n- Swift容易阅读，文件结构和语法简化\n- Swift中有各种方便快捷的高阶函数（函数式编程）\n- Swift中的可选类型，用于所有数据类型，而不仅仅局限于类\n- Swift中的泛型更加方便和通用，OC中只能为集合类型添加泛型\n- Swift细化权限，open > public > internal(默认) > fileprivate > private\n- Swift中独有的元组类型(tuples)，把多个值组合成复合值。元组内的值并不要求是相同类型的\n\n### 2、高级用法\n\n#### 柯里化（Currying）\n\n把接受多个参数的方法变换成接受第一个参数的方法，并且返回接受余下的参数并且返回结果的新方法\n\n```swift\nfunc add(_ v1:Int,_ v2:Int) -> Int {\n    return v1 + v2\n}\nprint(add(1, 2))\n\n// 柯里化(Currying)\nfunc add(_ v:Int) -> (Int) -> Int {\n    return {$0 + v}\n}\nprint(add(1)(2))\n```\n\n#### 关键字mutating\n\n使用 struct 或 enum 实现某协议时，协议的方法前加 mutating 关键字，可以在此方法中修改 struct 或 enum的变量。使用 class 实现协议时，方法前面是不需要加 mutating 修饰的，因为 class 可以随意更改自己的成员变量。\n\n```swift\nprotocol Vehicle {\n   var numberOfWheels:Int{get}\n   mutating func changeNumberOfWheels()\n}\n\nstruct MyCar:Vehicle {\n   var numberOfWheels: Int = 4\n   mutating func changeNumberOfWheels() {\n       numberOfWheels = 4\n   }\n}\n```\n\n#### 元组（Tuple）\n\n元组是swift编程语言中唯一的一种复合类型，他可以将指定有限个数的任何类型一次整理为一个对象，元组中的每一种类型都可以是任何的结构体、枚举或类类型。\n\n```swift\n// 交换输入普通实现：\nfunc swapMe<T>(a: inout T, b: inout T) {\n  let temp = a\n  a = b\n  b = temp\n}\n\n// 交换输入元组实现：\nfunc swapMe<T>(a: inout T, b: inout T) {\n\t(a,b) = (b,a)\n}\n```\n\n#### 操作符\n\n- precedencegroup：定义操作符的优先级\n- associativity：操作符的结合律\n- higherThan、lowerThan：运算符的优先级\n- prefix、infix、postfix：前缀、中缀、后缀运算符\n\n```swift\ninfix operator +++  // 中缀\nfunc +++(left: Int, right: Int) -> Int {\n    return left+right*2\n}\nprint(2+++3) // 8\n\nprefix operator ==+  // 前缀\nprefix func ==+(left: Int) -> Int {\n   return left*2\n}\nprint(==+2) // 4\n\npostfix operator +==  // 后缀\npostfix func +==(right: Int) -> Int {\n   return right*3\n}\nprint(2+==) // 6\n```\n\n#### 输入输出参数（inout）\n\n可变形式参数只能在函数的内部做改变。如果你想函数能够修改一个形式参数的值，而且你想这些改变在函数结束之后依然生效，那么就需要将形式参数定义为输入输出形式参数。\n\n```swift\nvar b = 10\nfunc test(a:inout Int) {\n   a = 20\n}\ntest(a: &b)\nprint(b) //20\n```\n\n#### 嵌套函数\n\n我们可以把函数当成参数或者变量来使用，函数内部嵌套函数。\n\n```swift\nfunc forward(_ forward:Bool) -> (Int) -> Int {\n    \n    func next(_ input:Int) -> Int {\n        input + 1\n    }\n\n    func previous(_ input:Int) -> Int {\n        input - 1\n    }\n  \n    return forward ? next : previous\n}\n```\n\n#### 命名空间\n\nSwift 的命名空间是基于 module 而不是在代码中显式地指明，每个 module 代表了 Swift 中的一个命名空间。也就是说，同一个 target 里的类型名称还是不能相同的。在我们进行 app 开发时，默认添加到 app 的主 target 的内容都是处于同一个命名空间中的，我们可以通过创建 Cocoa (Touch) Framework 的 target 的方法来新建一个 module，这样我们就可以在两个不同的 target 中添加同样名字的类型了。\n\n#### 别名（typealias）\n\n我们可以给一个复杂的难以理解的类型起一个别名，方便我们使用和理解。\n\n```swift\n// Swift 定义 Void 为空的元组\npublic typealias Void = ()\n\n// 函数别名\ntypealias IntFn = (Int,Int) -> Int\nfunc difference(v1:Int,v2:Int) -> Int {\n   v1 - v2\n}\nlet fn:IntFn = difference\nprint(fn(2,1))  //1\n\n// 元组别名\ntypealias Date = (year:Int,month:Int,day:Int)\nfunc test(_ date:Date) {\n   print(date.year)\n}\ntest((2019,10,30))\n```\n\n#### 可变参数\n\n一个可变形式参数可以接受零或者多个`特定类型的值`，可变参数必须是同一类型的。当调用函数的时候你可以利用可变形式参数来声明形式参数可以被传入值的数量是可变的。可以通过在形式参数的类型名称后边插入三个点符号（`...`）来书写可变形式参数。\n\n```swift\nfunc sum(_ numbers:Int...) -> Int{\n   var total = 0\n   for item in numbers {\n       total += item\n   }\n   return total\n}\nsum(1,2,3,4)  // 10\n```\n\n#### 初始化\n\n不同于 Objective-C 的初始化器，Swift 初始化器不返回值。这些初始化器主要的角色就是确保在第一次使用之前某类型的新实例能够正确初始化。\n\n```swift\nclass Person {\n   var age: Int\n   var name: String\n   //指定初始化器\n   init(age:Int, name:String) {\n       self.age = age\n       self.name = name\n   }\n   //便捷初始化器\n   convenience init(age:Int){\n       self.init(age:age,name:\"\")\n   }\n}\n```\n\n- 每一个类至少有一个指定初始化器\n- 默认初始化器总是类的指定初始化器\n- 一个类通常只有一个指定初始化器\n- 指定初始化器必须从他的直系父类调用指定初始化器\n- 便捷初始化器必须从相同的类里调用另一个初始化器\n- 便捷初始化器最终必须调用一个指定初始化器\n\n## 控件使用\n\n### 1、UIView\n\n### 2、UITableView\n\n## 实际应用\n\n### 网络封装\n\n1. 使用xcconfig配置不同环境host\n2. 添加通用的请求类和响应类\n3. 根据后台设计添加处理加密、验签等方法\n4. 封装get、post、upload请求方法\n5. 请求方法传入：响应类泛型、请求路径、请求参数\n6. 请求完成回调：成功（返回响应类型对象）、异常、失败\n7. 异常处理（退出登录、重试机制...）\n8. 添加统一的网络请求hud\n\n### 图片加载\n\n1. 显示placeholder占位图\n2. 以url为数据索引先在内存中查找是否有缓存\n3. 如果没有缓存，通过md5处理过的key来在磁盘查找，找到把的数据加载到内存并显示出来\n4. 如果内存和磁盘中都没有找到，就会向远程服务器发送请求，开始下载图片\n5. 下载完的图片加入缓存并写入到磁盘中\n6. 获取图片的过程是在子线程中进行，在主线程中显示\n\n## APP 架构\n\n### 1、组件化\n\n#### 优点\n\n- 业务分层、解耦，使代码变得可维护\n- 拆分、组织庞大的项目，使项目变得可维护\n- 便于各业务功能拆分、抽离，实现功能复用\n- 业务隔离，实现跨团队开发代码控制和版本风险控制\n- 模块化对代码的封装性、合理性都有一定的要求，提升开发人员编码能力\n- 在维护好组件的情况下，满足不同客户需求（在新的主App中使用当前组件）\n\n#### 实现\n\n- 基础组件：按功能分库，不涉及业务需求，通过接口供业务组件调用\n- 基础UI组件：各个业务模块依赖使用，但需要保持好定制扩展的设计\n- 业务组件：业务功能间相对独立，相互间没有Model共享的依赖\n- 中间件：target-action，url-block，protocol-class\n\n### 2、MVVM\n\n## App 优化\n\n### 1、启动优化\n\n- 删除无用代码\n- 抽象重复代码\n- 第三方库延迟初始化\n- 业务逻辑延迟或异步执行\n- App首页面先展示后渲染\n- Time Profiler查找耗时操作和页面\n\n### 2、网络优化\n\n#### 请求优化\n\n- 使用HttpDNS下发ip列表\n- 根据不同网络设置超时时间\n- 网络环境切换或失败，自动重发\n\n#### 传输优化\n\n- 使用http缓存\n- 文件传输启用Gzip\n- 采用WebP图片格式\n- 采用更好的序列化/反序列化方案\n\n### 3、体积优化\n\n- 开启Bitcode\n- 删除无用资源和代码\n- 对图片资源进行压缩\n- 使用更轻量级的第三方库\n- 使用纯代码进行界面布局\n- 启动图和引导图使用原生绘制或jpg\n- 某些资源文件放在服务器上，按需下载\n\n### 4、性能优化\n\n#### 速度优化\n\n- 耗时操作放入子线程\n- 使用图片缓存，数据缓存\n- 图文混排使用CoreText\n- 使图片适合UIImageView的尺寸\n- 减少离屏渲染，子线程绘制，主线程渲染\n- 减少subviews个数，用layer绘制元素\n- 减少clearColor，maskToBounds，阴影\n\n#### tableview优化\n\n- 使用cell复用机制\n- 不要动态添加视图\n- 图片异步加载并缓存\n- 手动计算高度缓存高度\n- 按需刷新，刷新最小列表单元\n\n","slug":"iOS开发中的知识点","published":1,"updated":"2020-06-18T10:43:54.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bz6000rhb8y2st4bso9","content":"<blockquote>\n<p>iOS开发中的重要知识点，方便自己随时回顾查看，不间断更新。</p>\n</blockquote>\n<h2 id=\"OC-相关\"><a href=\"#OC-相关\" class=\"headerlink\" title=\"OC 相关\"></a>OC 相关</h2><h3 id=\"1、多线程\"><a href=\"#1、多线程\" class=\"headerlink\" title=\"1、多线程\"></a>1、多线程</h3><h4 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h4><h5 id=\"进程：\"><a href=\"#进程：\" class=\"headerlink\" title=\"进程：\"></a>进程：</h5><ul>\n<li><p>进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单元</p>\n</li>\n<li><p>进程是指在系统中正在运行的一个应用程序，就是一段程序的执行过程,我们可以理解为手机上的一个app</p>\n</li>\n<li><p>每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源</p>\n<h5 id=\"线程：\"><a href=\"#线程：\" class=\"headerlink\" title=\"线程：\"></a>线程：</h5></li>\n<li><p>程序执行流的最小单元，线程是进程中的一个实体</p>\n</li>\n<li><p>一个进程要想执行任务，必须至少有一条线程.应用程序启动的时候，系统会默认开启主线程</p>\n<h5 id=\"进程和线程：\"><a href=\"#进程和线程：\" class=\"headerlink\" title=\"进程和线程：\"></a>进程和线程：</h5></li>\n<li><p>线程是进程的执行单元，进程的所有任务都在线程中执行</p>\n</li>\n<li><p>线程是 CPU 分配资源和调度的最小单位</p>\n</li>\n<li><p>一个程序可以对应多个进程(多进程),一个进程中可有多个线程,但至少要有一条线程<br>同一个进程内的线程共享进程资源</p>\n</li>\n</ul>\n<h4 id=\"创建线程方式\"><a href=\"#创建线程方式\" class=\"headerlink\" title=\"创建线程方式\"></a>创建线程方式</h4><ul>\n<li>NSThread面向对象的，需要手动创建线程，不需要手动销毁，子线程间通信很难</li>\n<li>GCD基于C语言，充分利用设备的多核，自动管理线程生命周期，比NSOperation效率高</li>\n<li>NSOperation基于GCD封装，更加面向对象，比GCD多了一些功能，可以添加线程间的依赖</li>\n</ul>\n<h4 id=\"GCD（大中央调度）\"><a href=\"#GCD（大中央调度）\" class=\"headerlink\" title=\"GCD（大中央调度）\"></a>GCD（大中央调度）</h4><ul>\n<li>并发队列（让多个任务并发执行，异步任务下才有效）</li>\n<li>串行队列（任务一个接一个地执行，按照FIFO顺序执行）</li>\n<li>同步任务派发(synchronous，阻塞当前线程，等待任务块Block完成后,函数才能返回,后面的代码才能继续执行)</li>\n<li>异步任务派发(asynchronous，任务添加到队列后，函数立即返回，后面的代码不用等待任务完成后即可执行，异步提交任务执行无序)</li>\n</ul>\n<h4 id=\"NSOpertionQueue\"><a href=\"#NSOpertionQueue\" class=\"headerlink\" title=\"NSOpertionQueue\"></a>NSOpertionQueue</h4><ol>\n<li>初始化NSOpertionQueue</li>\n<li>创建线程队列的NSOpertion</li>\n<li>添加NSOpertion的相关依赖</li>\n<li>添加NSOpertion到NSOpertionQueue</li>\n</ol>\n<h3 id=\"2、Runtime\"><a href=\"#2、Runtime\" class=\"headerlink\" title=\"2、Runtime\"></a>2、Runtime</h3><h4 id=\"Runtime-机制\"><a href=\"#Runtime-机制\" class=\"headerlink\" title=\"Runtime 机制\"></a>Runtime 机制</h4><p>runtime简称运行时。OC是运行时机制，也就是在运行时才做一些处理。<br>例如：C语言在编译的时候就知道要调用哪个方法函数，而OC在编译的时候并不知道要调用哪个方法函数，只有在运行的时候才知道调用的方法函数名称，来找到对应的方法函数进行调用。</p>\n<h4 id=\"Runtime-应用\"><a href=\"#Runtime-应用\" class=\"headerlink\" title=\"Runtime 应用\"></a>Runtime 应用</h4><ul>\n<li>交换方法实现<br>场景：当第三方框架或者系统原生方法功能不能满足我们的时候，我们可以在保持系统原有方法功能的基础上，添加额外的功能。</li>\n<li>动态添加方法<br>场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。</li>\n<li>利用关联对象（AssociatedObject）给分类添加属性<br>场景：分类是不能自定义属性和变量的，这时候可以使用runtime动态添加属性方法<br>原理：给一个类声明属性，其实本质就是给这个类添加关联</li>\n<li>遍历类的所有成员变量<br> 1)、NSCoding自动归档解档<br>场景：如果一个模型有许多个属性，实现自定义模型数据持久化时，需要对每个属性都实现一遍encodeObject 和decodeObjectForKey方法，比较麻烦。我们可以使用Runtime来解决。<br>原理：用runtime提供的函数遍历Model自身所有属性，并对属性进行encode和decode操作。<br> 2)、字典转模型<br>原理：利用Runtime，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值<br>3)、修改textfield的占位文字颜色</li>\n<li>利用消息转发机制解决方法找不到的异常问题</li>\n</ul>\n<h3 id=\"3、Runloop\"><a href=\"#3、Runloop\" class=\"headerlink\" title=\"3、Runloop\"></a>3、Runloop</h3><h4 id=\"什么是-RunLoop？\"><a href=\"#什么是-RunLoop？\" class=\"headerlink\" title=\"什么是 RunLoop？\"></a>什么是 RunLoop？</h4><p>RunLoop是一种高级的循环机制，让程序持续运行，并处理程序中的各种事件，让线程在需要做事的时候忙起来，不需要的话就让线程休眠。</p>\n<ul>\n<li>RunLoop和线程是绑定在一起的，每条线程都有唯一一个与之对应的RunLoop对象。</li>\n<li>不能自己创建RunLoop对象，但是可以获取系统提供的RunLoop对象。</li>\n<li>主线程的RunLoop对象是由系统自动创建自动完成启动，而子线程中的RunLoop对象需要我们手动获取并启动。</li>\n<li>NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，需设置Mode为Common模式。</li>\n</ul>\n<h4 id=\"列表Timer停止\"><a href=\"#列表Timer停止\" class=\"headerlink\" title=\"列表Timer停止\"></a>列表Timer停止</h4><p>原因在于滑动时当前线程的Runloop切换了mode用于列表滑动，导致timer暂停。滑动列表时，Runloop的mode由原来的Default模式切换到了Event Tracking模式，timer停止工作。</p>\n<p>Runloop中的mode主要用来指定事件在runloop中的优先级，有以下几种：</p>\n<ul>\n<li>Default：默认，一般情况下使用</li>\n<li>Connection：一般系统用来处理NSConnection相关事件，开发者一般用不到</li>\n<li>Modal：处理modal panels事件</li>\n<li>Event Tracking：用于处理拖拽和用户交互的模式</li>\n<li>Common：包括Default，Modal，Event Tracking三大模式，可以处理几乎所有事件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 方法一是将timer加入到NSRunloopCommonModes中</span><br><span class=\"line\">[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 方法二是将timer放到另一个线程中，然后开启另一个线程的runloop</span><br><span class=\"line\">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class=\"line\">\ttimer &#x3D; [NSTimer scheduledTimerWithTimeInterval:1 ...];</span><br><span class=\"line\">\t[[NSRunLoop currentRunLoop] run];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、KVC-和-KVO\"><a href=\"#4、KVC-和-KVO\" class=\"headerlink\" title=\"4、KVC 和 KVO\"></a>4、KVC 和 KVO</h3><h4 id=\"什么是-KVC-和-KVO\"><a href=\"#什么是-KVC-和-KVO\" class=\"headerlink\" title=\"什么是 KVC 和 KVO\"></a>什么是 KVC 和 KVO</h4><p>KVC(key-value-coding)键值编码，是一种间接访问实例变量的方法。提供一种机制来间接访问对象的属性。<br>给私有变量赋值。</p>\n<ul>\n<li>给控件的内部属性赋值（如自定义UITextFiled的clearButton、placeholder的颜色，一般可利用runtime获取控件的内部属性名，Ivar *ivar = class_getInstanceVariable获取实例成员变量）<br>[textField setValue:[UIColor redColor] forKeyPath:@”placeholderLabel.textColor”];</li>\n<li>结合Runtime，model和字典的转换（setValuesForKeysWithDictionary，class_copyIvarList获取指定类的Ivar成员列表）</li>\n</ul>\n<p>KVO是一种基于KVC实现的观察者模式。当指被观察的对象的属性更改了，KVO会以自动或手动方式通知观察者。<br>事例：监听 ScrollView 的 contentOffSet属性<br>[scrollview addObserver:self forKeyPath:@”contentOffset” options: NSKeyValueObservingOptionNew context:nil];</p>\n<h4 id=\"KVC的底层实现\"><a href=\"#KVC的底层实现\" class=\"headerlink\" title=\"KVC的底层实现\"></a>KVC的底层实现</h4><ul>\n<li>检查是否存在相应的key的set方法，如果存在，就调用set方法</li>\n<li>如果set方法不存在，就会查找与key相同名称并且带下划线的成员变量，如果有，则直接给成员变量属性赋值</li>\n<li>如果没有找到_key，就会查找相同名称的属性key，如果有就直接赋值</li>\n<li>如果还没有找到，则调用valueForUndefinedKey:和setValue:forUndefinedKey:方法，这些方法的默认实现都是抛出异常，我们可以根据需要重写它们</li>\n</ul>\n<h4 id=\"KVO的底层实现\"><a href=\"#KVO的底层实现\" class=\"headerlink\" title=\"KVO的底层实现\"></a>KVO的底层实现</h4><ul>\n<li>当给A类添加KVO的时候，runtime动态的生成了一个子类NSKVONotifying_A，让A类的isa指针指向NSKVONotifying_A类，重写class方法，隐藏对象真实类信息</li>\n<li>重写监听属性的setter方法，在setter方法内部调用了Foundation 的 _NSSetObjectValueAndNotify 函数<br>_NSSetObjectValueAndNotify函数内部<br> 1) 首先会调用 willChangeValueForKey<br> 2) 然后给属性赋值<br> 3) 最后调用 didChangeValueForKey<br> 4) 最后调用 observer 的 observeValueForKeyPath 去告诉监听器属性值发生了改变 </li>\n<li>重写了dealloc做一些 KVO 内存释放</li>\n</ul>\n<h2 id=\"Swift-相关\"><a href=\"#Swift-相关\" class=\"headerlink\" title=\"Swift 相关\"></a>Swift 相关</h2><h3 id=\"1、与-OC-比较\"><a href=\"#1、与-OC-比较\" class=\"headerlink\" title=\"1、与 OC 比较\"></a>1、与 OC 比较</h3><h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><ul>\n<li>OC出现过的绝大多数概念，在Swift中继续有效（可能换个术语）</li>\n<li>Swift和OC共用一套运行时环境，Swift的类型可以桥接到OC，反之亦然</li>\n</ul>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><ul>\n<li>Swift注重安全，OC注重灵活</li>\n<li>Swift注重值类型，OC注重指针和引用</li>\n<li>Swift是静态类型语言，OC是动态类型语言</li>\n<li>Swift注重面向协议编程、函数式编程、面向对象编程，OC注重面向对象编程</li>\n</ul>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>Swift容易阅读，文件结构和语法简化</li>\n<li>Swift中有各种方便快捷的高阶函数（函数式编程）</li>\n<li>Swift中的可选类型，用于所有数据类型，而不仅仅局限于类</li>\n<li>Swift中的泛型更加方便和通用，OC中只能为集合类型添加泛型</li>\n<li>Swift细化权限，open &gt; public &gt; internal(默认) &gt; fileprivate &gt; private</li>\n<li>Swift中独有的元组类型(tuples)，把多个值组合成复合值。元组内的值并不要求是相同类型的</li>\n</ul>\n<h3 id=\"2、高级用法\"><a href=\"#2、高级用法\" class=\"headerlink\" title=\"2、高级用法\"></a>2、高级用法</h3><h4 id=\"柯里化（Currying）\"><a href=\"#柯里化（Currying）\" class=\"headerlink\" title=\"柯里化（Currying）\"></a>柯里化（Currying）</h4><p>把接受多个参数的方法变换成接受第一个参数的方法，并且返回接受余下的参数并且返回结果的新方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"number\">_</span> v1:Int,<span class=\"number\">_</span> v2:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 + v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化(Currying)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"number\">_</span> v:Int)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;$<span class=\"number\">0</span> + v&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关键字mutating\"><a href=\"#关键字mutating\" class=\"headerlink\" title=\"关键字mutating\"></a>关键字mutating</h4><p>使用 struct 或 enum 实现某协议时，协议的方法前加 mutating 关键字，可以在此方法中修改 struct 或 enum的变量。使用 class 实现协议时，方法前面是不需要加 mutating 修饰的，因为 class 可以随意更改自己的成员变量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> numberOfWheels:<span class=\"type\">Int</span>&#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">   <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeNumberOfWheels</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyCar</span>:<span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> numberOfWheels: <span class=\"type\">Int</span> = <span class=\"number\">4</span></span><br><span class=\"line\">   <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeNumberOfWheels</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       numberOfWheels = <span class=\"number\">4</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组（Tuple）\"><a href=\"#元组（Tuple）\" class=\"headerlink\" title=\"元组（Tuple）\"></a>元组（Tuple）</h4><p>元组是swift编程语言中唯一的一种复合类型，他可以将指定有限个数的任何类型一次整理为一个对象，元组中的每一种类型都可以是任何的结构体、枚举或类类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 交换输入普通实现：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapMe</span>&lt;T&gt;<span class=\"params\">(a: <span class=\"keyword\">inout</span> T, b: <span class=\"keyword\">inout</span> T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = a</span><br><span class=\"line\">  a = b</span><br><span class=\"line\">  b = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换输入元组实现：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapMe</span>&lt;T&gt;<span class=\"params\">(a: <span class=\"keyword\">inout</span> T, b: <span class=\"keyword\">inout</span> T)</span></span> &#123;</span><br><span class=\"line\">\t(a,b) = (b,a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><ul>\n<li>precedencegroup：定义操作符的优先级</li>\n<li>associativity：操作符的结合律</li>\n<li>higherThan、lowerThan：运算符的优先级</li>\n<li>prefix、infix、postfix：前缀、中缀、后缀运算符</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> +++  <span class=\"comment\">// 中缀</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> +++<span class=\"params\">(<span class=\"keyword\">left</span>: Int, <span class=\"keyword\">right</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">left</span>+<span class=\"keyword\">right</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span>+++<span class=\"number\">3</span>) <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">operator</span> ==+  <span class=\"comment\">// 前缀</span></span><br><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"function\"><span class=\"keyword\">func</span> ==+<span class=\"params\">(<span class=\"keyword\">left</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">left</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(==+<span class=\"number\">2</span>) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">postfix</span> <span class=\"keyword\">operator</span> +==  <span class=\"comment\">// 后缀</span></span><br><span class=\"line\"><span class=\"keyword\">postfix</span> <span class=\"function\"><span class=\"keyword\">func</span> +==<span class=\"params\">(<span class=\"keyword\">right</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">right</span>*<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span>+==) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输入输出参数（inout）\"><a href=\"#输入输出参数（inout）\" class=\"headerlink\" title=\"输入输出参数（inout）\"></a>输入输出参数（inout）</h4><p>可变形式参数只能在函数的内部做改变。如果你想函数能够修改一个形式参数的值，而且你想这些改变在函数结束之后依然生效，那么就需要将形式参数定义为输入输出形式参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(a:<span class=\"keyword\">inout</span> Int)</span></span> &#123;</span><br><span class=\"line\">   a = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(a: &amp;b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h4><p>我们可以把函数当成参数或者变量来使用，函数内部嵌套函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">forward</span><span class=\"params\">(<span class=\"number\">_</span> forward:Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"number\">_</span> input:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        input + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">previous</span><span class=\"params\">(<span class=\"number\">_</span> input:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        input - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> forward ? next : previous</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><p>Swift 的命名空间是基于 module 而不是在代码中显式地指明，每个 module 代表了 Swift 中的一个命名空间。也就是说，同一个 target 里的类型名称还是不能相同的。在我们进行 app 开发时，默认添加到 app 的主 target 的内容都是处于同一个命名空间中的，我们可以通过创建 Cocoa (Touch) Framework 的 target 的方法来新建一个 module，这样我们就可以在两个不同的 target 中添加同样名字的类型了。</p>\n<h4 id=\"别名（typealias）\"><a href=\"#别名（typealias）\" class=\"headerlink\" title=\"别名（typealias）\"></a>别名（typealias）</h4><p>我们可以给一个复杂的难以理解的类型起一个别名，方便我们使用和理解。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Swift 定义 Void 为空的元组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Void</span> = ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数别名</span></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">IntFn</span> = (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">difference</span><span class=\"params\">(v1:Int,v2:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">   v1 - v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fn:<span class=\"type\">IntFn</span> = difference</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fn(<span class=\"number\">2</span>,<span class=\"number\">1</span>))  <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元组别名</span></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">Date</span> = (year:<span class=\"type\">Int</span>,month:<span class=\"type\">Int</span>,day:<span class=\"type\">Int</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"number\">_</span> date:Date)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(date.year)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test((<span class=\"number\">2019</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h4><p>一个可变形式参数可以接受零或者多个<code>特定类型的值</code>，可变参数必须是同一类型的。当调用函数的时候你可以利用可变形式参数来声明形式参数可以被传入值的数量是可变的。可以通过在形式参数的类型名称后边插入三个点符号（<code>...</code>）来书写可变形式参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"number\">_</span> numbers:Int...)</span></span> -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> total = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">       total += item</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> total</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>不同于 Objective-C 的初始化器，Swift 初始化器不返回值。这些初始化器主要的角色就是确保在第一次使用之前某类型的新实例能够正确初始化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"comment\">//指定初始化器</span></span><br><span class=\"line\">   <span class=\"keyword\">init</span>(age:<span class=\"type\">Int</span>, name:<span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.age = age</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//便捷初始化器</span></span><br><span class=\"line\">   <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(age:<span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(age:age,name:<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每一个类至少有一个指定初始化器</li>\n<li>默认初始化器总是类的指定初始化器</li>\n<li>一个类通常只有一个指定初始化器</li>\n<li>指定初始化器必须从他的直系父类调用指定初始化器</li>\n<li>便捷初始化器必须从相同的类里调用另一个初始化器</li>\n<li>便捷初始化器最终必须调用一个指定初始化器</li>\n</ul>\n<h2 id=\"控件使用\"><a href=\"#控件使用\" class=\"headerlink\" title=\"控件使用\"></a>控件使用</h2><h3 id=\"1、UIView\"><a href=\"#1、UIView\" class=\"headerlink\" title=\"1、UIView\"></a>1、UIView</h3><h3 id=\"2、UITableView\"><a href=\"#2、UITableView\" class=\"headerlink\" title=\"2、UITableView\"></a>2、UITableView</h3><h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"网络封装\"><a href=\"#网络封装\" class=\"headerlink\" title=\"网络封装\"></a>网络封装</h3><ol>\n<li>使用xcconfig配置不同环境host</li>\n<li>添加通用的请求类和响应类</li>\n<li>根据后台设计添加处理加密、验签等方法</li>\n<li>封装get、post、upload请求方法</li>\n<li>请求方法传入：响应类泛型、请求路径、请求参数</li>\n<li>请求完成回调：成功（返回响应类型对象）、异常、失败</li>\n<li>异常处理（退出登录、重试机制…）</li>\n<li>添加统一的网络请求hud</li>\n</ol>\n<h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><ol>\n<li>显示placeholder占位图</li>\n<li>以url为数据索引先在内存中查找是否有缓存</li>\n<li>如果没有缓存，通过md5处理过的key来在磁盘查找，找到把的数据加载到内存并显示出来</li>\n<li>如果内存和磁盘中都没有找到，就会向远程服务器发送请求，开始下载图片</li>\n<li>下载完的图片加入缓存并写入到磁盘中</li>\n<li>获取图片的过程是在子线程中进行，在主线程中显示</li>\n</ol>\n<h2 id=\"APP-架构\"><a href=\"#APP-架构\" class=\"headerlink\" title=\"APP 架构\"></a>APP 架构</h2><h3 id=\"1、组件化\"><a href=\"#1、组件化\" class=\"headerlink\" title=\"1、组件化\"></a>1、组件化</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>业务分层、解耦，使代码变得可维护</li>\n<li>拆分、组织庞大的项目，使项目变得可维护</li>\n<li>便于各业务功能拆分、抽离，实现功能复用</li>\n<li>业务隔离，实现跨团队开发代码控制和版本风险控制</li>\n<li>模块化对代码的封装性、合理性都有一定的要求，提升开发人员编码能力</li>\n<li>在维护好组件的情况下，满足不同客户需求（在新的主App中使用当前组件）</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>基础组件：按功能分库，不涉及业务需求，通过接口供业务组件调用</li>\n<li>基础UI组件：各个业务模块依赖使用，但需要保持好定制扩展的设计</li>\n<li>业务组件：业务功能间相对独立，相互间没有Model共享的依赖</li>\n<li>中间件：target-action，url-block，protocol-class</li>\n</ul>\n<h3 id=\"2、MVVM\"><a href=\"#2、MVVM\" class=\"headerlink\" title=\"2、MVVM\"></a>2、MVVM</h3><h2 id=\"App-优化\"><a href=\"#App-优化\" class=\"headerlink\" title=\"App 优化\"></a>App 优化</h2><h3 id=\"1、启动优化\"><a href=\"#1、启动优化\" class=\"headerlink\" title=\"1、启动优化\"></a>1、启动优化</h3><ul>\n<li>删除无用代码</li>\n<li>抽象重复代码</li>\n<li>第三方库延迟初始化</li>\n<li>业务逻辑延迟或异步执行</li>\n<li>App首页面先展示后渲染</li>\n<li>Time Profiler查找耗时操作和页面</li>\n</ul>\n<h3 id=\"2、网络优化\"><a href=\"#2、网络优化\" class=\"headerlink\" title=\"2、网络优化\"></a>2、网络优化</h3><h4 id=\"请求优化\"><a href=\"#请求优化\" class=\"headerlink\" title=\"请求优化\"></a>请求优化</h4><ul>\n<li>使用HttpDNS下发ip列表</li>\n<li>根据不同网络设置超时时间</li>\n<li>网络环境切换或失败，自动重发</li>\n</ul>\n<h4 id=\"传输优化\"><a href=\"#传输优化\" class=\"headerlink\" title=\"传输优化\"></a>传输优化</h4><ul>\n<li>使用http缓存</li>\n<li>文件传输启用Gzip</li>\n<li>采用WebP图片格式</li>\n<li>采用更好的序列化/反序列化方案</li>\n</ul>\n<h3 id=\"3、体积优化\"><a href=\"#3、体积优化\" class=\"headerlink\" title=\"3、体积优化\"></a>3、体积优化</h3><ul>\n<li>开启Bitcode</li>\n<li>删除无用资源和代码</li>\n<li>对图片资源进行压缩</li>\n<li>使用更轻量级的第三方库</li>\n<li>使用纯代码进行界面布局</li>\n<li>启动图和引导图使用原生绘制或jpg</li>\n<li>某些资源文件放在服务器上，按需下载</li>\n</ul>\n<h3 id=\"4、性能优化\"><a href=\"#4、性能优化\" class=\"headerlink\" title=\"4、性能优化\"></a>4、性能优化</h3><h4 id=\"速度优化\"><a href=\"#速度优化\" class=\"headerlink\" title=\"速度优化\"></a>速度优化</h4><ul>\n<li>耗时操作放入子线程</li>\n<li>使用图片缓存，数据缓存</li>\n<li>图文混排使用CoreText</li>\n<li>使图片适合UIImageView的尺寸</li>\n<li>减少离屏渲染，子线程绘制，主线程渲染</li>\n<li>减少subviews个数，用layer绘制元素</li>\n<li>减少clearColor，maskToBounds，阴影</li>\n</ul>\n<h4 id=\"tableview优化\"><a href=\"#tableview优化\" class=\"headerlink\" title=\"tableview优化\"></a>tableview优化</h4><ul>\n<li>使用cell复用机制</li>\n<li>不要动态添加视图</li>\n<li>图片异步加载并缓存</li>\n<li>手动计算高度缓存高度</li>\n<li>按需刷新，刷新最小列表单元</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>iOS开发中的重要知识点，方便自己随时回顾查看，不间断更新。</p>\n</blockquote>\n<h2 id=\"OC-相关\"><a href=\"#OC-相关\" class=\"headerlink\" title=\"OC 相关\"></a>OC 相关</h2><h3 id=\"1、多线程\"><a href=\"#1、多线程\" class=\"headerlink\" title=\"1、多线程\"></a>1、多线程</h3><h4 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h4><h5 id=\"进程：\"><a href=\"#进程：\" class=\"headerlink\" title=\"进程：\"></a>进程：</h5><ul>\n<li><p>进程是一个具有一定独立功能的程序关于某次数据集合的一次运行活动，它是操作系统分配资源的基本单元</p>\n</li>\n<li><p>进程是指在系统中正在运行的一个应用程序，就是一段程序的执行过程,我们可以理解为手机上的一个app</p>\n</li>\n<li><p>每个进程之间是独立的，每个进程均运行在其专用且受保护的内存空间内，拥有独立运行所需的全部资源</p>\n<h5 id=\"线程：\"><a href=\"#线程：\" class=\"headerlink\" title=\"线程：\"></a>线程：</h5></li>\n<li><p>程序执行流的最小单元，线程是进程中的一个实体</p>\n</li>\n<li><p>一个进程要想执行任务，必须至少有一条线程.应用程序启动的时候，系统会默认开启主线程</p>\n<h5 id=\"进程和线程：\"><a href=\"#进程和线程：\" class=\"headerlink\" title=\"进程和线程：\"></a>进程和线程：</h5></li>\n<li><p>线程是进程的执行单元，进程的所有任务都在线程中执行</p>\n</li>\n<li><p>线程是 CPU 分配资源和调度的最小单位</p>\n</li>\n<li><p>一个程序可以对应多个进程(多进程),一个进程中可有多个线程,但至少要有一条线程<br>同一个进程内的线程共享进程资源</p>\n</li>\n</ul>\n<h4 id=\"创建线程方式\"><a href=\"#创建线程方式\" class=\"headerlink\" title=\"创建线程方式\"></a>创建线程方式</h4><ul>\n<li>NSThread面向对象的，需要手动创建线程，不需要手动销毁，子线程间通信很难</li>\n<li>GCD基于C语言，充分利用设备的多核，自动管理线程生命周期，比NSOperation效率高</li>\n<li>NSOperation基于GCD封装，更加面向对象，比GCD多了一些功能，可以添加线程间的依赖</li>\n</ul>\n<h4 id=\"GCD（大中央调度）\"><a href=\"#GCD（大中央调度）\" class=\"headerlink\" title=\"GCD（大中央调度）\"></a>GCD（大中央调度）</h4><ul>\n<li>并发队列（让多个任务并发执行，异步任务下才有效）</li>\n<li>串行队列（任务一个接一个地执行，按照FIFO顺序执行）</li>\n<li>同步任务派发(synchronous，阻塞当前线程，等待任务块Block完成后,函数才能返回,后面的代码才能继续执行)</li>\n<li>异步任务派发(asynchronous，任务添加到队列后，函数立即返回，后面的代码不用等待任务完成后即可执行，异步提交任务执行无序)</li>\n</ul>\n<h4 id=\"NSOpertionQueue\"><a href=\"#NSOpertionQueue\" class=\"headerlink\" title=\"NSOpertionQueue\"></a>NSOpertionQueue</h4><ol>\n<li>初始化NSOpertionQueue</li>\n<li>创建线程队列的NSOpertion</li>\n<li>添加NSOpertion的相关依赖</li>\n<li>添加NSOpertion到NSOpertionQueue</li>\n</ol>\n<h3 id=\"2、Runtime\"><a href=\"#2、Runtime\" class=\"headerlink\" title=\"2、Runtime\"></a>2、Runtime</h3><h4 id=\"Runtime-机制\"><a href=\"#Runtime-机制\" class=\"headerlink\" title=\"Runtime 机制\"></a>Runtime 机制</h4><p>runtime简称运行时。OC是运行时机制，也就是在运行时才做一些处理。<br>例如：C语言在编译的时候就知道要调用哪个方法函数，而OC在编译的时候并不知道要调用哪个方法函数，只有在运行的时候才知道调用的方法函数名称，来找到对应的方法函数进行调用。</p>\n<h4 id=\"Runtime-应用\"><a href=\"#Runtime-应用\" class=\"headerlink\" title=\"Runtime 应用\"></a>Runtime 应用</h4><ul>\n<li>交换方法实现<br>场景：当第三方框架或者系统原生方法功能不能满足我们的时候，我们可以在保持系统原有方法功能的基础上，添加额外的功能。</li>\n<li>动态添加方法<br>场景：如果一个类方法非常多，加载类到内存的时候也比较耗费资源，需要给每个方法生成映射表，可以使用动态给某个类，添加方法解决。</li>\n<li>利用关联对象（AssociatedObject）给分类添加属性<br>场景：分类是不能自定义属性和变量的，这时候可以使用runtime动态添加属性方法<br>原理：给一个类声明属性，其实本质就是给这个类添加关联</li>\n<li>遍历类的所有成员变量<br> 1)、NSCoding自动归档解档<br>场景：如果一个模型有许多个属性，实现自定义模型数据持久化时，需要对每个属性都实现一遍encodeObject 和decodeObjectForKey方法，比较麻烦。我们可以使用Runtime来解决。<br>原理：用runtime提供的函数遍历Model自身所有属性，并对属性进行encode和decode操作。<br> 2)、字典转模型<br>原理：利用Runtime，遍历模型中所有属性，根据模型的属性名，去字典中查找key，取出对应的值，给模型的属性赋值<br>3)、修改textfield的占位文字颜色</li>\n<li>利用消息转发机制解决方法找不到的异常问题</li>\n</ul>\n<h3 id=\"3、Runloop\"><a href=\"#3、Runloop\" class=\"headerlink\" title=\"3、Runloop\"></a>3、Runloop</h3><h4 id=\"什么是-RunLoop？\"><a href=\"#什么是-RunLoop？\" class=\"headerlink\" title=\"什么是 RunLoop？\"></a>什么是 RunLoop？</h4><p>RunLoop是一种高级的循环机制，让程序持续运行，并处理程序中的各种事件，让线程在需要做事的时候忙起来，不需要的话就让线程休眠。</p>\n<ul>\n<li>RunLoop和线程是绑定在一起的，每条线程都有唯一一个与之对应的RunLoop对象。</li>\n<li>不能自己创建RunLoop对象，但是可以获取系统提供的RunLoop对象。</li>\n<li>主线程的RunLoop对象是由系统自动创建自动完成启动，而子线程中的RunLoop对象需要我们手动获取并启动。</li>\n<li>NSRunLoop提供了一个添加NSTimer的方法，可以指定Mode，如果要让任何情况下都回调，需设置Mode为Common模式。</li>\n</ul>\n<h4 id=\"列表Timer停止\"><a href=\"#列表Timer停止\" class=\"headerlink\" title=\"列表Timer停止\"></a>列表Timer停止</h4><p>原因在于滑动时当前线程的Runloop切换了mode用于列表滑动，导致timer暂停。滑动列表时，Runloop的mode由原来的Default模式切换到了Event Tracking模式，timer停止工作。</p>\n<p>Runloop中的mode主要用来指定事件在runloop中的优先级，有以下几种：</p>\n<ul>\n<li>Default：默认，一般情况下使用</li>\n<li>Connection：一般系统用来处理NSConnection相关事件，开发者一般用不到</li>\n<li>Modal：处理modal panels事件</li>\n<li>Event Tracking：用于处理拖拽和用户交互的模式</li>\n<li>Common：包括Default，Modal，Event Tracking三大模式，可以处理几乎所有事件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 方法一是将timer加入到NSRunloopCommonModes中</span><br><span class=\"line\">[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 方法二是将timer放到另一个线程中，然后开启另一个线程的runloop</span><br><span class=\"line\">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</span><br><span class=\"line\">\ttimer &#x3D; [NSTimer scheduledTimerWithTimeInterval:1 ...];</span><br><span class=\"line\">\t[[NSRunLoop currentRunLoop] run];</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、KVC-和-KVO\"><a href=\"#4、KVC-和-KVO\" class=\"headerlink\" title=\"4、KVC 和 KVO\"></a>4、KVC 和 KVO</h3><h4 id=\"什么是-KVC-和-KVO\"><a href=\"#什么是-KVC-和-KVO\" class=\"headerlink\" title=\"什么是 KVC 和 KVO\"></a>什么是 KVC 和 KVO</h4><p>KVC(key-value-coding)键值编码，是一种间接访问实例变量的方法。提供一种机制来间接访问对象的属性。<br>给私有变量赋值。</p>\n<ul>\n<li>给控件的内部属性赋值（如自定义UITextFiled的clearButton、placeholder的颜色，一般可利用runtime获取控件的内部属性名，Ivar *ivar = class_getInstanceVariable获取实例成员变量）<br>[textField setValue:[UIColor redColor] forKeyPath:@”placeholderLabel.textColor”];</li>\n<li>结合Runtime，model和字典的转换（setValuesForKeysWithDictionary，class_copyIvarList获取指定类的Ivar成员列表）</li>\n</ul>\n<p>KVO是一种基于KVC实现的观察者模式。当指被观察的对象的属性更改了，KVO会以自动或手动方式通知观察者。<br>事例：监听 ScrollView 的 contentOffSet属性<br>[scrollview addObserver:self forKeyPath:@”contentOffset” options: NSKeyValueObservingOptionNew context:nil];</p>\n<h4 id=\"KVC的底层实现\"><a href=\"#KVC的底层实现\" class=\"headerlink\" title=\"KVC的底层实现\"></a>KVC的底层实现</h4><ul>\n<li>检查是否存在相应的key的set方法，如果存在，就调用set方法</li>\n<li>如果set方法不存在，就会查找与key相同名称并且带下划线的成员变量，如果有，则直接给成员变量属性赋值</li>\n<li>如果没有找到_key，就会查找相同名称的属性key，如果有就直接赋值</li>\n<li>如果还没有找到，则调用valueForUndefinedKey:和setValue:forUndefinedKey:方法，这些方法的默认实现都是抛出异常，我们可以根据需要重写它们</li>\n</ul>\n<h4 id=\"KVO的底层实现\"><a href=\"#KVO的底层实现\" class=\"headerlink\" title=\"KVO的底层实现\"></a>KVO的底层实现</h4><ul>\n<li>当给A类添加KVO的时候，runtime动态的生成了一个子类NSKVONotifying_A，让A类的isa指针指向NSKVONotifying_A类，重写class方法，隐藏对象真实类信息</li>\n<li>重写监听属性的setter方法，在setter方法内部调用了Foundation 的 _NSSetObjectValueAndNotify 函数<br>_NSSetObjectValueAndNotify函数内部<br> 1) 首先会调用 willChangeValueForKey<br> 2) 然后给属性赋值<br> 3) 最后调用 didChangeValueForKey<br> 4) 最后调用 observer 的 observeValueForKeyPath 去告诉监听器属性值发生了改变 </li>\n<li>重写了dealloc做一些 KVO 内存释放</li>\n</ul>\n<h2 id=\"Swift-相关\"><a href=\"#Swift-相关\" class=\"headerlink\" title=\"Swift 相关\"></a>Swift 相关</h2><h3 id=\"1、与-OC-比较\"><a href=\"#1、与-OC-比较\" class=\"headerlink\" title=\"1、与 OC 比较\"></a>1、与 OC 比较</h3><h4 id=\"共同点\"><a href=\"#共同点\" class=\"headerlink\" title=\"共同点\"></a>共同点</h4><ul>\n<li>OC出现过的绝大多数概念，在Swift中继续有效（可能换个术语）</li>\n<li>Swift和OC共用一套运行时环境，Swift的类型可以桥接到OC，反之亦然</li>\n</ul>\n<h4 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h4><ul>\n<li>Swift注重安全，OC注重灵活</li>\n<li>Swift注重值类型，OC注重指针和引用</li>\n<li>Swift是静态类型语言，OC是动态类型语言</li>\n<li>Swift注重面向协议编程、函数式编程、面向对象编程，OC注重面向对象编程</li>\n</ul>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>Swift容易阅读，文件结构和语法简化</li>\n<li>Swift中有各种方便快捷的高阶函数（函数式编程）</li>\n<li>Swift中的可选类型，用于所有数据类型，而不仅仅局限于类</li>\n<li>Swift中的泛型更加方便和通用，OC中只能为集合类型添加泛型</li>\n<li>Swift细化权限，open &gt; public &gt; internal(默认) &gt; fileprivate &gt; private</li>\n<li>Swift中独有的元组类型(tuples)，把多个值组合成复合值。元组内的值并不要求是相同类型的</li>\n</ul>\n<h3 id=\"2、高级用法\"><a href=\"#2、高级用法\" class=\"headerlink\" title=\"2、高级用法\"></a>2、高级用法</h3><h4 id=\"柯里化（Currying）\"><a href=\"#柯里化（Currying）\" class=\"headerlink\" title=\"柯里化（Currying）\"></a>柯里化（Currying）</h4><p>把接受多个参数的方法变换成接受第一个参数的方法，并且返回接受余下的参数并且返回结果的新方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"number\">_</span> v1:Int,<span class=\"number\">_</span> v2:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1 + v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化(Currying)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"number\">_</span> v:Int)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;$<span class=\"number\">0</span> + v&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(add(<span class=\"number\">1</span>)(<span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"关键字mutating\"><a href=\"#关键字mutating\" class=\"headerlink\" title=\"关键字mutating\"></a>关键字mutating</h4><p>使用 struct 或 enum 实现某协议时，协议的方法前加 mutating 关键字，可以在此方法中修改 struct 或 enum的变量。使用 class 实现协议时，方法前面是不需要加 mutating 修饰的，因为 class 可以随意更改自己的成员变量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> numberOfWheels:<span class=\"type\">Int</span>&#123;<span class=\"keyword\">get</span>&#125;</span><br><span class=\"line\">   <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeNumberOfWheels</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">MyCar</span>:<span class=\"title\">Vehicle</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> numberOfWheels: <span class=\"type\">Int</span> = <span class=\"number\">4</span></span><br><span class=\"line\">   <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">changeNumberOfWheels</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       numberOfWheels = <span class=\"number\">4</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组（Tuple）\"><a href=\"#元组（Tuple）\" class=\"headerlink\" title=\"元组（Tuple）\"></a>元组（Tuple）</h4><p>元组是swift编程语言中唯一的一种复合类型，他可以将指定有限个数的任何类型一次整理为一个对象，元组中的每一种类型都可以是任何的结构体、枚举或类类型。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 交换输入普通实现：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapMe</span>&lt;T&gt;<span class=\"params\">(a: <span class=\"keyword\">inout</span> T, b: <span class=\"keyword\">inout</span> T)</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> temp = a</span><br><span class=\"line\">  a = b</span><br><span class=\"line\">  b = temp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交换输入元组实现：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapMe</span>&lt;T&gt;<span class=\"params\">(a: <span class=\"keyword\">inout</span> T, b: <span class=\"keyword\">inout</span> T)</span></span> &#123;</span><br><span class=\"line\">\t(a,b) = (b,a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><ul>\n<li>precedencegroup：定义操作符的优先级</li>\n<li>associativity：操作符的结合律</li>\n<li>higherThan、lowerThan：运算符的优先级</li>\n<li>prefix、infix、postfix：前缀、中缀、后缀运算符</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">infix</span> <span class=\"keyword\">operator</span> +++  <span class=\"comment\">// 中缀</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> +++<span class=\"params\">(<span class=\"keyword\">left</span>: Int, <span class=\"keyword\">right</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">left</span>+<span class=\"keyword\">right</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span>+++<span class=\"number\">3</span>) <span class=\"comment\">// 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"keyword\">operator</span> ==+  <span class=\"comment\">// 前缀</span></span><br><span class=\"line\"><span class=\"keyword\">prefix</span> <span class=\"function\"><span class=\"keyword\">func</span> ==+<span class=\"params\">(<span class=\"keyword\">left</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">left</span>*<span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(==+<span class=\"number\">2</span>) <span class=\"comment\">// 4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">postfix</span> <span class=\"keyword\">operator</span> +==  <span class=\"comment\">// 后缀</span></span><br><span class=\"line\"><span class=\"keyword\">postfix</span> <span class=\"function\"><span class=\"keyword\">func</span> +==<span class=\"params\">(<span class=\"keyword\">right</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">right</span>*<span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">2</span>+==) <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输入输出参数（inout）\"><a href=\"#输入输出参数（inout）\" class=\"headerlink\" title=\"输入输出参数（inout）\"></a>输入输出参数（inout）</h4><p>可变形式参数只能在函数的内部做改变。如果你想函数能够修改一个形式参数的值，而且你想这些改变在函数结束之后依然生效，那么就需要将形式参数定义为输入输出形式参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(a:<span class=\"keyword\">inout</span> Int)</span></span> &#123;</span><br><span class=\"line\">   a = <span class=\"number\">20</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(a: &amp;b)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b) <span class=\"comment\">//20</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h4><p>我们可以把函数当成参数或者变量来使用，函数内部嵌套函数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">forward</span><span class=\"params\">(<span class=\"number\">_</span> forward:Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">(<span class=\"number\">_</span> input:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        input + <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">previous</span><span class=\"params\">(<span class=\"number\">_</span> input:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">        input - <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> forward ? next : previous</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><p>Swift 的命名空间是基于 module 而不是在代码中显式地指明，每个 module 代表了 Swift 中的一个命名空间。也就是说，同一个 target 里的类型名称还是不能相同的。在我们进行 app 开发时，默认添加到 app 的主 target 的内容都是处于同一个命名空间中的，我们可以通过创建 Cocoa (Touch) Framework 的 target 的方法来新建一个 module，这样我们就可以在两个不同的 target 中添加同样名字的类型了。</p>\n<h4 id=\"别名（typealias）\"><a href=\"#别名（typealias）\" class=\"headerlink\" title=\"别名（typealias）\"></a>别名（typealias）</h4><p>我们可以给一个复杂的难以理解的类型起一个别名，方便我们使用和理解。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Swift 定义 Void 为空的元组</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">typealias</span> <span class=\"type\">Void</span> = ()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数别名</span></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">IntFn</span> = (<span class=\"type\">Int</span>,<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">difference</span><span class=\"params\">(v1:Int,v2:Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">   v1 - v2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fn:<span class=\"type\">IntFn</span> = difference</span><br><span class=\"line\"><span class=\"built_in\">print</span>(fn(<span class=\"number\">2</span>,<span class=\"number\">1</span>))  <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 元组别名</span></span><br><span class=\"line\"><span class=\"keyword\">typealias</span> <span class=\"type\">Date</span> = (year:<span class=\"type\">Int</span>,month:<span class=\"type\">Int</span>,day:<span class=\"type\">Int</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">test</span><span class=\"params\">(<span class=\"number\">_</span> date:Date)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">print</span>(date.year)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test((<span class=\"number\">2019</span>,<span class=\"number\">10</span>,<span class=\"number\">30</span>))</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h4><p>一个可变形式参数可以接受零或者多个<code>特定类型的值</code>，可变参数必须是同一类型的。当调用函数的时候你可以利用可变形式参数来声明形式参数可以被传入值的数量是可变的。可以通过在形式参数的类型名称后边插入三个点符号（<code>...</code>）来书写可变形式参数。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"number\">_</span> numbers:Int...)</span></span> -&gt; <span class=\"type\">Int</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> total = <span class=\"number\">0</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">       total += item</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> total</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)  <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h4><p>不同于 Objective-C 的初始化器，Swift 初始化器不返回值。这些初始化器主要的角色就是确保在第一次使用之前某类型的新实例能够正确初始化。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></span><br><span class=\"line\">   <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></span><br><span class=\"line\">   <span class=\"comment\">//指定初始化器</span></span><br><span class=\"line\">   <span class=\"keyword\">init</span>(age:<span class=\"type\">Int</span>, name:<span class=\"type\">String</span>) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.age = age</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.name = name</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//便捷初始化器</span></span><br><span class=\"line\">   <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(age:<span class=\"type\">Int</span>)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(age:age,name:<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>每一个类至少有一个指定初始化器</li>\n<li>默认初始化器总是类的指定初始化器</li>\n<li>一个类通常只有一个指定初始化器</li>\n<li>指定初始化器必须从他的直系父类调用指定初始化器</li>\n<li>便捷初始化器必须从相同的类里调用另一个初始化器</li>\n<li>便捷初始化器最终必须调用一个指定初始化器</li>\n</ul>\n<h2 id=\"控件使用\"><a href=\"#控件使用\" class=\"headerlink\" title=\"控件使用\"></a>控件使用</h2><h3 id=\"1、UIView\"><a href=\"#1、UIView\" class=\"headerlink\" title=\"1、UIView\"></a>1、UIView</h3><h3 id=\"2、UITableView\"><a href=\"#2、UITableView\" class=\"headerlink\" title=\"2、UITableView\"></a>2、UITableView</h3><h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"网络封装\"><a href=\"#网络封装\" class=\"headerlink\" title=\"网络封装\"></a>网络封装</h3><ol>\n<li>使用xcconfig配置不同环境host</li>\n<li>添加通用的请求类和响应类</li>\n<li>根据后台设计添加处理加密、验签等方法</li>\n<li>封装get、post、upload请求方法</li>\n<li>请求方法传入：响应类泛型、请求路径、请求参数</li>\n<li>请求完成回调：成功（返回响应类型对象）、异常、失败</li>\n<li>异常处理（退出登录、重试机制…）</li>\n<li>添加统一的网络请求hud</li>\n</ol>\n<h3 id=\"图片加载\"><a href=\"#图片加载\" class=\"headerlink\" title=\"图片加载\"></a>图片加载</h3><ol>\n<li>显示placeholder占位图</li>\n<li>以url为数据索引先在内存中查找是否有缓存</li>\n<li>如果没有缓存，通过md5处理过的key来在磁盘查找，找到把的数据加载到内存并显示出来</li>\n<li>如果内存和磁盘中都没有找到，就会向远程服务器发送请求，开始下载图片</li>\n<li>下载完的图片加入缓存并写入到磁盘中</li>\n<li>获取图片的过程是在子线程中进行，在主线程中显示</li>\n</ol>\n<h2 id=\"APP-架构\"><a href=\"#APP-架构\" class=\"headerlink\" title=\"APP 架构\"></a>APP 架构</h2><h3 id=\"1、组件化\"><a href=\"#1、组件化\" class=\"headerlink\" title=\"1、组件化\"></a>1、组件化</h3><h4 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h4><ul>\n<li>业务分层、解耦，使代码变得可维护</li>\n<li>拆分、组织庞大的项目，使项目变得可维护</li>\n<li>便于各业务功能拆分、抽离，实现功能复用</li>\n<li>业务隔离，实现跨团队开发代码控制和版本风险控制</li>\n<li>模块化对代码的封装性、合理性都有一定的要求，提升开发人员编码能力</li>\n<li>在维护好组件的情况下，满足不同客户需求（在新的主App中使用当前组件）</li>\n</ul>\n<h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>基础组件：按功能分库，不涉及业务需求，通过接口供业务组件调用</li>\n<li>基础UI组件：各个业务模块依赖使用，但需要保持好定制扩展的设计</li>\n<li>业务组件：业务功能间相对独立，相互间没有Model共享的依赖</li>\n<li>中间件：target-action，url-block，protocol-class</li>\n</ul>\n<h3 id=\"2、MVVM\"><a href=\"#2、MVVM\" class=\"headerlink\" title=\"2、MVVM\"></a>2、MVVM</h3><h2 id=\"App-优化\"><a href=\"#App-优化\" class=\"headerlink\" title=\"App 优化\"></a>App 优化</h2><h3 id=\"1、启动优化\"><a href=\"#1、启动优化\" class=\"headerlink\" title=\"1、启动优化\"></a>1、启动优化</h3><ul>\n<li>删除无用代码</li>\n<li>抽象重复代码</li>\n<li>第三方库延迟初始化</li>\n<li>业务逻辑延迟或异步执行</li>\n<li>App首页面先展示后渲染</li>\n<li>Time Profiler查找耗时操作和页面</li>\n</ul>\n<h3 id=\"2、网络优化\"><a href=\"#2、网络优化\" class=\"headerlink\" title=\"2、网络优化\"></a>2、网络优化</h3><h4 id=\"请求优化\"><a href=\"#请求优化\" class=\"headerlink\" title=\"请求优化\"></a>请求优化</h4><ul>\n<li>使用HttpDNS下发ip列表</li>\n<li>根据不同网络设置超时时间</li>\n<li>网络环境切换或失败，自动重发</li>\n</ul>\n<h4 id=\"传输优化\"><a href=\"#传输优化\" class=\"headerlink\" title=\"传输优化\"></a>传输优化</h4><ul>\n<li>使用http缓存</li>\n<li>文件传输启用Gzip</li>\n<li>采用WebP图片格式</li>\n<li>采用更好的序列化/反序列化方案</li>\n</ul>\n<h3 id=\"3、体积优化\"><a href=\"#3、体积优化\" class=\"headerlink\" title=\"3、体积优化\"></a>3、体积优化</h3><ul>\n<li>开启Bitcode</li>\n<li>删除无用资源和代码</li>\n<li>对图片资源进行压缩</li>\n<li>使用更轻量级的第三方库</li>\n<li>使用纯代码进行界面布局</li>\n<li>启动图和引导图使用原生绘制或jpg</li>\n<li>某些资源文件放在服务器上，按需下载</li>\n</ul>\n<h3 id=\"4、性能优化\"><a href=\"#4、性能优化\" class=\"headerlink\" title=\"4、性能优化\"></a>4、性能优化</h3><h4 id=\"速度优化\"><a href=\"#速度优化\" class=\"headerlink\" title=\"速度优化\"></a>速度优化</h4><ul>\n<li>耗时操作放入子线程</li>\n<li>使用图片缓存，数据缓存</li>\n<li>图文混排使用CoreText</li>\n<li>使图片适合UIImageView的尺寸</li>\n<li>减少离屏渲染，子线程绘制，主线程渲染</li>\n<li>减少subviews个数，用layer绘制元素</li>\n<li>减少clearColor，maskToBounds，阴影</li>\n</ul>\n<h4 id=\"tableview优化\"><a href=\"#tableview优化\" class=\"headerlink\" title=\"tableview优化\"></a>tableview优化</h4><ul>\n<li>使用cell复用机制</li>\n<li>不要动态添加视图</li>\n<li>图片异步加载并缓存</li>\n<li>手动计算高度缓存高度</li>\n<li>按需刷新，刷新最小列表单元</li>\n</ul>\n"},{"title":"《Swift中文指南》读书笔记","date":"2019-06-16T09:23:18.000Z","_content":"\n## 关于Swift\n\nSwift 通过采用现代编程模式来避免见编程错误：\n\n- 变量始终在使用前初始化\n- 检查数组索引超出范围的错误\n- 检查整数是否溢出\n- 可选值确保明确处理 nil 值\n- 内存被自动管理\n- 错误处理允许从意外故障控制恢复\n\n## 基础部分\n\n在一行中声明多个常量或者多个变量，用逗号隔开：\n\n```swift\nvar x = 0.0, y = 0.0, z = 0.0\n```\n\n在一行中定义多个同样类型的变量，用逗号分割：\n\n```swift\nvar red, green, blue: Double\n```\n\nDouble 精确度很高，至少有15位数字，而 Float 只有6位数字。\n\n> Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型\n\n### 元组\n\n> 元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型\n\n可以将一个元组的内容分解成单独的常量和变量\n\n```swift\nlet http404Error = (404, \"Not Found\")\nlet (statusCode, statusMessage) = http404Error\nprint(\"The status code is \\(statusCode)\")\nprint(\"The status message is \\(statusMessage)\")”\n```\n\n通过下标来访问元组中的元素\n\n```swift\nprint(\"The status code is \\(http404Error.0)\")\nprint(\"The status message is \\(http404Error.1)\")\n```\n\n给元组中的元素命名后，可以通过名字来获取这些元素\n\n```swift\nprint(\"The status code is \\(http200Status.statusCode)\")\nprint(\"The status message is \\(http200Status.statusMessage)\")\n```\n\n### 可选类型\n\n> 使用可选类型（optionals）来处理值可能缺失的情况。可选类型表示两种可能： 或者有值， 你可以解析可选类型访问这个值， 或者根本没有值。\n>\n\n- 如果代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。\n\n- 在 OC 中，nil 是指向不存在对象的指针。在 Swift 中，nil 不是指针，它是一个确定的值，用来表示值缺失。\n\n### 可选绑定\n\n> 使用可选绑定来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。\n>\n\n```swift\nif let constantName = someOptional {\n    statements\n}\n```\n\n### 错误处理\n\n一个函数可以通过在声明中添加 throws 关键词来抛出错误消息\n\n```swift\nfunc canThrowAnError() throws {\n    // 这个函数有可能抛出错误\n}\n\ndo {\n    try canThrowAnError()\n} catch {\n    // 有一个错误消息抛出\n}\n```\n\n## 基本运算符\n\n### 空合运算符\n\n空合运算符（a ?? b）对可选类型 a 进行空判断，如果 a 包含值就进行解包，否则就返回默认值 b。\n\n### 区间运算符\n\n- 闭区间运算符（a...b）定义一个包含从 a 到 b（包括 a 和 b）的所有值的区间\n- 半开区间运算符（a..<b）定义一个从 a 到 b 但不包括 b 的区间\n\n- 单侧区间运算符（2...）定义一个从 2 往一侧无限延伸的区间\n\n## 字符串\n\n> String 类型是值类型。当其进行常量、变量赋值操作，或在函数/方法中传递时，会进行值拷贝。\n>\n\n### 字符串插值\n\n字符串插值是一种构建新字符串的方式\n\n```swift\nlet multiplier = 3\nlet message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\n```\n\n### 访问修改字符串\n\n String 值都有一个关联的索引（index）类型，String.Index，它对应着字符串中的每一个 Character 的位置。\n\n```swift\n// 插入字符\nvar welcome = \"hello\"\nwelcome.insert(\"!\", at: welcome.endIndex)\n//移除字符\nlet range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex\nwelcome.removeSubrange(range)\n```\n\n## 集合类型\n\n> Swift 语言提供数组（Array）、集合（Set）和字典（Dictionary）三种基本的集合类型用来存储集合数据。\n>\n\n![截屏2020-04-07 16.09.18](https://i.loli.net/2020/04/07/YCcurvzVU3yAJL7.png)\n\n### 数组（Array）\n\n> 数组使用有序列表存储同一类型的多个值，相同的值可以多次出现在一个数组的不同位置中。\n>\n\nenumerated() 返回一个由索引值和数据值组成的元组数组\n\n```swift\nfor (index, value) in shoppingList.enumerated() {\n    print(\"Item \\(String(index + 1)): \\(value)\")\n}\n```\n\n### 集合（Sets）\n\n> 集合用来存储相同类型且没有确定顺序的值，要确保每个元素只出现一次时可以使用集合而不是数组。\n\n调用集合的 insert(_:) 方法来添加一个新元素\n\n```swift\nvar favoriteGenres: Set = [\"Rock\", \"Classical\", \"Hip hop\"]\nfavoriteGenres.insert(\"Jazz\")\n```\n\n调用集合的 remove(_:) 方法去删除一个元素\n\n```swift\nif let removedGenre = favoriteGenres.remove(\"Rock\") {\n    print(\"\\(removedGenre)? I'm over it.\")\n} else {\n    print(\"I never much cared for that.\")\n}\n```\n\n### 字典（Dictionary）\n\n> 字典是一种无序的集合，它存储的是键值对之间的关系，其所有键值需要是相同的类型。\n>\n\n使用 for-in 循环来遍历某个字典中的键值对\n\n```swift\nvar airports = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]\nfor (airportCode, airportName) in airports {\n    print(\"\\(airportCode): \\(airportName)\")\n}\n```\n\n## 控制流\n\n### Switch\n\n#### 复合匹配\n\n```swift\nlet anotherCharacter: Character = \"a\"\nswitch anotherCharacter {\ncase \"a\", \"A\":\n    print(\"The letter A\")\ndefault:\n    print(\"Not the letter A\")\n}\n```\n\n#### 区间匹配\n\n```swift\nlet approximateCount = 62\nlet naturalCount: String\nswitch approximateCount {\ncase 0:\n    naturalCount = \"no\"\ncase 1..<12:\n    naturalCount = \"a few\"\ncase 12..<100:\n    naturalCount = \"dozens of\"\ndefault:\n    naturalCount = \"many\"\n}\nprint(\"There are \\(naturalCount).\")\n```\n\n#### 元组\n\n使用元组在同一个 switch 语句中测试多个值\n\n```swift\nlet somePoint = (1, 1)\nswitch somePoint {\ncase (0, 0):\n    print(\"\\(somePoint) is at the origin\")\ncase (_, 0):\n    print(\"\\(somePoint) is on the x-axis\")\ncase (-2...2, -2...2):\n    print(\"\\(somePoint) is inside the box\")\ndefault:\n    print(\"\\(somePoint) is outside of the box\")\n}\n```\n\n#### 值绑定\n\ncase 分支允许将匹配的值声明为临时常量或变量，并且在 case 分支体内使用\n\n```swift\nlet anotherPoint = (2, 0)\nswitch anotherPoint {\ncase (let x, 0):\n    print(\"on the x-axis with an x value of \\(x)\")\ncase let (x, y):\n    print(\"somewhere else at (\\(x), \\(y))\")\n}\n```\n\n#### Where\n\ncase 分支的模式可以使用 where 语句来判断额外的条件 \n\n```swift\nlet yetAnotherPoint = (1, -1)\nswitch yetAnotherPoint {\ncase let (x, y) where x == y:\n    print(\"(\\(x), \\(y)) is on the line x == y\")\ncase let (x, y):\n    print(\"(\\(x), \\(y)) is just some arbitrary point\")\n}\n```\n\n#### 贯穿（Fallthrough）\n\n在 Swift 里，switch 语句不会从上一个 case 分支跳转到下一个 case 分支中。如果你确实需要 C 风格的贯穿的特性，你可以在每个需要该特性的 case 分支中使用 fallthrough 关键字。\n\n### 检测 API 可用性\n\n我们在 if 或 guard 语句中使用 可用性条件 去有条件的执行一段代码，来在运行时判断调用的 API 是否可用。\n\n```swift\nif #available(iOS 10, macOS 10.12, *) {\n    // 在 iOS 使用 iOS 10 的 API, 在 macOS 使用 macOS 10.12 的 API\n} else {\n    // 使用先前版本的 iOS 和 macOS 的 API\n}\n```\n\n## 函数\n\n### 多返回值函数\n\n你可以用元组（tuple）类型让多个值作为一个复合值从函数中返回\n\n```swift\nfunc minMax(array: [Int]) -> (min: Int, max: Int) {\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array[1..<array.count] {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\n```\n\n### 隐式返回的函数\n\n任何一个可以被写成一行 return 语句的函数都可以忽略 return。\n\n```swift\nfunc greeting(for person: String) -> String {\n    \"Hello, \" + person + \"!\"\n}\nprint(greeting(for: \"Dave\"))\n```\n\n### 忽略参数标签\n\n```swift\nfunc someFunction(_ firstParameterName: Int, secondParameterName: Int) {\n     // 在函数体内，firstParameterName 和 secondParameterName 代表参数中的第一个和第二个参数值\n}\nsomeFunction(1, secondParameterName: 2)\n```\n\n### 默认参数值\n\n```swift\nfunc someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {\n    // 如果你在调用时候不传第二个参数，parameterWithDefault 会值为 12 传入到函数体中。\n}\nsomeFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault = 6\nsomeFunction(parameterWithoutDefault: 4) // parameterWithDefault = 12\n```\n\n### 可变参数\n\n一个可变参数（variadic parameter）可以接受零个或多个值。\n\n```swift\nfunc arithmeticMean(_ numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\narithmeticMean(3, 8.25, 18.75)\n```\n\n### 输入输出参数\n\n想要一个函数可以修改参数的值，并且想要在这些修改在函数调用结束后仍然存在，那么就应该把这个参数定义为输入输出参数。定义一个输入输出参数时，在参数定义前加 inout 关键字。\n\n```swift\nfunc swapTwoInts(_ a: inout Int, _ b: inout Int) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n```\n\n### 使用函数类型\n\n在 Swift 中，使用函数类型就像使用其他类型一样\n\n```swift\nfunc addTwoInts(_ a: Int, _ b: Int) -> Int {\n    return a + b\n}\nvar mathFunction: (Int, Int) -> Int = addTwoInts\nprint(\"Result: \\(mathFunction(2, 3))\")\n```\n\n### 函数类型作为参数类型\n\n```swift\nfunc printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {\n    print(\"Result: \\(mathFunction(a, b))\")\n}\nprintMathResult(addTwoInts, 3, 5)\n```\n\n### 函数类型作为返回类型\n\n```swift\nfunc stepForward(_ input: Int) -> Int {\n    return input + 1\n}\nfunc stepBackward(_ input: Int) -> Int {\n    return input - 1\n}\nfunc chooseStepFunction(backward: Bool) -> (Int) -> Int {\n    return backward ? stepBackward : stepForward\n}\n```\n\n### 嵌套函数\n\n把函数定义在别的函数体中，称作 嵌套函数（nested functions）。\n\n```swift\nfunc chooseStepFunction(backward: Bool) -> (Int) -> Int {\n    func stepForward(input: Int) -> Int { return input + 1 }\n    func stepBackward(input: Int) -> Int { return input - 1 }\n    return backward ? stepBackward : stepForward\n}\nvar currentValue = -4\nlet moveNearerToZero = chooseStepFunction(backward: currentValue > 0)\nwhile currentValue != 0 {\n    currentValue = moveNearerToZero(currentValue)\n}\nprint(\"zero!\")\n```\n\n## 闭包\n\n> 闭包是自包含的函数代码块，可以在代码中被传递和使用\n>\n\n### 闭包形式\n\n- 全局函数是一个有名字但不会捕获任何值的闭包\n- 嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包\n- 闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的匿名闭包\n\n### 闭包语法优化\n\n- 利用上下文推断参数和返回值类型\n- 单表达式闭包可以省略 return 关键字\n- 参数名称缩写\n- 尾随闭包语法\n\n### 闭包表达式\n\n闭包表达式是一种构建内联闭包的方式，在不丢失语法清晰明了的同时，闭包表达式提供优化的语法简写形式。\n\n1. 非闭包表达式写法，传入自定义 (String, String) -> Bool 方法\n\n   ```swift\n   let names = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"]\n   func backward(_ s1: String, _ s2: String) -> Bool {\n       return s1 > s2\n   }\n   var reversedNames = names.sorted(by: backward)\n   ```\n\n2. 闭包表达式写法，内联闭包的方式\n\n   ```swift\n   reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in\n       return s1 > s2\n   })\n   ```\n\n3. 上下文推断类型，所有类型可被正确推断\n\n   ```swift\n   reversedNames = names.sorted(by: { s1, s2 in \n   \t\treturn s1 > s2 \n   })\n   ```\n\n4. 单表达式隐式返回，省略关键字 return\n\n   ```swift\n   reversedNames = names.sorted(by: { s1, s2 in \n   \t\ts1 > s2 \n   })\n   ```\n\n5. 参数名称缩写，\\$0 和 ​\\$1 表示第下标为0和1的参数\n\n   ```swift\n   reversedNames = names.sorted(by: { $0 > $1 } )\n   ```\n\n6. 运算符方法，String 类型定义了关于大于号（>）的字符串实现\n\n   ```swift\n   reversedNames = names.sorted(by: >)\n   ```\n\n### 尾随闭包\n\n尾随闭包是一个书写在函数圆括号之后的闭包表达式，函数支持将其作为最后一个参数调用。\n\n```swift\nfunc someFunctionThatTakesAClosure(closure: () -> Void) {\n    // 函数体部分\n}\n// 不使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure(closure: {\n    // 闭包主体部分\n})\n// 使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure() {\n    // 闭包主体部分\n}\n```\n\n尾随包的形式改写 sorted(by:)\n\n```swift\nreversedNames = names.sorted() { $0 > $1 }\n```\n\n如果闭包表达式是函数或方法的唯一参数，使用尾随闭包时可以把 () 省略\n\n```swift\nreversedNames = names.sorted { $0 > $1 }\n```\n\n### 逃逸闭包\n\n当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。\n\n```swift\nvar completionHandlers: [() -> Void] = []\nfunc someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {\n    completionHandlers.append(completionHandler)\n}\n```\n\n将一个闭包标记为 @escaping 意味着你必须在闭包中显式地引用 self。\n\n```swift\nclass SomeClass {\n    var x = 10\n    func doSomething() {\n        someFunctionWithEscapingClosure { self.x = 100 }\n    }\n}\n```\n\n### 自动闭包\n\n自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。\n\n```swift\nvar customersInLine = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"]\nprint(customersInLine.count)\n// 打印出“5”\n\nlet customerProvider = { customersInLine.remove(at: 0) }\nprint(customersInLine.count)\n// 打印出“5”\n\nprint(\"Now serving \\(customerProvider())!\")\n// Prints \"Now serving Chris!\"\nprint(customersInLine.count)\n// 打印出“4”\n```\n\n## 枚举\n\n多个成员值可以出现在同一行上，用逗号隔开\n\n```swift\nenum Planet {\n    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune\n}\n```\n\n### 枚举成员的遍历\n\n令枚举遵循 CaseIterable 协议。Swift 会生成一个 allCases 属性，用于表示一个包含枚举所有成员的集合。\n\n```swift\nenum Beverage: CaseIterable {\n    case coffee, tea, juice\n}\nlet numberOfChoices = Beverage.allCases.count\n```\n\n### 关联值\n\n可以定义 Swift 枚举来存储任意类型的关联值\n\n```swift\nenum Barcode {\n    case upc(Int, Int, Int, Int)\n    case qrCode(String)\n}\n\nvar productBarcode = Barcode.upc(8, 85909, 51226, 3)\nproductBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")\n\nswitch productBarcode {\ncase .upc(let numberSystem, let manufacturer, let product, let check):\n    print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")\ncase let .qrCode(productCode):\n    print(\"QR code: \\(productCode).\")\n}\n```\n\n### 原始值\n\n原始值可以是字符串、字符，或者任意整型值或浮点型值\n\n```swift\nenum ASCIIControlCharacter: Character {\n    case tab = \"\\t\"\n    case lineFeed = \"\\n\"\n    case carriageReturn = \"\\r\"\n}\n```\n\n不需要显式地为每一个枚举成员设置原始值，Swift 将会自动为你赋值\n\n```swift\nenum Planet: Int {\n    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune\n}\n```\n\n如果在定义枚举类型的时候使用了原始值，那么将会自动获得一个初始化方法\n\n```swift\nlet possiblePlanet = Planet(rawValue: 2)\n\nif let somePlanet = Planet(rawValue: 11) {\n    print(\"There is a planet at position 11\")\n} else {\n    print(\"There isn't a planet at position 11\")\n}\n```\n\n## 结构体和类\n\n### 结构体和类对比\n\n共同点\n\n- 定义属性用于存储值\n- 定义方法用于提供功能\n- 定义下标操作用于通过下标语法访问它们的值\n- 定义构造器用于设置初始值\n- 通过扩展以增加默认实现之外的功能\n- 遵循协议以提供某种标准功能\n\n类的附加功能\n\n- 继承允许一个类继承另一个类的特征\n- 类型转换允许在运行时检查和解释一个类实例的类型\n- 析构器允许一个类实例释放任何其所被分配的资源\n- 引用计数允许对一个类的多次引用\n\n> 作为一般准则，优先使用结构体，因为它们更容易理解，仅在适当或必要时才使用类\n>\n\n### 结构体成员逐一构造器\n\n```swift\nstruct Resolution {\n    var width = 0\n    var height = 0\n}\nlet vga = Resolution(width: 640, height: 480)\n```\n\n### 结构体和枚举是值类型\n\n> 值类型被赋值给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝\n>\n\n标准库定义的集合，例如数组，字典和字符串，都对复制进行了优化以降低性能成本。新集合不会立即复制，而是跟原集合共享同一份内存，共享同样的元素。在集合的某个副本要被修改前，才会复制它的元素。\n\n```swift\nlet hd = Resolution(width: 1920, height: 1080)\nvar cinema = hd”\ncinema.width = 2048\n// cinema 的 width 属性被改为 2048”，hd 中 width 属性还是 1920”\n```\n\n### 类是引用类型\n\n> 引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝\n>\n\n```swift\nlet tenEighty = VideoMode()\ntenEighty.name = \"1080i\"\ntenEighty.frameRate = 25.0”\n\nlet alsoTenEighty = tenEighty\nalsoTenEighty.frameRate = 30.0\n// tenEighty 和 alsoTenEighty 的 frameRate 属性都被修改为 30.0\n```\n\n### 恒等运算符\n\n判定两个常量或者变量是否引用同一个类实例\n\n```swift\nif tenEighty === alsoTenEighty {\n    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")\n}\n```\n\n## 属性\n\n> 计算属性可以用于类、结构体和枚举，而存储属性只能用于类和结构体\n>\n\n### 存储属性\n\n存储属性就是存储在特定类或结构体实例里的一个常量或变量\n\n```swift\nstruct FixedLengthRange {\n    var firstValue: Int\n    let length: Int\n}\nvar rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)\n```\n\n值类型的实例被声明为常量的时候，它的所有属性也就成了常量。\n\n```swift\nlet rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)\n// 该区间表示整数 0，1，2，3\nrangeOfFourItems.firstValue = 6\n// 尽管 firstValue 是个可变属性，但这里还是会报错\n```\n\n引用类型的类则不一样。把一个引用类型的实例赋给一个常量后，依然可以修改该实例的可变属性。\n\n### 延时加载存储属性\n\n延时加载存储属性是指当第一次被调用的时候才会计算其初始值的属性。在属性前使用 lazy 来声明。\n\n```swift\nclass DataImporter {\n    /*\n    DataImporter 是一个负责将外部文件中的数据导入的类。\n    这个类的初始化会消耗不少时间。\n    */\n    var fileName = \"data.txt\"\n}\n\nclass DataManager {\n    lazy var importer = DataImporter()\n    var data = [String]()\n}\n\nlet manager = DataManager()\nmanager.data.append(\"Some data\")\nmanager.data.append(\"Some more data\")\n// DataImporter 实例的 importer 属性还没有被创建 \n```\n\n### 计算属性\n\n计算属性不直接存储值，而是提供一个 getter 和一个可选的 setter，来间接获取和设置其他属性或变量的值。\n\n- 必须使用 var 关键字定义计算属性，包括只读计算属性\n\n\n- 如果整个 getter 是单一表达式，getter 会隐式地返回这个表达式结果\n- 如果计算属性的 setter 没有定义表示新值的参数名，可以使用默认名称 newValue\n\n```swift\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct CompactRect {\n    var origin = Point()\n    var size = Size()\n    var center: Point {\n        get {\n            Point(x: origin.x + (size.width / 2), y: origin.y + (size.height / 2))\n        }\n        set {\n            origin.x = newValue.x - (size.width / 2)\n            origin.y = newValue.y - (size.height / 2)\n        }\n    }\n}\n```\n\n### 只读计算属性\n\n只有 getter 没有 setter 的计算属性叫只读计算属性\n\n```swift\nstruct Cuboid {\n    var width = 0.0, height = 0.0, depth = 0.0\n    var volume: Double {\n        return width * height * depth\n    }\n}\nlet fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)\n```\n\n### 属性观察器\n\n- willSet 观察器会将新的属性值作为参数传入，使用默认名称 newValue 表示\n\n- didSet 观察器会将旧的属性值作为参数传入，使用默认名称 oldValue 表示\n\n\n```swift\nclass StepCounter {\n    var totalSteps: Int = 0 {\n        willSet {\n            print(\"将 totalSteps 的值设置为 \\(newValue)\")\n        }\n        didSet {\n            if totalSteps > oldValue  {\n                print(\"增加了 \\(totalSteps - oldValue) 步\")\n            }\n        }\n    }\n}\nlet stepCounter = StepCounter()\nstepCounter.totalSteps = 200\nstepCounter.totalSteps = 360\n```\n\n","source":"_posts/《Swift中文指南》读书笔记.md","raw":"---\ntitle: 《Swift中文指南》读书笔记\ncategories:\n  - iOS\ntags:\n  - Swift\ndate: 2019-06-16 17:23:18\n---\n\n## 关于Swift\n\nSwift 通过采用现代编程模式来避免见编程错误：\n\n- 变量始终在使用前初始化\n- 检查数组索引超出范围的错误\n- 检查整数是否溢出\n- 可选值确保明确处理 nil 值\n- 内存被自动管理\n- 错误处理允许从意外故障控制恢复\n\n## 基础部分\n\n在一行中声明多个常量或者多个变量，用逗号隔开：\n\n```swift\nvar x = 0.0, y = 0.0, z = 0.0\n```\n\n在一行中定义多个同样类型的变量，用逗号分割：\n\n```swift\nvar red, green, blue: Double\n```\n\nDouble 精确度很高，至少有15位数字，而 Float 只有6位数字。\n\n> Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型\n\n### 元组\n\n> 元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型\n\n可以将一个元组的内容分解成单独的常量和变量\n\n```swift\nlet http404Error = (404, \"Not Found\")\nlet (statusCode, statusMessage) = http404Error\nprint(\"The status code is \\(statusCode)\")\nprint(\"The status message is \\(statusMessage)\")”\n```\n\n通过下标来访问元组中的元素\n\n```swift\nprint(\"The status code is \\(http404Error.0)\")\nprint(\"The status message is \\(http404Error.1)\")\n```\n\n给元组中的元素命名后，可以通过名字来获取这些元素\n\n```swift\nprint(\"The status code is \\(http200Status.statusCode)\")\nprint(\"The status message is \\(http200Status.statusMessage)\")\n```\n\n### 可选类型\n\n> 使用可选类型（optionals）来处理值可能缺失的情况。可选类型表示两种可能： 或者有值， 你可以解析可选类型访问这个值， 或者根本没有值。\n>\n\n- 如果代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。\n\n- 在 OC 中，nil 是指向不存在对象的指针。在 Swift 中，nil 不是指针，它是一个确定的值，用来表示值缺失。\n\n### 可选绑定\n\n> 使用可选绑定来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。\n>\n\n```swift\nif let constantName = someOptional {\n    statements\n}\n```\n\n### 错误处理\n\n一个函数可以通过在声明中添加 throws 关键词来抛出错误消息\n\n```swift\nfunc canThrowAnError() throws {\n    // 这个函数有可能抛出错误\n}\n\ndo {\n    try canThrowAnError()\n} catch {\n    // 有一个错误消息抛出\n}\n```\n\n## 基本运算符\n\n### 空合运算符\n\n空合运算符（a ?? b）对可选类型 a 进行空判断，如果 a 包含值就进行解包，否则就返回默认值 b。\n\n### 区间运算符\n\n- 闭区间运算符（a...b）定义一个包含从 a 到 b（包括 a 和 b）的所有值的区间\n- 半开区间运算符（a..<b）定义一个从 a 到 b 但不包括 b 的区间\n\n- 单侧区间运算符（2...）定义一个从 2 往一侧无限延伸的区间\n\n## 字符串\n\n> String 类型是值类型。当其进行常量、变量赋值操作，或在函数/方法中传递时，会进行值拷贝。\n>\n\n### 字符串插值\n\n字符串插值是一种构建新字符串的方式\n\n```swift\nlet multiplier = 3\nlet message = \"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)\n```\n\n### 访问修改字符串\n\n String 值都有一个关联的索引（index）类型，String.Index，它对应着字符串中的每一个 Character 的位置。\n\n```swift\n// 插入字符\nvar welcome = \"hello\"\nwelcome.insert(\"!\", at: welcome.endIndex)\n//移除字符\nlet range = welcome.index(welcome.endIndex, offsetBy: -6)..<welcome.endIndex\nwelcome.removeSubrange(range)\n```\n\n## 集合类型\n\n> Swift 语言提供数组（Array）、集合（Set）和字典（Dictionary）三种基本的集合类型用来存储集合数据。\n>\n\n![截屏2020-04-07 16.09.18](https://i.loli.net/2020/04/07/YCcurvzVU3yAJL7.png)\n\n### 数组（Array）\n\n> 数组使用有序列表存储同一类型的多个值，相同的值可以多次出现在一个数组的不同位置中。\n>\n\nenumerated() 返回一个由索引值和数据值组成的元组数组\n\n```swift\nfor (index, value) in shoppingList.enumerated() {\n    print(\"Item \\(String(index + 1)): \\(value)\")\n}\n```\n\n### 集合（Sets）\n\n> 集合用来存储相同类型且没有确定顺序的值，要确保每个元素只出现一次时可以使用集合而不是数组。\n\n调用集合的 insert(_:) 方法来添加一个新元素\n\n```swift\nvar favoriteGenres: Set = [\"Rock\", \"Classical\", \"Hip hop\"]\nfavoriteGenres.insert(\"Jazz\")\n```\n\n调用集合的 remove(_:) 方法去删除一个元素\n\n```swift\nif let removedGenre = favoriteGenres.remove(\"Rock\") {\n    print(\"\\(removedGenre)? I'm over it.\")\n} else {\n    print(\"I never much cared for that.\")\n}\n```\n\n### 字典（Dictionary）\n\n> 字典是一种无序的集合，它存储的是键值对之间的关系，其所有键值需要是相同的类型。\n>\n\n使用 for-in 循环来遍历某个字典中的键值对\n\n```swift\nvar airports = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]\nfor (airportCode, airportName) in airports {\n    print(\"\\(airportCode): \\(airportName)\")\n}\n```\n\n## 控制流\n\n### Switch\n\n#### 复合匹配\n\n```swift\nlet anotherCharacter: Character = \"a\"\nswitch anotherCharacter {\ncase \"a\", \"A\":\n    print(\"The letter A\")\ndefault:\n    print(\"Not the letter A\")\n}\n```\n\n#### 区间匹配\n\n```swift\nlet approximateCount = 62\nlet naturalCount: String\nswitch approximateCount {\ncase 0:\n    naturalCount = \"no\"\ncase 1..<12:\n    naturalCount = \"a few\"\ncase 12..<100:\n    naturalCount = \"dozens of\"\ndefault:\n    naturalCount = \"many\"\n}\nprint(\"There are \\(naturalCount).\")\n```\n\n#### 元组\n\n使用元组在同一个 switch 语句中测试多个值\n\n```swift\nlet somePoint = (1, 1)\nswitch somePoint {\ncase (0, 0):\n    print(\"\\(somePoint) is at the origin\")\ncase (_, 0):\n    print(\"\\(somePoint) is on the x-axis\")\ncase (-2...2, -2...2):\n    print(\"\\(somePoint) is inside the box\")\ndefault:\n    print(\"\\(somePoint) is outside of the box\")\n}\n```\n\n#### 值绑定\n\ncase 分支允许将匹配的值声明为临时常量或变量，并且在 case 分支体内使用\n\n```swift\nlet anotherPoint = (2, 0)\nswitch anotherPoint {\ncase (let x, 0):\n    print(\"on the x-axis with an x value of \\(x)\")\ncase let (x, y):\n    print(\"somewhere else at (\\(x), \\(y))\")\n}\n```\n\n#### Where\n\ncase 分支的模式可以使用 where 语句来判断额外的条件 \n\n```swift\nlet yetAnotherPoint = (1, -1)\nswitch yetAnotherPoint {\ncase let (x, y) where x == y:\n    print(\"(\\(x), \\(y)) is on the line x == y\")\ncase let (x, y):\n    print(\"(\\(x), \\(y)) is just some arbitrary point\")\n}\n```\n\n#### 贯穿（Fallthrough）\n\n在 Swift 里，switch 语句不会从上一个 case 分支跳转到下一个 case 分支中。如果你确实需要 C 风格的贯穿的特性，你可以在每个需要该特性的 case 分支中使用 fallthrough 关键字。\n\n### 检测 API 可用性\n\n我们在 if 或 guard 语句中使用 可用性条件 去有条件的执行一段代码，来在运行时判断调用的 API 是否可用。\n\n```swift\nif #available(iOS 10, macOS 10.12, *) {\n    // 在 iOS 使用 iOS 10 的 API, 在 macOS 使用 macOS 10.12 的 API\n} else {\n    // 使用先前版本的 iOS 和 macOS 的 API\n}\n```\n\n## 函数\n\n### 多返回值函数\n\n你可以用元组（tuple）类型让多个值作为一个复合值从函数中返回\n\n```swift\nfunc minMax(array: [Int]) -> (min: Int, max: Int) {\n    var currentMin = array[0]\n    var currentMax = array[0]\n    for value in array[1..<array.count] {\n        if value < currentMin {\n            currentMin = value\n        } else if value > currentMax {\n            currentMax = value\n        }\n    }\n    return (currentMin, currentMax)\n}\n```\n\n### 隐式返回的函数\n\n任何一个可以被写成一行 return 语句的函数都可以忽略 return。\n\n```swift\nfunc greeting(for person: String) -> String {\n    \"Hello, \" + person + \"!\"\n}\nprint(greeting(for: \"Dave\"))\n```\n\n### 忽略参数标签\n\n```swift\nfunc someFunction(_ firstParameterName: Int, secondParameterName: Int) {\n     // 在函数体内，firstParameterName 和 secondParameterName 代表参数中的第一个和第二个参数值\n}\nsomeFunction(1, secondParameterName: 2)\n```\n\n### 默认参数值\n\n```swift\nfunc someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {\n    // 如果你在调用时候不传第二个参数，parameterWithDefault 会值为 12 传入到函数体中。\n}\nsomeFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault = 6\nsomeFunction(parameterWithoutDefault: 4) // parameterWithDefault = 12\n```\n\n### 可变参数\n\n一个可变参数（variadic parameter）可以接受零个或多个值。\n\n```swift\nfunc arithmeticMean(_ numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\narithmeticMean(3, 8.25, 18.75)\n```\n\n### 输入输出参数\n\n想要一个函数可以修改参数的值，并且想要在这些修改在函数调用结束后仍然存在，那么就应该把这个参数定义为输入输出参数。定义一个输入输出参数时，在参数定义前加 inout 关键字。\n\n```swift\nfunc swapTwoInts(_ a: inout Int, _ b: inout Int) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n```\n\n### 使用函数类型\n\n在 Swift 中，使用函数类型就像使用其他类型一样\n\n```swift\nfunc addTwoInts(_ a: Int, _ b: Int) -> Int {\n    return a + b\n}\nvar mathFunction: (Int, Int) -> Int = addTwoInts\nprint(\"Result: \\(mathFunction(2, 3))\")\n```\n\n### 函数类型作为参数类型\n\n```swift\nfunc printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {\n    print(\"Result: \\(mathFunction(a, b))\")\n}\nprintMathResult(addTwoInts, 3, 5)\n```\n\n### 函数类型作为返回类型\n\n```swift\nfunc stepForward(_ input: Int) -> Int {\n    return input + 1\n}\nfunc stepBackward(_ input: Int) -> Int {\n    return input - 1\n}\nfunc chooseStepFunction(backward: Bool) -> (Int) -> Int {\n    return backward ? stepBackward : stepForward\n}\n```\n\n### 嵌套函数\n\n把函数定义在别的函数体中，称作 嵌套函数（nested functions）。\n\n```swift\nfunc chooseStepFunction(backward: Bool) -> (Int) -> Int {\n    func stepForward(input: Int) -> Int { return input + 1 }\n    func stepBackward(input: Int) -> Int { return input - 1 }\n    return backward ? stepBackward : stepForward\n}\nvar currentValue = -4\nlet moveNearerToZero = chooseStepFunction(backward: currentValue > 0)\nwhile currentValue != 0 {\n    currentValue = moveNearerToZero(currentValue)\n}\nprint(\"zero!\")\n```\n\n## 闭包\n\n> 闭包是自包含的函数代码块，可以在代码中被传递和使用\n>\n\n### 闭包形式\n\n- 全局函数是一个有名字但不会捕获任何值的闭包\n- 嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包\n- 闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的匿名闭包\n\n### 闭包语法优化\n\n- 利用上下文推断参数和返回值类型\n- 单表达式闭包可以省略 return 关键字\n- 参数名称缩写\n- 尾随闭包语法\n\n### 闭包表达式\n\n闭包表达式是一种构建内联闭包的方式，在不丢失语法清晰明了的同时，闭包表达式提供优化的语法简写形式。\n\n1. 非闭包表达式写法，传入自定义 (String, String) -> Bool 方法\n\n   ```swift\n   let names = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"]\n   func backward(_ s1: String, _ s2: String) -> Bool {\n       return s1 > s2\n   }\n   var reversedNames = names.sorted(by: backward)\n   ```\n\n2. 闭包表达式写法，内联闭包的方式\n\n   ```swift\n   reversedNames = names.sorted(by: { (s1: String, s2: String) -> Bool in\n       return s1 > s2\n   })\n   ```\n\n3. 上下文推断类型，所有类型可被正确推断\n\n   ```swift\n   reversedNames = names.sorted(by: { s1, s2 in \n   \t\treturn s1 > s2 \n   })\n   ```\n\n4. 单表达式隐式返回，省略关键字 return\n\n   ```swift\n   reversedNames = names.sorted(by: { s1, s2 in \n   \t\ts1 > s2 \n   })\n   ```\n\n5. 参数名称缩写，\\$0 和 ​\\$1 表示第下标为0和1的参数\n\n   ```swift\n   reversedNames = names.sorted(by: { $0 > $1 } )\n   ```\n\n6. 运算符方法，String 类型定义了关于大于号（>）的字符串实现\n\n   ```swift\n   reversedNames = names.sorted(by: >)\n   ```\n\n### 尾随闭包\n\n尾随闭包是一个书写在函数圆括号之后的闭包表达式，函数支持将其作为最后一个参数调用。\n\n```swift\nfunc someFunctionThatTakesAClosure(closure: () -> Void) {\n    // 函数体部分\n}\n// 不使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure(closure: {\n    // 闭包主体部分\n})\n// 使用尾随闭包进行函数调用\nsomeFunctionThatTakesAClosure() {\n    // 闭包主体部分\n}\n```\n\n尾随包的形式改写 sorted(by:)\n\n```swift\nreversedNames = names.sorted() { $0 > $1 }\n```\n\n如果闭包表达式是函数或方法的唯一参数，使用尾随闭包时可以把 () 省略\n\n```swift\nreversedNames = names.sorted { $0 > $1 }\n```\n\n### 逃逸闭包\n\n当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。\n\n```swift\nvar completionHandlers: [() -> Void] = []\nfunc someFunctionWithEscapingClosure(completionHandler: @escaping () -> Void) {\n    completionHandlers.append(completionHandler)\n}\n```\n\n将一个闭包标记为 @escaping 意味着你必须在闭包中显式地引用 self。\n\n```swift\nclass SomeClass {\n    var x = 10\n    func doSomething() {\n        someFunctionWithEscapingClosure { self.x = 100 }\n    }\n}\n```\n\n### 自动闭包\n\n自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。\n\n```swift\nvar customersInLine = [\"Chris\", \"Alex\", \"Ewa\", \"Barry\", \"Daniella\"]\nprint(customersInLine.count)\n// 打印出“5”\n\nlet customerProvider = { customersInLine.remove(at: 0) }\nprint(customersInLine.count)\n// 打印出“5”\n\nprint(\"Now serving \\(customerProvider())!\")\n// Prints \"Now serving Chris!\"\nprint(customersInLine.count)\n// 打印出“4”\n```\n\n## 枚举\n\n多个成员值可以出现在同一行上，用逗号隔开\n\n```swift\nenum Planet {\n    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune\n}\n```\n\n### 枚举成员的遍历\n\n令枚举遵循 CaseIterable 协议。Swift 会生成一个 allCases 属性，用于表示一个包含枚举所有成员的集合。\n\n```swift\nenum Beverage: CaseIterable {\n    case coffee, tea, juice\n}\nlet numberOfChoices = Beverage.allCases.count\n```\n\n### 关联值\n\n可以定义 Swift 枚举来存储任意类型的关联值\n\n```swift\nenum Barcode {\n    case upc(Int, Int, Int, Int)\n    case qrCode(String)\n}\n\nvar productBarcode = Barcode.upc(8, 85909, 51226, 3)\nproductBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")\n\nswitch productBarcode {\ncase .upc(let numberSystem, let manufacturer, let product, let check):\n    print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")\ncase let .qrCode(productCode):\n    print(\"QR code: \\(productCode).\")\n}\n```\n\n### 原始值\n\n原始值可以是字符串、字符，或者任意整型值或浮点型值\n\n```swift\nenum ASCIIControlCharacter: Character {\n    case tab = \"\\t\"\n    case lineFeed = \"\\n\"\n    case carriageReturn = \"\\r\"\n}\n```\n\n不需要显式地为每一个枚举成员设置原始值，Swift 将会自动为你赋值\n\n```swift\nenum Planet: Int {\n    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune\n}\n```\n\n如果在定义枚举类型的时候使用了原始值，那么将会自动获得一个初始化方法\n\n```swift\nlet possiblePlanet = Planet(rawValue: 2)\n\nif let somePlanet = Planet(rawValue: 11) {\n    print(\"There is a planet at position 11\")\n} else {\n    print(\"There isn't a planet at position 11\")\n}\n```\n\n## 结构体和类\n\n### 结构体和类对比\n\n共同点\n\n- 定义属性用于存储值\n- 定义方法用于提供功能\n- 定义下标操作用于通过下标语法访问它们的值\n- 定义构造器用于设置初始值\n- 通过扩展以增加默认实现之外的功能\n- 遵循协议以提供某种标准功能\n\n类的附加功能\n\n- 继承允许一个类继承另一个类的特征\n- 类型转换允许在运行时检查和解释一个类实例的类型\n- 析构器允许一个类实例释放任何其所被分配的资源\n- 引用计数允许对一个类的多次引用\n\n> 作为一般准则，优先使用结构体，因为它们更容易理解，仅在适当或必要时才使用类\n>\n\n### 结构体成员逐一构造器\n\n```swift\nstruct Resolution {\n    var width = 0\n    var height = 0\n}\nlet vga = Resolution(width: 640, height: 480)\n```\n\n### 结构体和枚举是值类型\n\n> 值类型被赋值给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝\n>\n\n标准库定义的集合，例如数组，字典和字符串，都对复制进行了优化以降低性能成本。新集合不会立即复制，而是跟原集合共享同一份内存，共享同样的元素。在集合的某个副本要被修改前，才会复制它的元素。\n\n```swift\nlet hd = Resolution(width: 1920, height: 1080)\nvar cinema = hd”\ncinema.width = 2048\n// cinema 的 width 属性被改为 2048”，hd 中 width 属性还是 1920”\n```\n\n### 类是引用类型\n\n> 引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝\n>\n\n```swift\nlet tenEighty = VideoMode()\ntenEighty.name = \"1080i\"\ntenEighty.frameRate = 25.0”\n\nlet alsoTenEighty = tenEighty\nalsoTenEighty.frameRate = 30.0\n// tenEighty 和 alsoTenEighty 的 frameRate 属性都被修改为 30.0\n```\n\n### 恒等运算符\n\n判定两个常量或者变量是否引用同一个类实例\n\n```swift\nif tenEighty === alsoTenEighty {\n    print(\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\")\n}\n```\n\n## 属性\n\n> 计算属性可以用于类、结构体和枚举，而存储属性只能用于类和结构体\n>\n\n### 存储属性\n\n存储属性就是存储在特定类或结构体实例里的一个常量或变量\n\n```swift\nstruct FixedLengthRange {\n    var firstValue: Int\n    let length: Int\n}\nvar rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)\n```\n\n值类型的实例被声明为常量的时候，它的所有属性也就成了常量。\n\n```swift\nlet rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)\n// 该区间表示整数 0，1，2，3\nrangeOfFourItems.firstValue = 6\n// 尽管 firstValue 是个可变属性，但这里还是会报错\n```\n\n引用类型的类则不一样。把一个引用类型的实例赋给一个常量后，依然可以修改该实例的可变属性。\n\n### 延时加载存储属性\n\n延时加载存储属性是指当第一次被调用的时候才会计算其初始值的属性。在属性前使用 lazy 来声明。\n\n```swift\nclass DataImporter {\n    /*\n    DataImporter 是一个负责将外部文件中的数据导入的类。\n    这个类的初始化会消耗不少时间。\n    */\n    var fileName = \"data.txt\"\n}\n\nclass DataManager {\n    lazy var importer = DataImporter()\n    var data = [String]()\n}\n\nlet manager = DataManager()\nmanager.data.append(\"Some data\")\nmanager.data.append(\"Some more data\")\n// DataImporter 实例的 importer 属性还没有被创建 \n```\n\n### 计算属性\n\n计算属性不直接存储值，而是提供一个 getter 和一个可选的 setter，来间接获取和设置其他属性或变量的值。\n\n- 必须使用 var 关键字定义计算属性，包括只读计算属性\n\n\n- 如果整个 getter 是单一表达式，getter 会隐式地返回这个表达式结果\n- 如果计算属性的 setter 没有定义表示新值的参数名，可以使用默认名称 newValue\n\n```swift\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct CompactRect {\n    var origin = Point()\n    var size = Size()\n    var center: Point {\n        get {\n            Point(x: origin.x + (size.width / 2), y: origin.y + (size.height / 2))\n        }\n        set {\n            origin.x = newValue.x - (size.width / 2)\n            origin.y = newValue.y - (size.height / 2)\n        }\n    }\n}\n```\n\n### 只读计算属性\n\n只有 getter 没有 setter 的计算属性叫只读计算属性\n\n```swift\nstruct Cuboid {\n    var width = 0.0, height = 0.0, depth = 0.0\n    var volume: Double {\n        return width * height * depth\n    }\n}\nlet fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)\n```\n\n### 属性观察器\n\n- willSet 观察器会将新的属性值作为参数传入，使用默认名称 newValue 表示\n\n- didSet 观察器会将旧的属性值作为参数传入，使用默认名称 oldValue 表示\n\n\n```swift\nclass StepCounter {\n    var totalSteps: Int = 0 {\n        willSet {\n            print(\"将 totalSteps 的值设置为 \\(newValue)\")\n        }\n        didSet {\n            if totalSteps > oldValue  {\n                print(\"增加了 \\(totalSteps - oldValue) 步\")\n            }\n        }\n    }\n}\nlet stepCounter = StepCounter()\nstepCounter.totalSteps = 200\nstepCounter.totalSteps = 360\n```\n\n","slug":"《Swift中文指南》读书笔记","published":1,"updated":"2020-06-18T10:42:25.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bz8000whb8y3rnc1x0h","content":"<h2 id=\"关于Swift\"><a href=\"#关于Swift\" class=\"headerlink\" title=\"关于Swift\"></a>关于Swift</h2><p>Swift 通过采用现代编程模式来避免见编程错误：</p>\n<ul>\n<li>变量始终在使用前初始化</li>\n<li>检查数组索引超出范围的错误</li>\n<li>检查整数是否溢出</li>\n<li>可选值确保明确处理 nil 值</li>\n<li>内存被自动管理</li>\n<li>错误处理允许从意外故障控制恢复</li>\n</ul>\n<h2 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h2><p>在一行中声明多个常量或者多个变量，用逗号隔开：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span>, z = <span class=\"number\">0.0</span></span><br></pre></td></tr></table></figure>\n\n<p>在一行中定义多个同样类型的变量，用逗号分割：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> red, green, blue: <span class=\"type\">Double</span></span><br></pre></td></tr></table></figure>\n\n<p>Double 精确度很高，至少有15位数字，而 Float 只有6位数字。</p>\n<blockquote>\n<p>Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型</p>\n</blockquote>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><blockquote>\n<p>元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型</p>\n</blockquote>\n<p>可以将一个元组的内容分解成单独的常量和变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http404Error = (<span class=\"number\">404</span>, <span class=\"string\">\"Not Found\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) = http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is \\(statusCode)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is \\(statusMessage)\"</span>)”</span><br></pre></td></tr></table></figure>\n\n<p>通过下标来访问元组中的元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is \\(http404Error.0)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is \\(http404Error.1)\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>给元组中的元素命名后，可以通过名字来获取这些元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is \\(http200Status.statusCode)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is \\(http200Status.statusMessage)\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可选类型\"><a href=\"#可选类型\" class=\"headerlink\" title=\"可选类型\"></a>可选类型</h3><blockquote>\n<p>使用可选类型（optionals）来处理值可能缺失的情况。可选类型表示两种可能： 或者有值， 你可以解析可选类型访问这个值， 或者根本没有值。</p>\n</blockquote>\n<ul>\n<li><p>如果代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。</p>\n</li>\n<li><p>在 OC 中，nil 是指向不存在对象的指针。在 Swift 中，nil 不是指针，它是一个确定的值，用来表示值缺失。</p>\n</li>\n</ul>\n<h3 id=\"可选绑定\"><a href=\"#可选绑定\" class=\"headerlink\" title=\"可选绑定\"></a>可选绑定</h3><blockquote>\n<p>使用可选绑定来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> constantName = someOptional &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>一个函数可以通过在声明中添加 throws 关键词来抛出错误消息</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canThrowAnError</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个函数有可能抛出错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnError()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有一个错误消息抛出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h2><h3 id=\"空合运算符\"><a href=\"#空合运算符\" class=\"headerlink\" title=\"空合运算符\"></a>空合运算符</h3><p>空合运算符（a ?? b）对可选类型 a 进行空判断，如果 a 包含值就进行解包，否则就返回默认值 b。</p>\n<h3 id=\"区间运算符\"><a href=\"#区间运算符\" class=\"headerlink\" title=\"区间运算符\"></a>区间运算符</h3><ul>\n<li><p>闭区间运算符（a…b）定义一个包含从 a 到 b（包括 a 和 b）的所有值的区间</p>\n</li>\n<li><p>半开区间运算符（a..&lt;b）定义一个从 a 到 b 但不包括 b 的区间</p>\n</li>\n<li><p>单侧区间运算符（2…）定义一个从 2 往一侧无限延伸的区间</p>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><blockquote>\n<p>String 类型是值类型。当其进行常量、变量赋值操作，或在函数/方法中传递时，会进行值拷贝。</p>\n</blockquote>\n<h3 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h3><p>字符串插值是一种构建新字符串的方式</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> multiplier = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">\"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问修改字符串\"><a href=\"#访问修改字符串\" class=\"headerlink\" title=\"访问修改字符串\"></a>访问修改字符串</h3><p> String 值都有一个关联的索引（index）类型，String.Index，它对应着字符串中的每一个 Character 的位置。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> welcome = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">welcome.insert(<span class=\"string\">\"!\"</span>, at: welcome.endIndex)</span><br><span class=\"line\"><span class=\"comment\">//移除字符</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> range = welcome.index(welcome.endIndex, offsetBy: -<span class=\"number\">6</span>)..&lt;welcome.endIndex</span><br><span class=\"line\">welcome.removeSubrange(range)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合类型\"><a href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"></a>集合类型</h2><blockquote>\n<p>Swift 语言提供数组（Array）、集合（Set）和字典（Dictionary）三种基本的集合类型用来存储集合数据。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/04/07/YCcurvzVU3yAJL7.png\" alt=\"截屏2020-04-07 16.09.18\"></p>\n<h3 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h3><blockquote>\n<p>数组使用有序列表存储同一类型的多个值，相同的值可以多次出现在一个数组的不同位置中。</p>\n</blockquote>\n<p>enumerated() 返回一个由索引值和数据值组成的元组数组</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> shoppingList.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Item \\(String(index + 1)): \\(value)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集合（Sets）\"><a href=\"#集合（Sets）\" class=\"headerlink\" title=\"集合（Sets）\"></a>集合（Sets）</h3><blockquote>\n<p>集合用来存储相同类型且没有确定顺序的值，要确保每个元素只出现一次时可以使用集合而不是数组。</p>\n</blockquote>\n<p>调用集合的 insert(_:) 方法来添加一个新元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> favoriteGenres: <span class=\"type\">Set</span> = [<span class=\"string\">\"Rock\"</span>, <span class=\"string\">\"Classical\"</span>, <span class=\"string\">\"Hip hop\"</span>]</span><br><span class=\"line\">favoriteGenres.insert(<span class=\"string\">\"Jazz\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>调用集合的 remove(_:) 方法去删除一个元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removedGenre = favoriteGenres.remove(<span class=\"string\">\"Rock\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(removedGenre)? I'm over it.\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I never much cared for that.\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字典（Dictionary）\"><a href=\"#字典（Dictionary）\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><blockquote>\n<p>字典是一种无序的集合，它存储的是键值对之间的关系，其所有键值需要是相同的类型。</p>\n</blockquote>\n<p>使用 for-in 循环来遍历某个字典中的键值对</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> airports = [<span class=\"string\">\"YYZ\"</span>: <span class=\"string\">\"Toronto Pearson\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (airportCode, airportName) <span class=\"keyword\">in</span> airports &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(airportCode): \\(airportName)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h2><h3 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h3><h4 id=\"复合匹配\"><a href=\"#复合匹配\" class=\"headerlink\" title=\"复合匹配\"></a>复合匹配</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anotherCharacter: <span class=\"type\">Character</span> = <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> anotherCharacter &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"A\"</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The letter A\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Not the letter A\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区间匹配\"><a href=\"#区间匹配\" class=\"headerlink\" title=\"区间匹配\"></a>区间匹配</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> approximateCount = <span class=\"number\">62</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> naturalCount: <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> approximateCount &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"no\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>..&lt;<span class=\"number\">12</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"a few\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">12</span>..&lt;<span class=\"number\">100</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"dozens of\"</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"many\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"There are \\(naturalCount).\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组-1\"><a href=\"#元组-1\" class=\"headerlink\" title=\"元组\"></a>元组</h4><p>使用元组在同一个 switch 语句中测试多个值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> somePoint = (<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> somePoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is at the origin\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">_</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is on the x-axis\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> (-<span class=\"number\">2</span>...<span class=\"number\">2</span>, -<span class=\"number\">2</span>...<span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is inside the box\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is outside of the box\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"值绑定\"><a href=\"#值绑定\" class=\"headerlink\" title=\"值绑定\"></a>值绑定</h4><p>case 分支允许将匹配的值声明为临时常量或变量，并且在 case 分支体内使用</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anotherPoint = (<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> anotherPoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"keyword\">let</span> x, <span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"on the x-axis with an x value of \\(x)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"somewhere else at (\\(x), \\(y))\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Where\"><a href=\"#Where\" class=\"headerlink\" title=\"Where\"></a>Where</h4><p>case 分支的模式可以使用 where 语句来判断额外的条件 </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yetAnotherPoint = (<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> yetAnotherPoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == y:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == y\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is just some arbitrary point\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贯穿（Fallthrough）\"><a href=\"#贯穿（Fallthrough）\" class=\"headerlink\" title=\"贯穿（Fallthrough）\"></a>贯穿（Fallthrough）</h4><p>在 Swift 里，switch 语句不会从上一个 case 分支跳转到下一个 case 分支中。如果你确实需要 C 风格的贯穿的特性，你可以在每个需要该特性的 case 分支中使用 fallthrough 关键字。</p>\n<h3 id=\"检测-API-可用性\"><a href=\"#检测-API-可用性\" class=\"headerlink\" title=\"检测 API 可用性\"></a>检测 API 可用性</h3><p>我们在 if 或 guard 语句中使用 可用性条件 去有条件的执行一段代码，来在运行时判断调用的 API 是否可用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> #available(iOS <span class=\"number\">10</span>, macOS <span class=\"number\">10.12</span>, *) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在 iOS 使用 iOS 10 的 API, 在 macOS 使用 macOS 10.12 的 API</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用先前版本的 iOS 和 macOS 的 API</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"多返回值函数\"><a href=\"#多返回值函数\" class=\"headerlink\" title=\"多返回值函数\"></a>多返回值函数</h3><p>你可以用元组（tuple）类型让多个值作为一个复合值从函数中返回</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minMax</span><span class=\"params\">(array: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentMin = array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentMax = array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>..&lt;array.<span class=\"built_in\">count</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value &lt; currentMin &#123;</span><br><span class=\"line\">            currentMin = value</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value &gt; currentMax &#123;</span><br><span class=\"line\">            currentMax = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (currentMin, currentMax)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式返回的函数\"><a href=\"#隐式返回的函数\" class=\"headerlink\" title=\"隐式返回的函数\"></a>隐式返回的函数</h3><p>任何一个可以被写成一行 return 语句的函数都可以忽略 return。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greeting</span><span class=\"params\">(<span class=\"keyword\">for</span> person: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Hello, \"</span> + person + <span class=\"string\">\"!\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting(<span class=\"keyword\">for</span>: <span class=\"string\">\"Dave\"</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"忽略参数标签\"><a href=\"#忽略参数标签\" class=\"headerlink\" title=\"忽略参数标签\"></a>忽略参数标签</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(<span class=\"number\">_</span> firstParameterName: Int, secondParameterName: Int)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 在函数体内，firstParameterName 和 secondParameterName 代表参数中的第一个和第二个参数值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">someFunction(<span class=\"number\">1</span>, secondParameterName: <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(parameterWithoutDefault: Int, parameterWithDefault: Int = <span class=\"number\">12</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果你在调用时候不传第二个参数，parameterWithDefault 会值为 12 传入到函数体中。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">someFunction(parameterWithoutDefault: <span class=\"number\">3</span>, parameterWithDefault: <span class=\"number\">6</span>) <span class=\"comment\">// parameterWithDefault = 6</span></span><br><span class=\"line\">someFunction(parameterWithoutDefault: <span class=\"number\">4</span>) <span class=\"comment\">// parameterWithDefault = 12</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>一个可变参数（variadic parameter）可以接受零个或多个值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arithmeticMean</span><span class=\"params\">(<span class=\"number\">_</span> numbers: Double...)</span></span> -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total: <span class=\"type\">Double</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">        total += number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total / <span class=\"type\">Double</span>(numbers.<span class=\"built_in\">count</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">arithmeticMean(<span class=\"number\">3</span>, <span class=\"number\">8.25</span>, <span class=\"number\">18.75</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入输出参数\"><a href=\"#输入输出参数\" class=\"headerlink\" title=\"输入输出参数\"></a>输入输出参数</h3><p>想要一个函数可以修改参数的值，并且想要在这些修改在函数调用结束后仍然存在，那么就应该把这个参数定义为输入输出参数。定义一个输入输出参数时，在参数定义前加 inout 关键字。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoInts</span><span class=\"params\">(<span class=\"number\">_</span> a: <span class=\"keyword\">inout</span> Int, <span class=\"number\">_</span> b: <span class=\"keyword\">inout</span> Int)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</span><br><span class=\"line\">    a = b</span><br><span class=\"line\">    b = temporaryA</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用函数类型\"><a href=\"#使用函数类型\" class=\"headerlink\" title=\"使用函数类型\"></a>使用函数类型</h3><p>在 Swift 中，使用函数类型就像使用其他类型一样</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoInts</span><span class=\"params\">(<span class=\"number\">_</span> a: Int, <span class=\"number\">_</span> b: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mathFunction: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> = addTwoInts</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Result: \\(mathFunction(2, 3))\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数类型作为参数类型\"><a href=\"#函数类型作为参数类型\" class=\"headerlink\" title=\"函数类型作为参数类型\"></a>函数类型作为参数类型</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMathResult</span><span class=\"params\">(<span class=\"number\">_</span> mathFunction: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>, <span class=\"number\">_</span> a: <span class=\"type\">Int</span>, <span class=\"number\">_</span> b: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Result: \\(mathFunction(a, b))\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printMathResult(addTwoInts, <span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数类型作为返回类型\"><a href=\"#函数类型作为返回类型\" class=\"headerlink\" title=\"函数类型作为返回类型\"></a>函数类型作为返回类型</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepForward</span><span class=\"params\">(<span class=\"number\">_</span> input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepBackward</span><span class=\"params\">(<span class=\"number\">_</span> input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">chooseStepFunction</span><span class=\"params\">(backward: Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backward ? stepBackward : stepForward</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h3><p>把函数定义在别的函数体中，称作 嵌套函数（nested functions）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">chooseStepFunction</span><span class=\"params\">(backward: Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepForward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepBackward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backward ? stepBackward : stepForward</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue = -<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moveNearerToZero = chooseStepFunction(backward: currentValue &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> currentValue != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    currentValue = moveNearerToZero(currentValue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"zero!\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>闭包是自包含的函数代码块，可以在代码中被传递和使用</p>\n</blockquote>\n<h3 id=\"闭包形式\"><a href=\"#闭包形式\" class=\"headerlink\" title=\"闭包形式\"></a>闭包形式</h3><ul>\n<li>全局函数是一个有名字但不会捕获任何值的闭包</li>\n<li>嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包</li>\n<li>闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的匿名闭包</li>\n</ul>\n<h3 id=\"闭包语法优化\"><a href=\"#闭包语法优化\" class=\"headerlink\" title=\"闭包语法优化\"></a>闭包语法优化</h3><ul>\n<li>利用上下文推断参数和返回值类型</li>\n<li>单表达式闭包可以省略 return 关键字</li>\n<li>参数名称缩写</li>\n<li>尾随闭包语法</li>\n</ul>\n<h3 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h3><p>闭包表达式是一种构建内联闭包的方式，在不丢失语法清晰明了的同时，闭包表达式提供优化的语法简写形式。</p>\n<ol>\n<li><p>非闭包表达式写法，传入自定义 (String, String) -&gt; Bool 方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"Chris\"</span>, <span class=\"string\">\"Alex\"</span>, <span class=\"string\">\"Ewa\"</span>, <span class=\"string\">\"Barry\"</span>, <span class=\"string\">\"Daniella\"</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backward</span><span class=\"params\">(<span class=\"number\">_</span> s1: String, <span class=\"number\">_</span> s2: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reversedNames = names.sorted(by: backward)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闭包表达式写法，内联闭包的方式</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; (s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上下文推断类型，所有类型可被正确推断</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s1 &gt; s2 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单表达式隐式返回，省略关键字 return</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t\ts1 &gt; s2 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数名称缩写，$0 和 ​$1 表示第下标为0和1的参数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125; )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运算符方法，String 类型定义了关于大于号（&gt;）的字符串实现</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &gt;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h3><p>尾随闭包是一个书写在函数圆括号之后的闭包表达式，函数支持将其作为最后一个参数调用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionThatTakesAClosure</span><span class=\"params\">(closure: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体部分</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure(closure: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>尾随包的形式改写 sorted(by:)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted() &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果闭包表达式是函数或方法的唯一参数，使用尾随闭包时可以把 () 省略</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逃逸闭包\"><a href=\"#逃逸闭包\" class=\"headerlink\" title=\"逃逸闭包\"></a>逃逸闭包</h3><p>当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> completionHandlers: [() -&gt; <span class=\"type\">Void</span>] = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionWithEscapingClosure</span><span class=\"params\">(completionHandler: @escaping <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    completionHandlers.append(completionHandler)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将一个闭包标记为 @escaping 意味着你必须在闭包中显式地引用 self。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        someFunctionWithEscapingClosure &#123; <span class=\"keyword\">self</span>.x = <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动闭包\"><a href=\"#自动闭包\" class=\"headerlink\" title=\"自动闭包\"></a>自动闭包</h3><p>自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> customersInLine = [<span class=\"string\">\"Chris\"</span>, <span class=\"string\">\"Alex\"</span>, <span class=\"string\">\"Ewa\"</span>, <span class=\"string\">\"Barry\"</span>, <span class=\"string\">\"Daniella\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(customersInLine.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印出“5”</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> customerProvider = &#123; customersInLine.remove(at: <span class=\"number\">0</span>) &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(customersInLine.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印出“5”</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Now serving \\(customerProvider())!\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// Prints \"Now serving Chris!\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(customersInLine.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印出“4”</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>多个成员值可以出现在同一行上，用逗号隔开</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Planet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mercury, venus, earth, mars, jupiter, saturn, uranus, neptune</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举成员的遍历\"><a href=\"#枚举成员的遍历\" class=\"headerlink\" title=\"枚举成员的遍历\"></a>枚举成员的遍历</h3><p>令枚举遵循 CaseIterable 协议。Swift 会生成一个 allCases 属性，用于表示一个包含枚举所有成员的集合。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Beverage</span>: <span class=\"title\">CaseIterable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> coffee, tea, juice</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOfChoices = <span class=\"type\">Beverage</span>.allCases.<span class=\"built_in\">count</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关联值\"><a href=\"#关联值\" class=\"headerlink\" title=\"关联值\"></a>关联值</h3><p>可以定义 Swift 枚举来存储任意类型的关联值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Barcode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> upc(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> qrCode(<span class=\"type\">String</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> productBarcode = <span class=\"type\">Barcode</span>.upc(<span class=\"number\">8</span>, <span class=\"number\">85909</span>, <span class=\"number\">51226</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">productBarcode = .qrCode(<span class=\"string\">\"ABCDEFGHIJKLMNOP\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> productBarcode &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .upc(<span class=\"keyword\">let</span> numberSystem, <span class=\"keyword\">let</span> manufacturer, <span class=\"keyword\">let</span> product, <span class=\"keyword\">let</span> check):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .qrCode(productCode):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"QR code: \\(productCode).\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h3><p>原始值可以是字符串、字符，或者任意整型值或浮点型值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ASCIIControlCharacter</span>: <span class=\"title\">Character</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tab = <span class=\"string\">\"\\t\"</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> lineFeed = <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> carriageReturn = <span class=\"string\">\"\\r\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不需要显式地为每一个枚举成员设置原始值，Swift 将会自动为你赋值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Planet</span>: <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mercury = <span class=\"number\">1</span>, venus, earth, mars, jupiter, saturn, uranus, neptune</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在定义枚举类型的时候使用了原始值，那么将会自动获得一个初始化方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possiblePlanet = <span class=\"type\">Planet</span>(rawValue: <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> somePlanet = <span class=\"type\">Planet</span>(rawValue: <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"There is a planet at position 11\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"There isn't a planet at position 11\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体和类\"><a href=\"#结构体和类\" class=\"headerlink\" title=\"结构体和类\"></a>结构体和类</h2><h3 id=\"结构体和类对比\"><a href=\"#结构体和类对比\" class=\"headerlink\" title=\"结构体和类对比\"></a>结构体和类对比</h3><p>共同点</p>\n<ul>\n<li>定义属性用于存储值</li>\n<li>定义方法用于提供功能</li>\n<li>定义下标操作用于通过下标语法访问它们的值</li>\n<li>定义构造器用于设置初始值</li>\n<li>通过扩展以增加默认实现之外的功能</li>\n<li>遵循协议以提供某种标准功能</li>\n</ul>\n<p>类的附加功能</p>\n<ul>\n<li>继承允许一个类继承另一个类的特征</li>\n<li>类型转换允许在运行时检查和解释一个类实例的类型</li>\n<li>析构器允许一个类实例释放任何其所被分配的资源</li>\n<li>引用计数允许对一个类的多次引用</li>\n</ul>\n<blockquote>\n<p>作为一般准则，优先使用结构体，因为它们更容易理解，仅在适当或必要时才使用类</p>\n</blockquote>\n<h3 id=\"结构体成员逐一构造器\"><a href=\"#结构体成员逐一构造器\" class=\"headerlink\" title=\"结构体成员逐一构造器\"></a>结构体成员逐一构造器</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Resolution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> vga = <span class=\"type\">Resolution</span>(width: <span class=\"number\">640</span>, height: <span class=\"number\">480</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体和枚举是值类型\"><a href=\"#结构体和枚举是值类型\" class=\"headerlink\" title=\"结构体和枚举是值类型\"></a>结构体和枚举是值类型</h3><blockquote>\n<p>值类型被赋值给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝</p>\n</blockquote>\n<p>标准库定义的集合，例如数组，字典和字符串，都对复制进行了优化以降低性能成本。新集合不会立即复制，而是跟原集合共享同一份内存，共享同样的元素。在集合的某个副本要被修改前，才会复制它的元素。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> hd = <span class=\"type\">Resolution</span>(width: <span class=\"number\">1920</span>, height: <span class=\"number\">1080</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cinema = hd”</span><br><span class=\"line\">cinema.width = <span class=\"number\">2048</span></span><br><span class=\"line\"><span class=\"comment\">// cinema 的 width 属性被改为 2048”，hd 中 width 属性还是 1920”</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类是引用类型\"><a href=\"#类是引用类型\" class=\"headerlink\" title=\"类是引用类型\"></a>类是引用类型</h3><blockquote>\n<p>引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tenEighty = <span class=\"type\">VideoMode</span>()</span><br><span class=\"line\">tenEighty.name = <span class=\"string\">\"1080i\"</span></span><br><span class=\"line\">tenEighty.frameRate = <span class=\"number\">25.0</span>”</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> alsoTenEighty = tenEighty</span><br><span class=\"line\">alsoTenEighty.frameRate = <span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"comment\">// tenEighty 和 alsoTenEighty 的 frameRate 属性都被修改为 30.0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"恒等运算符\"><a href=\"#恒等运算符\" class=\"headerlink\" title=\"恒等运算符\"></a>恒等运算符</h3><p>判定两个常量或者变量是否引用同一个类实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> tenEighty === alsoTenEighty &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><blockquote>\n<p>计算属性可以用于类、结构体和枚举，而存储属性只能用于类和结构体</p>\n</blockquote>\n<h3 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a>存储属性</h3><p>存储属性就是存储在特定类或结构体实例里的一个常量或变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FixedLengthRange</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstValue: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> length: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rangeOfThreeItems = <span class=\"type\">FixedLengthRange</span>(firstValue: <span class=\"number\">0</span>, length: <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>值类型的实例被声明为常量的时候，它的所有属性也就成了常量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> rangeOfFourItems = <span class=\"type\">FixedLengthRange</span>(firstValue: <span class=\"number\">0</span>, length: <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// 该区间表示整数 0，1，2，3</span></span><br><span class=\"line\">rangeOfFourItems.firstValue = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"comment\">// 尽管 firstValue 是个可变属性，但这里还是会报错</span></span><br></pre></td></tr></table></figure>\n\n<p>引用类型的类则不一样。把一个引用类型的实例赋给一个常量后，依然可以修改该实例的可变属性。</p>\n<h3 id=\"延时加载存储属性\"><a href=\"#延时加载存储属性\" class=\"headerlink\" title=\"延时加载存储属性\"></a>延时加载存储属性</h3><p>延时加载存储属性是指当第一次被调用的时候才会计算其初始值的属性。在属性前使用 lazy 来声明。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataImporter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    DataImporter 是一个负责将外部文件中的数据导入的类。</span></span><br><span class=\"line\"><span class=\"comment\">    这个类的初始化会消耗不少时间。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileName = <span class=\"string\">\"data.txt\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> importer = <span class=\"type\">DataImporter</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = [<span class=\"type\">String</span>]()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> manager = <span class=\"type\">DataManager</span>()</span><br><span class=\"line\">manager.data.append(<span class=\"string\">\"Some data\"</span>)</span><br><span class=\"line\">manager.data.append(<span class=\"string\">\"Some more data\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// DataImporter 实例的 importer 属性还没有被创建</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>计算属性不直接存储值，而是提供一个 getter 和一个可选的 setter，来间接获取和设置其他属性或变量的值。</p>\n<ul>\n<li>必须使用 var 关键字定义计算属性，包括只读计算属性</li>\n</ul>\n<ul>\n<li>如果整个 getter 是单一表达式，getter 会隐式地返回这个表达式结果</li>\n<li>如果计算属性的 setter 没有定义表示新值的参数名，可以使用默认名称 newValue</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">CompactRect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> center: <span class=\"type\">Point</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Point</span>(x: origin.x + (size.width / <span class=\"number\">2</span>), y: origin.y + (size.height / <span class=\"number\">2</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            origin.x = newValue.x - (size.width / <span class=\"number\">2</span>)</span><br><span class=\"line\">            origin.y = newValue.y - (size.height / <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只读计算属性\"><a href=\"#只读计算属性\" class=\"headerlink\" title=\"只读计算属性\"></a>只读计算属性</h3><p>只有 getter 没有 setter 的计算属性叫只读计算属性</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cuboid</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span>, depth = <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> volume: <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> width * height * depth</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fourByFiveByTwo = <span class=\"type\">Cuboid</span>(width: <span class=\"number\">4.0</span>, height: <span class=\"number\">5.0</span>, depth: <span class=\"number\">2.0</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性观察器\"><a href=\"#属性观察器\" class=\"headerlink\" title=\"属性观察器\"></a>属性观察器</h3><ul>\n<li><p>willSet 观察器会将新的属性值作为参数传入，使用默认名称 newValue 表示</p>\n</li>\n<li><p>didSet 观察器会将旧的属性值作为参数传入，使用默认名称 oldValue 表示</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StepCounter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> totalSteps: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"将 totalSteps 的值设置为 \\(newValue)\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> totalSteps &gt; oldValue  &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"增加了 \\(totalSteps - oldValue) 步\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stepCounter = <span class=\"type\">StepCounter</span>()</span><br><span class=\"line\">stepCounter.totalSteps = <span class=\"number\">200</span></span><br><span class=\"line\">stepCounter.totalSteps = <span class=\"number\">360</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于Swift\"><a href=\"#关于Swift\" class=\"headerlink\" title=\"关于Swift\"></a>关于Swift</h2><p>Swift 通过采用现代编程模式来避免见编程错误：</p>\n<ul>\n<li>变量始终在使用前初始化</li>\n<li>检查数组索引超出范围的错误</li>\n<li>检查整数是否溢出</li>\n<li>可选值确保明确处理 nil 值</li>\n<li>内存被自动管理</li>\n<li>错误处理允许从意外故障控制恢复</li>\n</ul>\n<h2 id=\"基础部分\"><a href=\"#基础部分\" class=\"headerlink\" title=\"基础部分\"></a>基础部分</h2><p>在一行中声明多个常量或者多个变量，用逗号隔开：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span>, z = <span class=\"number\">0.0</span></span><br></pre></td></tr></table></figure>\n\n<p>在一行中定义多个同样类型的变量，用逗号分割：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> red, green, blue: <span class=\"type\">Double</span></span><br></pre></td></tr></table></figure>\n\n<p>Double 精确度很高，至少有15位数字，而 Float 只有6位数字。</p>\n<blockquote>\n<p>Swift 是一个类型安全（type safe）的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型</p>\n</blockquote>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><blockquote>\n<p>元组（tuples）把多个值组合成一个复合值。元组内的值可以是任意类型，并不要求是相同类型</p>\n</blockquote>\n<p>可以将一个元组的内容分解成单独的常量和变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> http404Error = (<span class=\"number\">404</span>, <span class=\"string\">\"Not Found\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) = http404Error</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is \\(statusCode)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is \\(statusMessage)\"</span>)”</span><br></pre></td></tr></table></figure>\n\n<p>通过下标来访问元组中的元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is \\(http404Error.0)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is \\(http404Error.1)\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>给元组中的元素命名后，可以通过名字来获取这些元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status code is \\(http200Status.statusCode)\"</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"The status message is \\(http200Status.statusMessage)\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可选类型\"><a href=\"#可选类型\" class=\"headerlink\" title=\"可选类型\"></a>可选类型</h3><blockquote>\n<p>使用可选类型（optionals）来处理值可能缺失的情况。可选类型表示两种可能： 或者有值， 你可以解析可选类型访问这个值， 或者根本没有值。</p>\n</blockquote>\n<ul>\n<li><p>如果代码中有常量或者变量需要处理值缺失的情况，请把它们声明成对应的可选类型。</p>\n</li>\n<li><p>在 OC 中，nil 是指向不存在对象的指针。在 Swift 中，nil 不是指针，它是一个确定的值，用来表示值缺失。</p>\n</li>\n</ul>\n<h3 id=\"可选绑定\"><a href=\"#可选绑定\" class=\"headerlink\" title=\"可选绑定\"></a>可选绑定</h3><blockquote>\n<p>使用可选绑定来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或者变量。</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> constantName = someOptional &#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><p>一个函数可以通过在声明中添加 throws 关键词来抛出错误消息</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">canThrowAnError</span><span class=\"params\">()</span></span> <span class=\"keyword\">throws</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这个函数有可能抛出错误</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> canThrowAnError()</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有一个错误消息抛出</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h2><h3 id=\"空合运算符\"><a href=\"#空合运算符\" class=\"headerlink\" title=\"空合运算符\"></a>空合运算符</h3><p>空合运算符（a ?? b）对可选类型 a 进行空判断，如果 a 包含值就进行解包，否则就返回默认值 b。</p>\n<h3 id=\"区间运算符\"><a href=\"#区间运算符\" class=\"headerlink\" title=\"区间运算符\"></a>区间运算符</h3><ul>\n<li><p>闭区间运算符（a…b）定义一个包含从 a 到 b（包括 a 和 b）的所有值的区间</p>\n</li>\n<li><p>半开区间运算符（a..&lt;b）定义一个从 a 到 b 但不包括 b 的区间</p>\n</li>\n<li><p>单侧区间运算符（2…）定义一个从 2 往一侧无限延伸的区间</p>\n</li>\n</ul>\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><blockquote>\n<p>String 类型是值类型。当其进行常量、变量赋值操作，或在函数/方法中传递时，会进行值拷贝。</p>\n</blockquote>\n<h3 id=\"字符串插值\"><a href=\"#字符串插值\" class=\"headerlink\" title=\"字符串插值\"></a>字符串插值</h3><p>字符串插值是一种构建新字符串的方式</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> multiplier = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">\"\\(multiplier) times 2.5 is \\(Double(multiplier) * 2.5)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问修改字符串\"><a href=\"#访问修改字符串\" class=\"headerlink\" title=\"访问修改字符串\"></a>访问修改字符串</h3><p> String 值都有一个关联的索引（index）类型，String.Index，它对应着字符串中的每一个 Character 的位置。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入字符</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> welcome = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">welcome.insert(<span class=\"string\">\"!\"</span>, at: welcome.endIndex)</span><br><span class=\"line\"><span class=\"comment\">//移除字符</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> range = welcome.index(welcome.endIndex, offsetBy: -<span class=\"number\">6</span>)..&lt;welcome.endIndex</span><br><span class=\"line\">welcome.removeSubrange(range)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集合类型\"><a href=\"#集合类型\" class=\"headerlink\" title=\"集合类型\"></a>集合类型</h2><blockquote>\n<p>Swift 语言提供数组（Array）、集合（Set）和字典（Dictionary）三种基本的集合类型用来存储集合数据。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/04/07/YCcurvzVU3yAJL7.png\" alt=\"截屏2020-04-07 16.09.18\"></p>\n<h3 id=\"数组（Array）\"><a href=\"#数组（Array）\" class=\"headerlink\" title=\"数组（Array）\"></a>数组（Array）</h3><blockquote>\n<p>数组使用有序列表存储同一类型的多个值，相同的值可以多次出现在一个数组的不同位置中。</p>\n</blockquote>\n<p>enumerated() 返回一个由索引值和数据值组成的元组数组</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> shoppingList.enumerated() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Item \\(String(index + 1)): \\(value)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"集合（Sets）\"><a href=\"#集合（Sets）\" class=\"headerlink\" title=\"集合（Sets）\"></a>集合（Sets）</h3><blockquote>\n<p>集合用来存储相同类型且没有确定顺序的值，要确保每个元素只出现一次时可以使用集合而不是数组。</p>\n</blockquote>\n<p>调用集合的 insert(_:) 方法来添加一个新元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> favoriteGenres: <span class=\"type\">Set</span> = [<span class=\"string\">\"Rock\"</span>, <span class=\"string\">\"Classical\"</span>, <span class=\"string\">\"Hip hop\"</span>]</span><br><span class=\"line\">favoriteGenres.insert(<span class=\"string\">\"Jazz\"</span>)</span><br></pre></td></tr></table></figure>\n\n<p>调用集合的 remove(_:) 方法去删除一个元素</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> removedGenre = favoriteGenres.remove(<span class=\"string\">\"Rock\"</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(removedGenre)? I'm over it.\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"I never much cared for that.\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字典（Dictionary）\"><a href=\"#字典（Dictionary）\" class=\"headerlink\" title=\"字典（Dictionary）\"></a>字典（Dictionary）</h3><blockquote>\n<p>字典是一种无序的集合，它存储的是键值对之间的关系，其所有键值需要是相同的类型。</p>\n</blockquote>\n<p>使用 for-in 循环来遍历某个字典中的键值对</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> airports = [<span class=\"string\">\"YYZ\"</span>: <span class=\"string\">\"Toronto Pearson\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> (airportCode, airportName) <span class=\"keyword\">in</span> airports &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(airportCode): \\(airportName)\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"控制流\"><a href=\"#控制流\" class=\"headerlink\" title=\"控制流\"></a>控制流</h2><h3 id=\"Switch\"><a href=\"#Switch\" class=\"headerlink\" title=\"Switch\"></a>Switch</h3><h4 id=\"复合匹配\"><a href=\"#复合匹配\" class=\"headerlink\" title=\"复合匹配\"></a>复合匹配</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anotherCharacter: <span class=\"type\">Character</span> = <span class=\"string\">\"a\"</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> anotherCharacter &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"A\"</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"The letter A\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Not the letter A\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"区间匹配\"><a href=\"#区间匹配\" class=\"headerlink\" title=\"区间匹配\"></a>区间匹配</h4><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> approximateCount = <span class=\"number\">62</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> naturalCount: <span class=\"type\">String</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> approximateCount &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"no\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>..&lt;<span class=\"number\">12</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"a few\"</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">12</span>..&lt;<span class=\"number\">100</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"dozens of\"</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    naturalCount = <span class=\"string\">\"many\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"There are \\(naturalCount).\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组-1\"><a href=\"#元组-1\" class=\"headerlink\" title=\"元组\"></a>元组</h4><p>使用元组在同一个 switch 语句中测试多个值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> somePoint = (<span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> somePoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is at the origin\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">_</span>, <span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is on the x-axis\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> (-<span class=\"number\">2</span>...<span class=\"number\">2</span>, -<span class=\"number\">2</span>...<span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is inside the box\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\(somePoint) is outside of the box\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"值绑定\"><a href=\"#值绑定\" class=\"headerlink\" title=\"值绑定\"></a>值绑定</h4><p>case 分支允许将匹配的值声明为临时常量或变量，并且在 case 分支体内使用</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> anotherPoint = (<span class=\"number\">2</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> anotherPoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> (<span class=\"keyword\">let</span> x, <span class=\"number\">0</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"on the x-axis with an x value of \\(x)\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"somewhere else at (\\(x), \\(y))\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Where\"><a href=\"#Where\" class=\"headerlink\" title=\"Where\"></a>Where</h4><p>case 分支的模式可以使用 where 语句来判断额外的条件 </p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yetAnotherPoint = (<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">switch</span> yetAnotherPoint &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == y:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == y\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"(\\(x), \\(y)) is just some arbitrary point\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"贯穿（Fallthrough）\"><a href=\"#贯穿（Fallthrough）\" class=\"headerlink\" title=\"贯穿（Fallthrough）\"></a>贯穿（Fallthrough）</h4><p>在 Swift 里，switch 语句不会从上一个 case 分支跳转到下一个 case 分支中。如果你确实需要 C 风格的贯穿的特性，你可以在每个需要该特性的 case 分支中使用 fallthrough 关键字。</p>\n<h3 id=\"检测-API-可用性\"><a href=\"#检测-API-可用性\" class=\"headerlink\" title=\"检测 API 可用性\"></a>检测 API 可用性</h3><p>我们在 if 或 guard 语句中使用 可用性条件 去有条件的执行一段代码，来在运行时判断调用的 API 是否可用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> #available(iOS <span class=\"number\">10</span>, macOS <span class=\"number\">10.12</span>, *) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在 iOS 使用 iOS 10 的 API, 在 macOS 使用 macOS 10.12 的 API</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用先前版本的 iOS 和 macOS 的 API</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><h3 id=\"多返回值函数\"><a href=\"#多返回值函数\" class=\"headerlink\" title=\"多返回值函数\"></a>多返回值函数</h3><p>你可以用元组（tuple）类型让多个值作为一个复合值从函数中返回</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">minMax</span><span class=\"params\">(array: [Int])</span></span> -&gt; (<span class=\"built_in\">min</span>: <span class=\"type\">Int</span>, <span class=\"built_in\">max</span>: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentMin = array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> currentMax = array[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> array[<span class=\"number\">1</span>..&lt;array.<span class=\"built_in\">count</span>] &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value &lt; currentMin &#123;</span><br><span class=\"line\">            currentMin = value</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> value &gt; currentMax &#123;</span><br><span class=\"line\">            currentMax = value</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (currentMin, currentMax)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式返回的函数\"><a href=\"#隐式返回的函数\" class=\"headerlink\" title=\"隐式返回的函数\"></a>隐式返回的函数</h3><p>任何一个可以被写成一行 return 语句的函数都可以忽略 return。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">greeting</span><span class=\"params\">(<span class=\"keyword\">for</span> person: String)</span></span> -&gt; <span class=\"type\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"string\">\"Hello, \"</span> + person + <span class=\"string\">\"!\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(greeting(<span class=\"keyword\">for</span>: <span class=\"string\">\"Dave\"</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"忽略参数标签\"><a href=\"#忽略参数标签\" class=\"headerlink\" title=\"忽略参数标签\"></a>忽略参数标签</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(<span class=\"number\">_</span> firstParameterName: Int, secondParameterName: Int)</span></span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 在函数体内，firstParameterName 和 secondParameterName 代表参数中的第一个和第二个参数值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">someFunction(<span class=\"number\">1</span>, secondParameterName: <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span><span class=\"params\">(parameterWithoutDefault: Int, parameterWithDefault: Int = <span class=\"number\">12</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果你在调用时候不传第二个参数，parameterWithDefault 会值为 12 传入到函数体中。</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">someFunction(parameterWithoutDefault: <span class=\"number\">3</span>, parameterWithDefault: <span class=\"number\">6</span>) <span class=\"comment\">// parameterWithDefault = 6</span></span><br><span class=\"line\">someFunction(parameterWithoutDefault: <span class=\"number\">4</span>) <span class=\"comment\">// parameterWithDefault = 12</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>一个可变参数（variadic parameter）可以接受零个或多个值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arithmeticMean</span><span class=\"params\">(<span class=\"number\">_</span> numbers: Double...)</span></span> -&gt; <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> total: <span class=\"type\">Double</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</span><br><span class=\"line\">        total += number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total / <span class=\"type\">Double</span>(numbers.<span class=\"built_in\">count</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">arithmeticMean(<span class=\"number\">3</span>, <span class=\"number\">8.25</span>, <span class=\"number\">18.75</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入输出参数\"><a href=\"#输入输出参数\" class=\"headerlink\" title=\"输入输出参数\"></a>输入输出参数</h3><p>想要一个函数可以修改参数的值，并且想要在这些修改在函数调用结束后仍然存在，那么就应该把这个参数定义为输入输出参数。定义一个输入输出参数时，在参数定义前加 inout 关键字。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoInts</span><span class=\"params\">(<span class=\"number\">_</span> a: <span class=\"keyword\">inout</span> Int, <span class=\"number\">_</span> b: <span class=\"keyword\">inout</span> Int)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</span><br><span class=\"line\">    a = b</span><br><span class=\"line\">    b = temporaryA</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用函数类型\"><a href=\"#使用函数类型\" class=\"headerlink\" title=\"使用函数类型\"></a>使用函数类型</h3><p>在 Swift 中，使用函数类型就像使用其他类型一样</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoInts</span><span class=\"params\">(<span class=\"number\">_</span> a: Int, <span class=\"number\">_</span> b: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> mathFunction: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> = addTwoInts</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Result: \\(mathFunction(2, 3))\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数类型作为参数类型\"><a href=\"#函数类型作为参数类型\" class=\"headerlink\" title=\"函数类型作为参数类型\"></a>函数类型作为参数类型</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printMathResult</span><span class=\"params\">(<span class=\"number\">_</span> mathFunction: <span class=\"params\">(Int, Int)</span></span></span> -&gt; <span class=\"type\">Int</span>, <span class=\"number\">_</span> a: <span class=\"type\">Int</span>, <span class=\"number\">_</span> b: <span class=\"type\">Int</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Result: \\(mathFunction(a, b))\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">printMathResult(addTwoInts, <span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数类型作为返回类型\"><a href=\"#函数类型作为返回类型\" class=\"headerlink\" title=\"函数类型作为返回类型\"></a>函数类型作为返回类型</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepForward</span><span class=\"params\">(<span class=\"number\">_</span> input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepBackward</span><span class=\"params\">(<span class=\"number\">_</span> input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input - <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">chooseStepFunction</span><span class=\"params\">(backward: Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backward ? stepBackward : stepForward</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h3><p>把函数定义在别的函数体中，称作 嵌套函数（nested functions）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">chooseStepFunction</span><span class=\"params\">(backward: Bool)</span></span> -&gt; (<span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepForward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">stepBackward</span><span class=\"params\">(input: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123; <span class=\"keyword\">return</span> input - <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> backward ? stepBackward : stepForward</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> currentValue = -<span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> moveNearerToZero = chooseStepFunction(backward: currentValue &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> currentValue != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">    currentValue = moveNearerToZero(currentValue)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"zero!\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>闭包是自包含的函数代码块，可以在代码中被传递和使用</p>\n</blockquote>\n<h3 id=\"闭包形式\"><a href=\"#闭包形式\" class=\"headerlink\" title=\"闭包形式\"></a>闭包形式</h3><ul>\n<li>全局函数是一个有名字但不会捕获任何值的闭包</li>\n<li>嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包</li>\n<li>闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的匿名闭包</li>\n</ul>\n<h3 id=\"闭包语法优化\"><a href=\"#闭包语法优化\" class=\"headerlink\" title=\"闭包语法优化\"></a>闭包语法优化</h3><ul>\n<li>利用上下文推断参数和返回值类型</li>\n<li>单表达式闭包可以省略 return 关键字</li>\n<li>参数名称缩写</li>\n<li>尾随闭包语法</li>\n</ul>\n<h3 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h3><p>闭包表达式是一种构建内联闭包的方式，在不丢失语法清晰明了的同时，闭包表达式提供优化的语法简写形式。</p>\n<ol>\n<li><p>非闭包表达式写法，传入自定义 (String, String) -&gt; Bool 方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> names = [<span class=\"string\">\"Chris\"</span>, <span class=\"string\">\"Alex\"</span>, <span class=\"string\">\"Ewa\"</span>, <span class=\"string\">\"Barry\"</span>, <span class=\"string\">\"Daniella\"</span>]</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backward</span><span class=\"params\">(<span class=\"number\">_</span> s1: String, <span class=\"number\">_</span> s2: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> reversedNames = names.sorted(by: backward)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>闭包表达式写法，内联闭包的方式</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; (s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>上下文推断类型，所有类型可被正确推断</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> s1 &gt; s2 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>单表达式隐式返回，省略关键字 return</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; s1, s2 <span class=\"keyword\">in</span> </span><br><span class=\"line\">\t\ts1 &gt; s2 </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数名称缩写，$0 和 ​$1 表示第下标为0和1的参数</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125; )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运算符方法，String 类型定义了关于大于号（&gt;）的字符串实现</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted(by: &gt;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"尾随闭包\"><a href=\"#尾随闭包\" class=\"headerlink\" title=\"尾随闭包\"></a>尾随闭包</h3><p>尾随闭包是一个书写在函数圆括号之后的闭包表达式，函数支持将其作为最后一个参数调用。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionThatTakesAClosure</span><span class=\"params\">(closure: <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 函数体部分</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure(closure: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 使用尾随闭包进行函数调用</span></span><br><span class=\"line\">someFunctionThatTakesAClosure() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包主体部分</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>尾随包的形式改写 sorted(by:)</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted() &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果闭包表达式是函数或方法的唯一参数，使用尾随闭包时可以把 () 省略</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reversedNames = names.sorted &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"逃逸闭包\"><a href=\"#逃逸闭包\" class=\"headerlink\" title=\"逃逸闭包\"></a>逃逸闭包</h3><p>当一个闭包作为参数传到一个函数中，但是这个闭包在函数返回之后才被执行，我们称该闭包从函数中逃逸。一种能使闭包“逃逸”出函数的方法是，将这个闭包保存在一个函数外部定义的变量中。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> completionHandlers: [() -&gt; <span class=\"type\">Void</span>] = []</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunctionWithEscapingClosure</span><span class=\"params\">(completionHandler: @escaping <span class=\"params\">()</span></span></span> -&gt; <span class=\"type\">Void</span>) &#123;</span><br><span class=\"line\">    completionHandlers.append(completionHandler)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将一个闭包标记为 @escaping 意味着你必须在闭包中显式地引用 self。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">doSomething</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        someFunctionWithEscapingClosure &#123; <span class=\"keyword\">self</span>.x = <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自动闭包\"><a href=\"#自动闭包\" class=\"headerlink\" title=\"自动闭包\"></a>自动闭包</h3><p>自动闭包是一种自动创建的闭包，用于包装传递给函数作为参数的表达式。这种闭包不接受任何参数，当它被调用的时候，会返回被包装在其中的表达式的值。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> customersInLine = [<span class=\"string\">\"Chris\"</span>, <span class=\"string\">\"Alex\"</span>, <span class=\"string\">\"Ewa\"</span>, <span class=\"string\">\"Barry\"</span>, <span class=\"string\">\"Daniella\"</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(customersInLine.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印出“5”</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> customerProvider = &#123; customersInLine.remove(at: <span class=\"number\">0</span>) &#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(customersInLine.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印出“5”</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">\"Now serving \\(customerProvider())!\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// Prints \"Now serving Chris!\"</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(customersInLine.<span class=\"built_in\">count</span>)</span><br><span class=\"line\"><span class=\"comment\">// 打印出“4”</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>多个成员值可以出现在同一行上，用逗号隔开</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Planet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mercury, venus, earth, mars, jupiter, saturn, uranus, neptune</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举成员的遍历\"><a href=\"#枚举成员的遍历\" class=\"headerlink\" title=\"枚举成员的遍历\"></a>枚举成员的遍历</h3><p>令枚举遵循 CaseIterable 协议。Swift 会生成一个 allCases 属性，用于表示一个包含枚举所有成员的集合。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Beverage</span>: <span class=\"title\">CaseIterable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> coffee, tea, juice</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> numberOfChoices = <span class=\"type\">Beverage</span>.allCases.<span class=\"built_in\">count</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"关联值\"><a href=\"#关联值\" class=\"headerlink\" title=\"关联值\"></a>关联值</h3><p>可以定义 Swift 枚举来存储任意类型的关联值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Barcode</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> upc(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">case</span> qrCode(<span class=\"type\">String</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> productBarcode = <span class=\"type\">Barcode</span>.upc(<span class=\"number\">8</span>, <span class=\"number\">85909</span>, <span class=\"number\">51226</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">productBarcode = .qrCode(<span class=\"string\">\"ABCDEFGHIJKLMNOP\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">switch</span> productBarcode &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> .upc(<span class=\"keyword\">let</span> numberSystem, <span class=\"keyword\">let</span> manufacturer, <span class=\"keyword\">let</span> product, <span class=\"keyword\">let</span> check):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> .qrCode(productCode):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"QR code: \\(productCode).\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"原始值\"><a href=\"#原始值\" class=\"headerlink\" title=\"原始值\"></a>原始值</h3><p>原始值可以是字符串、字符，或者任意整型值或浮点型值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">ASCIIControlCharacter</span>: <span class=\"title\">Character</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> tab = <span class=\"string\">\"\\t\"</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> lineFeed = <span class=\"string\">\"\\n\"</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> carriageReturn = <span class=\"string\">\"\\r\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>不需要显式地为每一个枚举成员设置原始值，Swift 将会自动为你赋值</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Planet</span>: <span class=\"title\">Int</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> mercury = <span class=\"number\">1</span>, venus, earth, mars, jupiter, saturn, uranus, neptune</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果在定义枚举类型的时候使用了原始值，那么将会自动获得一个初始化方法</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> possiblePlanet = <span class=\"type\">Planet</span>(rawValue: <span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> somePlanet = <span class=\"type\">Planet</span>(rawValue: <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"There is a planet at position 11\"</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"There isn't a planet at position 11\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体和类\"><a href=\"#结构体和类\" class=\"headerlink\" title=\"结构体和类\"></a>结构体和类</h2><h3 id=\"结构体和类对比\"><a href=\"#结构体和类对比\" class=\"headerlink\" title=\"结构体和类对比\"></a>结构体和类对比</h3><p>共同点</p>\n<ul>\n<li>定义属性用于存储值</li>\n<li>定义方法用于提供功能</li>\n<li>定义下标操作用于通过下标语法访问它们的值</li>\n<li>定义构造器用于设置初始值</li>\n<li>通过扩展以增加默认实现之外的功能</li>\n<li>遵循协议以提供某种标准功能</li>\n</ul>\n<p>类的附加功能</p>\n<ul>\n<li>继承允许一个类继承另一个类的特征</li>\n<li>类型转换允许在运行时检查和解释一个类实例的类型</li>\n<li>析构器允许一个类实例释放任何其所被分配的资源</li>\n<li>引用计数允许对一个类的多次引用</li>\n</ul>\n<blockquote>\n<p>作为一般准则，优先使用结构体，因为它们更容易理解，仅在适当或必要时才使用类</p>\n</blockquote>\n<h3 id=\"结构体成员逐一构造器\"><a href=\"#结构体成员逐一构造器\" class=\"headerlink\" title=\"结构体成员逐一构造器\"></a>结构体成员逐一构造器</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Resolution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> vga = <span class=\"type\">Resolution</span>(width: <span class=\"number\">640</span>, height: <span class=\"number\">480</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结构体和枚举是值类型\"><a href=\"#结构体和枚举是值类型\" class=\"headerlink\" title=\"结构体和枚举是值类型\"></a>结构体和枚举是值类型</h3><blockquote>\n<p>值类型被赋值给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝</p>\n</blockquote>\n<p>标准库定义的集合，例如数组，字典和字符串，都对复制进行了优化以降低性能成本。新集合不会立即复制，而是跟原集合共享同一份内存，共享同样的元素。在集合的某个副本要被修改前，才会复制它的元素。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> hd = <span class=\"type\">Resolution</span>(width: <span class=\"number\">1920</span>, height: <span class=\"number\">1080</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> cinema = hd”</span><br><span class=\"line\">cinema.width = <span class=\"number\">2048</span></span><br><span class=\"line\"><span class=\"comment\">// cinema 的 width 属性被改为 2048”，hd 中 width 属性还是 1920”</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"类是引用类型\"><a href=\"#类是引用类型\" class=\"headerlink\" title=\"类是引用类型\"></a>类是引用类型</h3><blockquote>\n<p>引用类型在被赋予到一个变量、常量或者被传递到一个函数时，其值不会被拷贝</p>\n</blockquote>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> tenEighty = <span class=\"type\">VideoMode</span>()</span><br><span class=\"line\">tenEighty.name = <span class=\"string\">\"1080i\"</span></span><br><span class=\"line\">tenEighty.frameRate = <span class=\"number\">25.0</span>”</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> alsoTenEighty = tenEighty</span><br><span class=\"line\">alsoTenEighty.frameRate = <span class=\"number\">30.0</span></span><br><span class=\"line\"><span class=\"comment\">// tenEighty 和 alsoTenEighty 的 frameRate 属性都被修改为 30.0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"恒等运算符\"><a href=\"#恒等运算符\" class=\"headerlink\" title=\"恒等运算符\"></a>恒等运算符</h3><p>判定两个常量或者变量是否引用同一个类实例</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> tenEighty === alsoTenEighty &#123;</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"tenEighty and alsoTenEighty refer to the same VideoMode instance.\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><blockquote>\n<p>计算属性可以用于类、结构体和枚举，而存储属性只能用于类和结构体</p>\n</blockquote>\n<h3 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a>存储属性</h3><p>存储属性就是存储在特定类或结构体实例里的一个常量或变量</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">FixedLengthRange</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> firstValue: <span class=\"type\">Int</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> length: <span class=\"type\">Int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> rangeOfThreeItems = <span class=\"type\">FixedLengthRange</span>(firstValue: <span class=\"number\">0</span>, length: <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p>值类型的实例被声明为常量的时候，它的所有属性也就成了常量。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> rangeOfFourItems = <span class=\"type\">FixedLengthRange</span>(firstValue: <span class=\"number\">0</span>, length: <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"comment\">// 该区间表示整数 0，1，2，3</span></span><br><span class=\"line\">rangeOfFourItems.firstValue = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"comment\">// 尽管 firstValue 是个可变属性，但这里还是会报错</span></span><br></pre></td></tr></table></figure>\n\n<p>引用类型的类则不一样。把一个引用类型的实例赋给一个常量后，依然可以修改该实例的可变属性。</p>\n<h3 id=\"延时加载存储属性\"><a href=\"#延时加载存储属性\" class=\"headerlink\" title=\"延时加载存储属性\"></a>延时加载存储属性</h3><p>延时加载存储属性是指当第一次被调用的时候才会计算其初始值的属性。在属性前使用 lazy 来声明。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataImporter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    DataImporter 是一个负责将外部文件中的数据导入的类。</span></span><br><span class=\"line\"><span class=\"comment\">    这个类的初始化会消耗不少时间。</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fileName = <span class=\"string\">\"data.txt\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> importer = <span class=\"type\">DataImporter</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = [<span class=\"type\">String</span>]()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> manager = <span class=\"type\">DataManager</span>()</span><br><span class=\"line\">manager.data.append(<span class=\"string\">\"Some data\"</span>)</span><br><span class=\"line\">manager.data.append(<span class=\"string\">\"Some more data\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// DataImporter 实例的 importer 属性还没有被创建</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h3><p>计算属性不直接存储值，而是提供一个 getter 和一个可选的 setter，来间接获取和设置其他属性或变量的值。</p>\n<ul>\n<li>必须使用 var 关键字定义计算属性，包括只读计算属性</li>\n</ul>\n<ul>\n<li>如果整个 getter 是单一表达式，getter 会隐式地返回这个表达式结果</li>\n<li>如果计算属性的 setter 没有定义表示新值的参数名，可以使用默认名称 newValue</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">CompactRect</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> center: <span class=\"type\">Point</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">get</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Point</span>(x: origin.x + (size.width / <span class=\"number\">2</span>), y: origin.y + (size.height / <span class=\"number\">2</span>))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">set</span> &#123;</span><br><span class=\"line\">            origin.x = newValue.x - (size.width / <span class=\"number\">2</span>)</span><br><span class=\"line\">            origin.y = newValue.y - (size.height / <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"只读计算属性\"><a href=\"#只读计算属性\" class=\"headerlink\" title=\"只读计算属性\"></a>只读计算属性</h3><p>只有 getter 没有 setter 的计算属性叫只读计算属性</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cuboid</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span>, depth = <span class=\"number\">0.0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> volume: <span class=\"type\">Double</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> width * height * depth</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> fourByFiveByTwo = <span class=\"type\">Cuboid</span>(width: <span class=\"number\">4.0</span>, height: <span class=\"number\">5.0</span>, depth: <span class=\"number\">2.0</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性观察器\"><a href=\"#属性观察器\" class=\"headerlink\" title=\"属性观察器\"></a>属性观察器</h3><ul>\n<li><p>willSet 观察器会将新的属性值作为参数传入，使用默认名称 newValue 表示</p>\n</li>\n<li><p>didSet 观察器会将旧的属性值作为参数传入，使用默认名称 oldValue 表示</p>\n</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StepCounter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> totalSteps: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">willSet</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"将 totalSteps 的值设置为 \\(newValue)\"</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> totalSteps &gt; oldValue  &#123;</span><br><span class=\"line\">                <span class=\"built_in\">print</span>(<span class=\"string\">\"增加了 \\(totalSteps - oldValue) 步\"</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stepCounter = <span class=\"type\">StepCounter</span>()</span><br><span class=\"line\">stepCounter.totalSteps = <span class=\"number\">200</span></span><br><span class=\"line\">stepCounter.totalSteps = <span class=\"number\">360</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"在Flutter中使用WebView","date":"2020-04-15T08:38:11.000Z","_content":"\n#### 导包\n\n在 **`pubspec.yml`** 中的 **`dependencies`** 下加入 *[webview_flutter](https://pub.flutter-io.cn/packages/webview_flutter)* 的 package\n\n```yaml\ndependencies:\n  webview_flutter: 0.3.19+9\n```\n\n然后点击标签栏出现的 ***Packages get***，或者在终端输入 `flutter package get`\n\n#### 新建 Widget\n\n新建一个 WebViewWidget，这个 Widget 接收两个参数，分别是浏览器页面标题和浏览页面的 url\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:webview_flutter/webview_flutter.dart';\n\nclass Browser extends StatelessWidget {\n  const Browser({Key key, this.url, this.title}) : super(key: key);\n\n  final String url;\n  final String title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(title),\n      ),\n      body: WebView(\n        initialUrl: url,\n        javascriptMode: JavascriptMode.unrestricted,\n      ),\n    );\n  }\n}\n```\n\n#### 使用 WebView\n\n使用的时候只需要跳转到该页面，并传入标题和网址即可\n\n```dart\nonPressed: () {\n  Navigator.of(context)\n      .push(new MaterialPageRoute(builder: (_) {\n    return new Browser(\n      url: \"https://flutter-io.cn/\",\n      title: \"Flutter 中文社区\",\n    );\n  }));\n}\n```\n\n#### iOS plist 设置\n\n```xml\n<key>io.flutter.embedded_views_preview</key>\n<string>YES</string>\n```\n\n#### 设置 iOS 支持 http\n\n在  iOS 模块的 `Runner` 中的 ***info.plist*** 文件中添加如下字段：\n\n```xml\n<key>NSAppTransportSecurity</key>\n<dict>\n<key>NSAllowsArbitraryLoads</key>\n<true/>\n</dict>\n```\n\n然后执行 `flutter clean` 后重新运行即可访问 HTTP 网页","source":"_posts/在Flutter中使用WebView.md","raw":"---\ntitle: 在Flutter中使用WebView\ncategories:\n  - 前端\ntags:\n  - Flutter\ndate: 2020-04-15 16:38:11\n---\n\n#### 导包\n\n在 **`pubspec.yml`** 中的 **`dependencies`** 下加入 *[webview_flutter](https://pub.flutter-io.cn/packages/webview_flutter)* 的 package\n\n```yaml\ndependencies:\n  webview_flutter: 0.3.19+9\n```\n\n然后点击标签栏出现的 ***Packages get***，或者在终端输入 `flutter package get`\n\n#### 新建 Widget\n\n新建一个 WebViewWidget，这个 Widget 接收两个参数，分别是浏览器页面标题和浏览页面的 url\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:webview_flutter/webview_flutter.dart';\n\nclass Browser extends StatelessWidget {\n  const Browser({Key key, this.url, this.title}) : super(key: key);\n\n  final String url;\n  final String title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(title),\n      ),\n      body: WebView(\n        initialUrl: url,\n        javascriptMode: JavascriptMode.unrestricted,\n      ),\n    );\n  }\n}\n```\n\n#### 使用 WebView\n\n使用的时候只需要跳转到该页面，并传入标题和网址即可\n\n```dart\nonPressed: () {\n  Navigator.of(context)\n      .push(new MaterialPageRoute(builder: (_) {\n    return new Browser(\n      url: \"https://flutter-io.cn/\",\n      title: \"Flutter 中文社区\",\n    );\n  }));\n}\n```\n\n#### iOS plist 设置\n\n```xml\n<key>io.flutter.embedded_views_preview</key>\n<string>YES</string>\n```\n\n#### 设置 iOS 支持 http\n\n在  iOS 模块的 `Runner` 中的 ***info.plist*** 文件中添加如下字段：\n\n```xml\n<key>NSAppTransportSecurity</key>\n<dict>\n<key>NSAllowsArbitraryLoads</key>\n<true/>\n</dict>\n```\n\n然后执行 `flutter clean` 后重新运行即可访问 HTTP 网页","slug":"在Flutter中使用WebView","published":1,"updated":"2020-06-18T10:43:38.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bzb000zhb8y8qgc5jmy","content":"<h4 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h4><p>在 <strong><code>pubspec.yml</code></strong> 中的 <strong><code>dependencies</code></strong> 下加入 <em><a href=\"https://pub.flutter-io.cn/packages/webview_flutter\" target=\"_blank\" rel=\"noopener\">webview_flutter</a></em> 的 package</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">webview_flutter:</span> <span class=\"number\">0.3</span><span class=\"number\">.19</span><span class=\"string\">+9</span></span><br></pre></td></tr></table></figure>\n\n<p>然后点击标签栏出现的 <strong><em>Packages get</em></strong>，或者在终端输入 <code>flutter package get</code></p>\n<h4 id=\"新建-Widget\"><a href=\"#新建-Widget\" class=\"headerlink\" title=\"新建 Widget\"></a>新建 Widget</h4><p>新建一个 WebViewWidget，这个 Widget 接收两个参数，分别是浏览器页面标题和浏览页面的 url</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:webview_flutter/webview_flutter.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Browser</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Browser(&#123;Key key, <span class=\"keyword\">this</span>.url, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> url;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: WebView(</span><br><span class=\"line\">        initialUrl: url,</span><br><span class=\"line\">        javascriptMode: JavascriptMode.unrestricted,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-WebView\"><a href=\"#使用-WebView\" class=\"headerlink\" title=\"使用 WebView\"></a>使用 WebView</h4><p>使用的时候只需要跳转到该页面，并传入标题和网址即可</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onPressed: () &#123;</span><br><span class=\"line\">  Navigator.of(context)</span><br><span class=\"line\">      .push(<span class=\"keyword\">new</span> MaterialPageRoute(builder: (_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Browser(</span><br><span class=\"line\">      url: <span class=\"string\">\"https://flutter-io.cn/\"</span>,</span><br><span class=\"line\">      title: <span class=\"string\">\"Flutter 中文社区\"</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"iOS-plist-设置\"><a href=\"#iOS-plist-设置\" class=\"headerlink\" title=\"iOS plist 设置\"></a>iOS plist 设置</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>io.flutter.embedded_views_preview<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>YES<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置-iOS-支持-http\"><a href=\"#设置-iOS-支持-http\" class=\"headerlink\" title=\"设置 iOS 支持 http\"></a>设置 iOS 支持 http</h4><p>在  iOS 模块的 <code>Runner</code> 中的 <strong><em>info.plist</em></strong> 文件中添加如下字段：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAppTransportSecurity<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAllowsArbitraryLoads<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>flutter clean</code> 后重新运行即可访问 HTTP 网页</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"导包\"><a href=\"#导包\" class=\"headerlink\" title=\"导包\"></a>导包</h4><p>在 <strong><code>pubspec.yml</code></strong> 中的 <strong><code>dependencies</code></strong> 下加入 <em><a href=\"https://pub.flutter-io.cn/packages/webview_flutter\" target=\"_blank\" rel=\"noopener\">webview_flutter</a></em> 的 package</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dependencies:</span></span><br><span class=\"line\">  <span class=\"attr\">webview_flutter:</span> <span class=\"number\">0.3</span><span class=\"number\">.19</span><span class=\"string\">+9</span></span><br></pre></td></tr></table></figure>\n\n<p>然后点击标签栏出现的 <strong><em>Packages get</em></strong>，或者在终端输入 <code>flutter package get</code></p>\n<h4 id=\"新建-Widget\"><a href=\"#新建-Widget\" class=\"headerlink\" title=\"新建 Widget\"></a>新建 Widget</h4><p>新建一个 WebViewWidget，这个 Widget 接收两个参数，分别是浏览器页面标题和浏览页面的 url</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:webview_flutter/webview_flutter.dart'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Browser</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> Browser(&#123;Key key, <span class=\"keyword\">this</span>.url, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> url;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: WebView(</span><br><span class=\"line\">        initialUrl: url,</span><br><span class=\"line\">        javascriptMode: JavascriptMode.unrestricted,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用-WebView\"><a href=\"#使用-WebView\" class=\"headerlink\" title=\"使用 WebView\"></a>使用 WebView</h4><p>使用的时候只需要跳转到该页面，并传入标题和网址即可</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onPressed: () &#123;</span><br><span class=\"line\">  Navigator.of(context)</span><br><span class=\"line\">      .push(<span class=\"keyword\">new</span> MaterialPageRoute(builder: (_) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Browser(</span><br><span class=\"line\">      url: <span class=\"string\">\"https://flutter-io.cn/\"</span>,</span><br><span class=\"line\">      title: <span class=\"string\">\"Flutter 中文社区\"</span>,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"iOS-plist-设置\"><a href=\"#iOS-plist-设置\" class=\"headerlink\" title=\"iOS plist 设置\"></a>iOS plist 设置</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>io.flutter.embedded_views_preview<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span>&gt;</span>YES<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置-iOS-支持-http\"><a href=\"#设置-iOS-支持-http\" class=\"headerlink\" title=\"设置 iOS 支持 http\"></a>设置 iOS 支持 http</h4><p>在  iOS 模块的 <code>Runner</code> 中的 <strong><em>info.plist</em></strong> 文件中添加如下字段：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAppTransportSecurity<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dict</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">key</span>&gt;</span>NSAllowsArbitraryLoads<span class=\"tag\">&lt;/<span class=\"name\">key</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">true</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dict</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>flutter clean</code> 后重新运行即可访问 HTTP 网页</p>\n"},{"title":"天涯神贴之意淫中国未来","date":"2019-05-30T06:52:08.000Z","_content":"\n> 此贴是天涯大神 liwang3894 于 2006年11月19日发布在天涯的帖子。当时来看是何等大胆，现在再看，这是中国被低估了。\n\n#### 此贴已被天涯删除，以下是此贴发于2006年的部分证据\n\n![1](https://tva1.sinaimg.cn/large/00831rSTgy1gdbzayex24j30kb0bs0un.jpg)\n\n![2](https://tva1.sinaimg.cn/large/00831rSTgy1gdbzb72rtuj30i108agn7.jpg)\n\n![3](https://tva1.sinaimg.cn/large/00831rSTgy1gdbzbfgsotj30ji08s760.jpg)\n\n\n\n楼主：liwang3894 时间：2006-11-19 22:45:00\n\n虽然是YY，但是我觉得这些事情大部分都是可能发生的。或者类似的事情会发生。只不过是具体顺序，过程和发生时间有所不同罢了。\n\n2007年，中国经济持续保持高增长，房价增长放缓。嫦娥一号绕月探测器成功发射。\n\n2008年，北京奥运会成功举办，中国45枚金牌名列奖牌榜第二。神舟7号发射成功，宇航员出仓行走。台湾大选，马英九当选。\n\n2009年，两岸实现三通，结成更紧密贸易区。台湾经济开始复苏。\n\n2010年，京沪，京广高速铁路投入运营。时速300公里。中国外汇储备达20000亿美圆。中国GDP超过德国，位居世界第三。\n\n2011年，中国全年出国人次累计超过1亿，各国重视中国旅游市场。中国宽带用户超过2亿，位居世界第一。\n\n2012年，中国电影蓬勃发展，并且产生第一部科幻大片，讲述了未来发生世界大灾难，中国拯救世界的故事。影片制作精良，视觉效果震撼，气势恢弘，故事精彩。退休导演陈凯歌，张艺谋，冯小刚看罢影片，当即表示后生可畏，和新生代导演相比，自己就是SB。\n\n2013年，受到电影业成就的鼓舞，中国电视业后来居上，大量中国国产电视剧出口，中华风风靡亚洲。中国国内开始流行穿汉服过年，穿汉服结婚。\n\n2014年，中日韩－东盟成为世界上最大的自由贸易区。美国影响逐渐淡出亚洲。中国高速铁路网初步建成，一举解决铁路运力不足对中国经济发展的制约，春运成为历史。朝鲜借鉴中国模式，开始改革开放。\n\n2015年，中国成功发射载人登月航天器。首名中国女航天员成为有史以来第一个登上月球的中国人。航天器于农历八月十五降落在月球表面。全国超过10亿观众在中秋节亲眼目睹了现代版的嫦娥奔月。\n\n2016年，中国GDP总量超过日本，成为世界第二。中国人均GDP超过6000美圆。全国城镇人口超过60％，农业人口不足40%,中国正式完成了从农业化国家到后工业化国家的转变。同年，农村，城市户口差别取消。\n\n2017年，中国宣布建成科技创新型国家，这项计划始于2005年，终于利用12年时间完成。中国产业升级初步完成，中国企业的生产线更多的设立在非洲，印度，东南亚，拉丁美洲，中国本土制造比例逐渐下降。\n\n2018年，龙芯处理器占领国际CPU超过10％市场份额，中国国产汽车大量占领广大发展中国家市场，中国国内汽车拥有率达到20％，个人移动终端（那个时候估计不用手机了，应该是掌上电脑的感觉吧）拥有率超过80％，按照绝对数量，全部位居世界第一。\n\n2019年，朝鲜韩国结成自由经济体，经济总量位居世界第7位。当年全球GDP排行为1美国，2中国，3日本，4德国，5英国，6法国，7朝鲜韩国经济体，8意大利，9印度。\n\n2020年，有中国渔民在东海看到外形似龙的不明生物，引起全国媒体关注，一时间关于是否真的存在龙这种生物的讨论沸沸扬扬。随后，中国海军在东海与日本自卫队发生小规模冲突，中国海军随即占领钓鱼岛，宣布钓鱼岛为中国固有领土。并希望日方保持克制，不要使冲突升级。最终中日谈判解决争端，日本承认钓鱼岛属于中国，中国支持日本收回北方四岛之主权。\n\n2021年，一种以学习中华礼仪，复兴中华文化为目的的仿古私塾在民间兴起。有条件的家庭纷纷送孩子去这种私塾学习古礼，古文，古文化和琴棋书画，以增加孩子的修养。以往的英语，钢琴，芭蕾，素描等等培训机构逐渐被冷落。\n\n2022年，伊斯兰世界发动针对以色列的又一次战争，澳大利亚和欧洲的穆斯林同时举行游行示威支持圣战，并引起骚乱。美国联合北约军队参战。中国宣布启动反分裂国家法，武力统一台湾。五星红旗升起在台北上空。中国自此全部解放。中国人民解放军正式更名为中国人民军。并派20万精锐部队登陆台湾维持秩序。\n\n2023年，中东战争基本平息，阿拉伯世界再一次失败，但是对于西方文明的敌对情绪更加膨胀。美国表示承认中国对于台湾的占领和统治。中国政府在台湾推行一国两制，台湾体制维持不变，但是取消台湾军权，收编为中国人民军，由中央统一管理，取消总统选举，由中央委任，保持县市长选举。同年，中国大型空间站建成。北斗卫星导航系统初步完成，从此，伽利略，GPS在中国成为纯民用，军用全部采用北斗系统。\n\n2024年，中国第一个航母编队建成。活动区域，南海。有效捍卫了我国领海主权。中国初步借鉴台湾经验，在广东福建进行试点，实行县市长选举。同年，美国登陆火星。\n\n2025年，柳叶眉，丹凤眼，樱桃口，小鼻子，黑色直发逐渐成为中国女性的流行审美，美容整容行业纷纷推出相应服务，以往以高鼻梁，薄嘴唇，面部棱角分明，小脑袋为美的审美观逐渐被淘汰。同年，中美俄欧日联合在月球建立国际月球基地。从此，月球上有人类生存。\n\n2026年，俄罗斯远东的中国移民首次超过俄罗斯族，成为半中国化地区，中国对此地区有着潜移默化的影响力。俄罗斯人口继续衰退，经济影响力甚微，使得俄罗斯对远东心有余而力不足。\n\n2027年，朝鲜经过多年改革开放，各方面体制与中国无异，加之中国对朝鲜的扶持，朝鲜人均GDP达到韩国的60％。朝鲜半岛开始统一谈判。\n\n2028年，由于蒙古国在经济文化上越来越中国化，同时大量中国移民涌入蒙古，蒙古对中国的依赖越来越严重，最终蒙古以邦联形式加入中国。同年，中国大陆进行简化字修改方案试运行，将简化的不科学，不成功的简化字取消，所有简体字应保持与繁体字一一对应，并且结构合理，表意明确。同时，在港澳台地区推行新简体字。\n\n2029年，马来西亚华人独立建国，国号新新加坡。印尼华人开始独立斗争，但遭到残酷镇压。\n\n2030年，中国政府表示支持印尼华人的民主要求，认为当地华人有人民自决的权利，印尼政府对华人的残酷政策严重损害了当地华人的人权。中国本着人权大于主权的原则，派出2只航母编队和10万陆军进发印尼。\n\n2031年，经过几个月的战斗，印尼华人成功建国，国号，新新新加坡。国防暂时由中华人民共和国负责。西方媒体披露中国军队在印尼的战争中有种族灭绝的情况发生，导致大量印尼马来人被屠杀。中国表示这纯粹子虚乌有，印尼马来人的大量死亡完全系此人种生存力不强造成，属于自然现象，与中国军队无关。\n\n2032年，中国在国内推行基层民主选举，各地县市长由人民民主选举。省长仍由中央委任。朝鲜韩国统一谈判达成协议，组成联合政府，同时美军撤离韩国。新国家国号大朝鲜民国。\n\n2033年，大中华地区，包括中国大陆，香港，澳门，台湾，新加坡，新新加坡，新新新加坡，蒙古加盟共和国的经济总量首次与美国持平。当年全球GDP排行为1大中华，美国，3日本，4大朝鲜民国，5，德国，6法国，7印度，8英国。\n\n2034年，中国成功登陆火星。美军撤离日本，日美安保条约失效。中国主导建立亚洲共同体，成为世界最大的经济体。\n\n2035年，大朝鲜民国正式全面启用汉字书写，要求利用10年时间恢复汉字与朝鲜文书写系统并用。同年，日本限制假名和英语词汇的过量使用。规定有汉源词的词语一律使用汉字书写。同时日本人姓名中，不得出现假名。\n\n2036年，越南正式启用简体中文作为书写系统，朝鲜，日本也开始引进中国的简体字，保证本国汉字与中国汉字的一致。同年，全世界学习汉语的人数超过1亿。\n\n2037年，中国出台新移民法，严格限制外来移民和偷渡者。\n\n2038年，亚洲共同体把人民币作为通用货币。日元汇率与人民币挂钩。以西方世界主导的经济秩序正式崩溃。\n\n2040年，东方世界的财富超过西方世界，全球GDP排行为1大中华地区2欧盟3北美（美国加拿大）4日本，5大朝鲜民国，6印度。中国人均GDP，达到150000人民币，成为中等发达国家。\n\n中国新一个强盛期正式开始。\n\n好了，我YY完了，如果大家觉得我的时间表太快的话，可以时代把时间成比例放大。我认为，如果中国不崩溃，那么中国的趋势大概就是我YY的这样。不过谁也不知道未来究竟是什么样的。也许一切比你所能想到的更加激动人心，更加波澜壮阔。","source":"_posts/天涯神贴之意淫中国未来.md","raw":"---\ntitle: 天涯神贴之意淫中国未来\ncategories:\n  - 其他\ntags:\n  - 中国未来\ndate: 2019-05-30 14:52:08\n---\n\n> 此贴是天涯大神 liwang3894 于 2006年11月19日发布在天涯的帖子。当时来看是何等大胆，现在再看，这是中国被低估了。\n\n#### 此贴已被天涯删除，以下是此贴发于2006年的部分证据\n\n![1](https://tva1.sinaimg.cn/large/00831rSTgy1gdbzayex24j30kb0bs0un.jpg)\n\n![2](https://tva1.sinaimg.cn/large/00831rSTgy1gdbzb72rtuj30i108agn7.jpg)\n\n![3](https://tva1.sinaimg.cn/large/00831rSTgy1gdbzbfgsotj30ji08s760.jpg)\n\n\n\n楼主：liwang3894 时间：2006-11-19 22:45:00\n\n虽然是YY，但是我觉得这些事情大部分都是可能发生的。或者类似的事情会发生。只不过是具体顺序，过程和发生时间有所不同罢了。\n\n2007年，中国经济持续保持高增长，房价增长放缓。嫦娥一号绕月探测器成功发射。\n\n2008年，北京奥运会成功举办，中国45枚金牌名列奖牌榜第二。神舟7号发射成功，宇航员出仓行走。台湾大选，马英九当选。\n\n2009年，两岸实现三通，结成更紧密贸易区。台湾经济开始复苏。\n\n2010年，京沪，京广高速铁路投入运营。时速300公里。中国外汇储备达20000亿美圆。中国GDP超过德国，位居世界第三。\n\n2011年，中国全年出国人次累计超过1亿，各国重视中国旅游市场。中国宽带用户超过2亿，位居世界第一。\n\n2012年，中国电影蓬勃发展，并且产生第一部科幻大片，讲述了未来发生世界大灾难，中国拯救世界的故事。影片制作精良，视觉效果震撼，气势恢弘，故事精彩。退休导演陈凯歌，张艺谋，冯小刚看罢影片，当即表示后生可畏，和新生代导演相比，自己就是SB。\n\n2013年，受到电影业成就的鼓舞，中国电视业后来居上，大量中国国产电视剧出口，中华风风靡亚洲。中国国内开始流行穿汉服过年，穿汉服结婚。\n\n2014年，中日韩－东盟成为世界上最大的自由贸易区。美国影响逐渐淡出亚洲。中国高速铁路网初步建成，一举解决铁路运力不足对中国经济发展的制约，春运成为历史。朝鲜借鉴中国模式，开始改革开放。\n\n2015年，中国成功发射载人登月航天器。首名中国女航天员成为有史以来第一个登上月球的中国人。航天器于农历八月十五降落在月球表面。全国超过10亿观众在中秋节亲眼目睹了现代版的嫦娥奔月。\n\n2016年，中国GDP总量超过日本，成为世界第二。中国人均GDP超过6000美圆。全国城镇人口超过60％，农业人口不足40%,中国正式完成了从农业化国家到后工业化国家的转变。同年，农村，城市户口差别取消。\n\n2017年，中国宣布建成科技创新型国家，这项计划始于2005年，终于利用12年时间完成。中国产业升级初步完成，中国企业的生产线更多的设立在非洲，印度，东南亚，拉丁美洲，中国本土制造比例逐渐下降。\n\n2018年，龙芯处理器占领国际CPU超过10％市场份额，中国国产汽车大量占领广大发展中国家市场，中国国内汽车拥有率达到20％，个人移动终端（那个时候估计不用手机了，应该是掌上电脑的感觉吧）拥有率超过80％，按照绝对数量，全部位居世界第一。\n\n2019年，朝鲜韩国结成自由经济体，经济总量位居世界第7位。当年全球GDP排行为1美国，2中国，3日本，4德国，5英国，6法国，7朝鲜韩国经济体，8意大利，9印度。\n\n2020年，有中国渔民在东海看到外形似龙的不明生物，引起全国媒体关注，一时间关于是否真的存在龙这种生物的讨论沸沸扬扬。随后，中国海军在东海与日本自卫队发生小规模冲突，中国海军随即占领钓鱼岛，宣布钓鱼岛为中国固有领土。并希望日方保持克制，不要使冲突升级。最终中日谈判解决争端，日本承认钓鱼岛属于中国，中国支持日本收回北方四岛之主权。\n\n2021年，一种以学习中华礼仪，复兴中华文化为目的的仿古私塾在民间兴起。有条件的家庭纷纷送孩子去这种私塾学习古礼，古文，古文化和琴棋书画，以增加孩子的修养。以往的英语，钢琴，芭蕾，素描等等培训机构逐渐被冷落。\n\n2022年，伊斯兰世界发动针对以色列的又一次战争，澳大利亚和欧洲的穆斯林同时举行游行示威支持圣战，并引起骚乱。美国联合北约军队参战。中国宣布启动反分裂国家法，武力统一台湾。五星红旗升起在台北上空。中国自此全部解放。中国人民解放军正式更名为中国人民军。并派20万精锐部队登陆台湾维持秩序。\n\n2023年，中东战争基本平息，阿拉伯世界再一次失败，但是对于西方文明的敌对情绪更加膨胀。美国表示承认中国对于台湾的占领和统治。中国政府在台湾推行一国两制，台湾体制维持不变，但是取消台湾军权，收编为中国人民军，由中央统一管理，取消总统选举，由中央委任，保持县市长选举。同年，中国大型空间站建成。北斗卫星导航系统初步完成，从此，伽利略，GPS在中国成为纯民用，军用全部采用北斗系统。\n\n2024年，中国第一个航母编队建成。活动区域，南海。有效捍卫了我国领海主权。中国初步借鉴台湾经验，在广东福建进行试点，实行县市长选举。同年，美国登陆火星。\n\n2025年，柳叶眉，丹凤眼，樱桃口，小鼻子，黑色直发逐渐成为中国女性的流行审美，美容整容行业纷纷推出相应服务，以往以高鼻梁，薄嘴唇，面部棱角分明，小脑袋为美的审美观逐渐被淘汰。同年，中美俄欧日联合在月球建立国际月球基地。从此，月球上有人类生存。\n\n2026年，俄罗斯远东的中国移民首次超过俄罗斯族，成为半中国化地区，中国对此地区有着潜移默化的影响力。俄罗斯人口继续衰退，经济影响力甚微，使得俄罗斯对远东心有余而力不足。\n\n2027年，朝鲜经过多年改革开放，各方面体制与中国无异，加之中国对朝鲜的扶持，朝鲜人均GDP达到韩国的60％。朝鲜半岛开始统一谈判。\n\n2028年，由于蒙古国在经济文化上越来越中国化，同时大量中国移民涌入蒙古，蒙古对中国的依赖越来越严重，最终蒙古以邦联形式加入中国。同年，中国大陆进行简化字修改方案试运行，将简化的不科学，不成功的简化字取消，所有简体字应保持与繁体字一一对应，并且结构合理，表意明确。同时，在港澳台地区推行新简体字。\n\n2029年，马来西亚华人独立建国，国号新新加坡。印尼华人开始独立斗争，但遭到残酷镇压。\n\n2030年，中国政府表示支持印尼华人的民主要求，认为当地华人有人民自决的权利，印尼政府对华人的残酷政策严重损害了当地华人的人权。中国本着人权大于主权的原则，派出2只航母编队和10万陆军进发印尼。\n\n2031年，经过几个月的战斗，印尼华人成功建国，国号，新新新加坡。国防暂时由中华人民共和国负责。西方媒体披露中国军队在印尼的战争中有种族灭绝的情况发生，导致大量印尼马来人被屠杀。中国表示这纯粹子虚乌有，印尼马来人的大量死亡完全系此人种生存力不强造成，属于自然现象，与中国军队无关。\n\n2032年，中国在国内推行基层民主选举，各地县市长由人民民主选举。省长仍由中央委任。朝鲜韩国统一谈判达成协议，组成联合政府，同时美军撤离韩国。新国家国号大朝鲜民国。\n\n2033年，大中华地区，包括中国大陆，香港，澳门，台湾，新加坡，新新加坡，新新新加坡，蒙古加盟共和国的经济总量首次与美国持平。当年全球GDP排行为1大中华，美国，3日本，4大朝鲜民国，5，德国，6法国，7印度，8英国。\n\n2034年，中国成功登陆火星。美军撤离日本，日美安保条约失效。中国主导建立亚洲共同体，成为世界最大的经济体。\n\n2035年，大朝鲜民国正式全面启用汉字书写，要求利用10年时间恢复汉字与朝鲜文书写系统并用。同年，日本限制假名和英语词汇的过量使用。规定有汉源词的词语一律使用汉字书写。同时日本人姓名中，不得出现假名。\n\n2036年，越南正式启用简体中文作为书写系统，朝鲜，日本也开始引进中国的简体字，保证本国汉字与中国汉字的一致。同年，全世界学习汉语的人数超过1亿。\n\n2037年，中国出台新移民法，严格限制外来移民和偷渡者。\n\n2038年，亚洲共同体把人民币作为通用货币。日元汇率与人民币挂钩。以西方世界主导的经济秩序正式崩溃。\n\n2040年，东方世界的财富超过西方世界，全球GDP排行为1大中华地区2欧盟3北美（美国加拿大）4日本，5大朝鲜民国，6印度。中国人均GDP，达到150000人民币，成为中等发达国家。\n\n中国新一个强盛期正式开始。\n\n好了，我YY完了，如果大家觉得我的时间表太快的话，可以时代把时间成比例放大。我认为，如果中国不崩溃，那么中国的趋势大概就是我YY的这样。不过谁也不知道未来究竟是什么样的。也许一切比你所能想到的更加激动人心，更加波澜壮阔。","slug":"天涯神贴之意淫中国未来","published":1,"updated":"2020-06-18T10:46:20.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bzc0012hb8y6mvyd7yj","content":"<blockquote>\n<p>此贴是天涯大神 liwang3894 于 2006年11月19日发布在天涯的帖子。当时来看是何等大胆，现在再看，这是中国被低估了。</p>\n</blockquote>\n<h4 id=\"此贴已被天涯删除，以下是此贴发于2006年的部分证据\"><a href=\"#此贴已被天涯删除，以下是此贴发于2006年的部分证据\" class=\"headerlink\" title=\"此贴已被天涯删除，以下是此贴发于2006年的部分证据\"></a>此贴已被天涯删除，以下是此贴发于2006年的部分证据</h4><p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbzayex24j30kb0bs0un.jpg\" alt=\"1\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbzb72rtuj30i108agn7.jpg\" alt=\"2\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbzbfgsotj30ji08s760.jpg\" alt=\"3\"></p>\n<p>楼主：liwang3894 时间：2006-11-19 22:45:00</p>\n<p>虽然是YY，但是我觉得这些事情大部分都是可能发生的。或者类似的事情会发生。只不过是具体顺序，过程和发生时间有所不同罢了。</p>\n<p>2007年，中国经济持续保持高增长，房价增长放缓。嫦娥一号绕月探测器成功发射。</p>\n<p>2008年，北京奥运会成功举办，中国45枚金牌名列奖牌榜第二。神舟7号发射成功，宇航员出仓行走。台湾大选，马英九当选。</p>\n<p>2009年，两岸实现三通，结成更紧密贸易区。台湾经济开始复苏。</p>\n<p>2010年，京沪，京广高速铁路投入运营。时速300公里。中国外汇储备达20000亿美圆。中国GDP超过德国，位居世界第三。</p>\n<p>2011年，中国全年出国人次累计超过1亿，各国重视中国旅游市场。中国宽带用户超过2亿，位居世界第一。</p>\n<p>2012年，中国电影蓬勃发展，并且产生第一部科幻大片，讲述了未来发生世界大灾难，中国拯救世界的故事。影片制作精良，视觉效果震撼，气势恢弘，故事精彩。退休导演陈凯歌，张艺谋，冯小刚看罢影片，当即表示后生可畏，和新生代导演相比，自己就是SB。</p>\n<p>2013年，受到电影业成就的鼓舞，中国电视业后来居上，大量中国国产电视剧出口，中华风风靡亚洲。中国国内开始流行穿汉服过年，穿汉服结婚。</p>\n<p>2014年，中日韩－东盟成为世界上最大的自由贸易区。美国影响逐渐淡出亚洲。中国高速铁路网初步建成，一举解决铁路运力不足对中国经济发展的制约，春运成为历史。朝鲜借鉴中国模式，开始改革开放。</p>\n<p>2015年，中国成功发射载人登月航天器。首名中国女航天员成为有史以来第一个登上月球的中国人。航天器于农历八月十五降落在月球表面。全国超过10亿观众在中秋节亲眼目睹了现代版的嫦娥奔月。</p>\n<p>2016年，中国GDP总量超过日本，成为世界第二。中国人均GDP超过6000美圆。全国城镇人口超过60％，农业人口不足40%,中国正式完成了从农业化国家到后工业化国家的转变。同年，农村，城市户口差别取消。</p>\n<p>2017年，中国宣布建成科技创新型国家，这项计划始于2005年，终于利用12年时间完成。中国产业升级初步完成，中国企业的生产线更多的设立在非洲，印度，东南亚，拉丁美洲，中国本土制造比例逐渐下降。</p>\n<p>2018年，龙芯处理器占领国际CPU超过10％市场份额，中国国产汽车大量占领广大发展中国家市场，中国国内汽车拥有率达到20％，个人移动终端（那个时候估计不用手机了，应该是掌上电脑的感觉吧）拥有率超过80％，按照绝对数量，全部位居世界第一。</p>\n<p>2019年，朝鲜韩国结成自由经济体，经济总量位居世界第7位。当年全球GDP排行为1美国，2中国，3日本，4德国，5英国，6法国，7朝鲜韩国经济体，8意大利，9印度。</p>\n<p>2020年，有中国渔民在东海看到外形似龙的不明生物，引起全国媒体关注，一时间关于是否真的存在龙这种生物的讨论沸沸扬扬。随后，中国海军在东海与日本自卫队发生小规模冲突，中国海军随即占领钓鱼岛，宣布钓鱼岛为中国固有领土。并希望日方保持克制，不要使冲突升级。最终中日谈判解决争端，日本承认钓鱼岛属于中国，中国支持日本收回北方四岛之主权。</p>\n<p>2021年，一种以学习中华礼仪，复兴中华文化为目的的仿古私塾在民间兴起。有条件的家庭纷纷送孩子去这种私塾学习古礼，古文，古文化和琴棋书画，以增加孩子的修养。以往的英语，钢琴，芭蕾，素描等等培训机构逐渐被冷落。</p>\n<p>2022年，伊斯兰世界发动针对以色列的又一次战争，澳大利亚和欧洲的穆斯林同时举行游行示威支持圣战，并引起骚乱。美国联合北约军队参战。中国宣布启动反分裂国家法，武力统一台湾。五星红旗升起在台北上空。中国自此全部解放。中国人民解放军正式更名为中国人民军。并派20万精锐部队登陆台湾维持秩序。</p>\n<p>2023年，中东战争基本平息，阿拉伯世界再一次失败，但是对于西方文明的敌对情绪更加膨胀。美国表示承认中国对于台湾的占领和统治。中国政府在台湾推行一国两制，台湾体制维持不变，但是取消台湾军权，收编为中国人民军，由中央统一管理，取消总统选举，由中央委任，保持县市长选举。同年，中国大型空间站建成。北斗卫星导航系统初步完成，从此，伽利略，GPS在中国成为纯民用，军用全部采用北斗系统。</p>\n<p>2024年，中国第一个航母编队建成。活动区域，南海。有效捍卫了我国领海主权。中国初步借鉴台湾经验，在广东福建进行试点，实行县市长选举。同年，美国登陆火星。</p>\n<p>2025年，柳叶眉，丹凤眼，樱桃口，小鼻子，黑色直发逐渐成为中国女性的流行审美，美容整容行业纷纷推出相应服务，以往以高鼻梁，薄嘴唇，面部棱角分明，小脑袋为美的审美观逐渐被淘汰。同年，中美俄欧日联合在月球建立国际月球基地。从此，月球上有人类生存。</p>\n<p>2026年，俄罗斯远东的中国移民首次超过俄罗斯族，成为半中国化地区，中国对此地区有着潜移默化的影响力。俄罗斯人口继续衰退，经济影响力甚微，使得俄罗斯对远东心有余而力不足。</p>\n<p>2027年，朝鲜经过多年改革开放，各方面体制与中国无异，加之中国对朝鲜的扶持，朝鲜人均GDP达到韩国的60％。朝鲜半岛开始统一谈判。</p>\n<p>2028年，由于蒙古国在经济文化上越来越中国化，同时大量中国移民涌入蒙古，蒙古对中国的依赖越来越严重，最终蒙古以邦联形式加入中国。同年，中国大陆进行简化字修改方案试运行，将简化的不科学，不成功的简化字取消，所有简体字应保持与繁体字一一对应，并且结构合理，表意明确。同时，在港澳台地区推行新简体字。</p>\n<p>2029年，马来西亚华人独立建国，国号新新加坡。印尼华人开始独立斗争，但遭到残酷镇压。</p>\n<p>2030年，中国政府表示支持印尼华人的民主要求，认为当地华人有人民自决的权利，印尼政府对华人的残酷政策严重损害了当地华人的人权。中国本着人权大于主权的原则，派出2只航母编队和10万陆军进发印尼。</p>\n<p>2031年，经过几个月的战斗，印尼华人成功建国，国号，新新新加坡。国防暂时由中华人民共和国负责。西方媒体披露中国军队在印尼的战争中有种族灭绝的情况发生，导致大量印尼马来人被屠杀。中国表示这纯粹子虚乌有，印尼马来人的大量死亡完全系此人种生存力不强造成，属于自然现象，与中国军队无关。</p>\n<p>2032年，中国在国内推行基层民主选举，各地县市长由人民民主选举。省长仍由中央委任。朝鲜韩国统一谈判达成协议，组成联合政府，同时美军撤离韩国。新国家国号大朝鲜民国。</p>\n<p>2033年，大中华地区，包括中国大陆，香港，澳门，台湾，新加坡，新新加坡，新新新加坡，蒙古加盟共和国的经济总量首次与美国持平。当年全球GDP排行为1大中华，美国，3日本，4大朝鲜民国，5，德国，6法国，7印度，8英国。</p>\n<p>2034年，中国成功登陆火星。美军撤离日本，日美安保条约失效。中国主导建立亚洲共同体，成为世界最大的经济体。</p>\n<p>2035年，大朝鲜民国正式全面启用汉字书写，要求利用10年时间恢复汉字与朝鲜文书写系统并用。同年，日本限制假名和英语词汇的过量使用。规定有汉源词的词语一律使用汉字书写。同时日本人姓名中，不得出现假名。</p>\n<p>2036年，越南正式启用简体中文作为书写系统，朝鲜，日本也开始引进中国的简体字，保证本国汉字与中国汉字的一致。同年，全世界学习汉语的人数超过1亿。</p>\n<p>2037年，中国出台新移民法，严格限制外来移民和偷渡者。</p>\n<p>2038年，亚洲共同体把人民币作为通用货币。日元汇率与人民币挂钩。以西方世界主导的经济秩序正式崩溃。</p>\n<p>2040年，东方世界的财富超过西方世界，全球GDP排行为1大中华地区2欧盟3北美（美国加拿大）4日本，5大朝鲜民国，6印度。中国人均GDP，达到150000人民币，成为中等发达国家。</p>\n<p>中国新一个强盛期正式开始。</p>\n<p>好了，我YY完了，如果大家觉得我的时间表太快的话，可以时代把时间成比例放大。我认为，如果中国不崩溃，那么中国的趋势大概就是我YY的这样。不过谁也不知道未来究竟是什么样的。也许一切比你所能想到的更加激动人心，更加波澜壮阔。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>此贴是天涯大神 liwang3894 于 2006年11月19日发布在天涯的帖子。当时来看是何等大胆，现在再看，这是中国被低估了。</p>\n</blockquote>\n<h4 id=\"此贴已被天涯删除，以下是此贴发于2006年的部分证据\"><a href=\"#此贴已被天涯删除，以下是此贴发于2006年的部分证据\" class=\"headerlink\" title=\"此贴已被天涯删除，以下是此贴发于2006年的部分证据\"></a>此贴已被天涯删除，以下是此贴发于2006年的部分证据</h4><p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbzayex24j30kb0bs0un.jpg\" alt=\"1\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbzb72rtuj30i108agn7.jpg\" alt=\"2\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gdbzbfgsotj30ji08s760.jpg\" alt=\"3\"></p>\n<p>楼主：liwang3894 时间：2006-11-19 22:45:00</p>\n<p>虽然是YY，但是我觉得这些事情大部分都是可能发生的。或者类似的事情会发生。只不过是具体顺序，过程和发生时间有所不同罢了。</p>\n<p>2007年，中国经济持续保持高增长，房价增长放缓。嫦娥一号绕月探测器成功发射。</p>\n<p>2008年，北京奥运会成功举办，中国45枚金牌名列奖牌榜第二。神舟7号发射成功，宇航员出仓行走。台湾大选，马英九当选。</p>\n<p>2009年，两岸实现三通，结成更紧密贸易区。台湾经济开始复苏。</p>\n<p>2010年，京沪，京广高速铁路投入运营。时速300公里。中国外汇储备达20000亿美圆。中国GDP超过德国，位居世界第三。</p>\n<p>2011年，中国全年出国人次累计超过1亿，各国重视中国旅游市场。中国宽带用户超过2亿，位居世界第一。</p>\n<p>2012年，中国电影蓬勃发展，并且产生第一部科幻大片，讲述了未来发生世界大灾难，中国拯救世界的故事。影片制作精良，视觉效果震撼，气势恢弘，故事精彩。退休导演陈凯歌，张艺谋，冯小刚看罢影片，当即表示后生可畏，和新生代导演相比，自己就是SB。</p>\n<p>2013年，受到电影业成就的鼓舞，中国电视业后来居上，大量中国国产电视剧出口，中华风风靡亚洲。中国国内开始流行穿汉服过年，穿汉服结婚。</p>\n<p>2014年，中日韩－东盟成为世界上最大的自由贸易区。美国影响逐渐淡出亚洲。中国高速铁路网初步建成，一举解决铁路运力不足对中国经济发展的制约，春运成为历史。朝鲜借鉴中国模式，开始改革开放。</p>\n<p>2015年，中国成功发射载人登月航天器。首名中国女航天员成为有史以来第一个登上月球的中国人。航天器于农历八月十五降落在月球表面。全国超过10亿观众在中秋节亲眼目睹了现代版的嫦娥奔月。</p>\n<p>2016年，中国GDP总量超过日本，成为世界第二。中国人均GDP超过6000美圆。全国城镇人口超过60％，农业人口不足40%,中国正式完成了从农业化国家到后工业化国家的转变。同年，农村，城市户口差别取消。</p>\n<p>2017年，中国宣布建成科技创新型国家，这项计划始于2005年，终于利用12年时间完成。中国产业升级初步完成，中国企业的生产线更多的设立在非洲，印度，东南亚，拉丁美洲，中国本土制造比例逐渐下降。</p>\n<p>2018年，龙芯处理器占领国际CPU超过10％市场份额，中国国产汽车大量占领广大发展中国家市场，中国国内汽车拥有率达到20％，个人移动终端（那个时候估计不用手机了，应该是掌上电脑的感觉吧）拥有率超过80％，按照绝对数量，全部位居世界第一。</p>\n<p>2019年，朝鲜韩国结成自由经济体，经济总量位居世界第7位。当年全球GDP排行为1美国，2中国，3日本，4德国，5英国，6法国，7朝鲜韩国经济体，8意大利，9印度。</p>\n<p>2020年，有中国渔民在东海看到外形似龙的不明生物，引起全国媒体关注，一时间关于是否真的存在龙这种生物的讨论沸沸扬扬。随后，中国海军在东海与日本自卫队发生小规模冲突，中国海军随即占领钓鱼岛，宣布钓鱼岛为中国固有领土。并希望日方保持克制，不要使冲突升级。最终中日谈判解决争端，日本承认钓鱼岛属于中国，中国支持日本收回北方四岛之主权。</p>\n<p>2021年，一种以学习中华礼仪，复兴中华文化为目的的仿古私塾在民间兴起。有条件的家庭纷纷送孩子去这种私塾学习古礼，古文，古文化和琴棋书画，以增加孩子的修养。以往的英语，钢琴，芭蕾，素描等等培训机构逐渐被冷落。</p>\n<p>2022年，伊斯兰世界发动针对以色列的又一次战争，澳大利亚和欧洲的穆斯林同时举行游行示威支持圣战，并引起骚乱。美国联合北约军队参战。中国宣布启动反分裂国家法，武力统一台湾。五星红旗升起在台北上空。中国自此全部解放。中国人民解放军正式更名为中国人民军。并派20万精锐部队登陆台湾维持秩序。</p>\n<p>2023年，中东战争基本平息，阿拉伯世界再一次失败，但是对于西方文明的敌对情绪更加膨胀。美国表示承认中国对于台湾的占领和统治。中国政府在台湾推行一国两制，台湾体制维持不变，但是取消台湾军权，收编为中国人民军，由中央统一管理，取消总统选举，由中央委任，保持县市长选举。同年，中国大型空间站建成。北斗卫星导航系统初步完成，从此，伽利略，GPS在中国成为纯民用，军用全部采用北斗系统。</p>\n<p>2024年，中国第一个航母编队建成。活动区域，南海。有效捍卫了我国领海主权。中国初步借鉴台湾经验，在广东福建进行试点，实行县市长选举。同年，美国登陆火星。</p>\n<p>2025年，柳叶眉，丹凤眼，樱桃口，小鼻子，黑色直发逐渐成为中国女性的流行审美，美容整容行业纷纷推出相应服务，以往以高鼻梁，薄嘴唇，面部棱角分明，小脑袋为美的审美观逐渐被淘汰。同年，中美俄欧日联合在月球建立国际月球基地。从此，月球上有人类生存。</p>\n<p>2026年，俄罗斯远东的中国移民首次超过俄罗斯族，成为半中国化地区，中国对此地区有着潜移默化的影响力。俄罗斯人口继续衰退，经济影响力甚微，使得俄罗斯对远东心有余而力不足。</p>\n<p>2027年，朝鲜经过多年改革开放，各方面体制与中国无异，加之中国对朝鲜的扶持，朝鲜人均GDP达到韩国的60％。朝鲜半岛开始统一谈判。</p>\n<p>2028年，由于蒙古国在经济文化上越来越中国化，同时大量中国移民涌入蒙古，蒙古对中国的依赖越来越严重，最终蒙古以邦联形式加入中国。同年，中国大陆进行简化字修改方案试运行，将简化的不科学，不成功的简化字取消，所有简体字应保持与繁体字一一对应，并且结构合理，表意明确。同时，在港澳台地区推行新简体字。</p>\n<p>2029年，马来西亚华人独立建国，国号新新加坡。印尼华人开始独立斗争，但遭到残酷镇压。</p>\n<p>2030年，中国政府表示支持印尼华人的民主要求，认为当地华人有人民自决的权利，印尼政府对华人的残酷政策严重损害了当地华人的人权。中国本着人权大于主权的原则，派出2只航母编队和10万陆军进发印尼。</p>\n<p>2031年，经过几个月的战斗，印尼华人成功建国，国号，新新新加坡。国防暂时由中华人民共和国负责。西方媒体披露中国军队在印尼的战争中有种族灭绝的情况发生，导致大量印尼马来人被屠杀。中国表示这纯粹子虚乌有，印尼马来人的大量死亡完全系此人种生存力不强造成，属于自然现象，与中国军队无关。</p>\n<p>2032年，中国在国内推行基层民主选举，各地县市长由人民民主选举。省长仍由中央委任。朝鲜韩国统一谈判达成协议，组成联合政府，同时美军撤离韩国。新国家国号大朝鲜民国。</p>\n<p>2033年，大中华地区，包括中国大陆，香港，澳门，台湾，新加坡，新新加坡，新新新加坡，蒙古加盟共和国的经济总量首次与美国持平。当年全球GDP排行为1大中华，美国，3日本，4大朝鲜民国，5，德国，6法国，7印度，8英国。</p>\n<p>2034年，中国成功登陆火星。美军撤离日本，日美安保条约失效。中国主导建立亚洲共同体，成为世界最大的经济体。</p>\n<p>2035年，大朝鲜民国正式全面启用汉字书写，要求利用10年时间恢复汉字与朝鲜文书写系统并用。同年，日本限制假名和英语词汇的过量使用。规定有汉源词的词语一律使用汉字书写。同时日本人姓名中，不得出现假名。</p>\n<p>2036年，越南正式启用简体中文作为书写系统，朝鲜，日本也开始引进中国的简体字，保证本国汉字与中国汉字的一致。同年，全世界学习汉语的人数超过1亿。</p>\n<p>2037年，中国出台新移民法，严格限制外来移民和偷渡者。</p>\n<p>2038年，亚洲共同体把人民币作为通用货币。日元汇率与人民币挂钩。以西方世界主导的经济秩序正式崩溃。</p>\n<p>2040年，东方世界的财富超过西方世界，全球GDP排行为1大中华地区2欧盟3北美（美国加拿大）4日本，5大朝鲜民国，6印度。中国人均GDP，达到150000人民币，成为中等发达国家。</p>\n<p>中国新一个强盛期正式开始。</p>\n<p>好了，我YY完了，如果大家觉得我的时间表太快的话，可以时代把时间成比例放大。我认为，如果中国不崩溃，那么中国的趋势大概就是我YY的这样。不过谁也不知道未来究竟是什么样的。也许一切比你所能想到的更加激动人心，更加波澜壮阔。</p>\n"},{"title":"诗词名句鉴赏","date":"2020-03-03T02:23:26.000Z","_content":"\n> 少年游 「清珺」\n\n![少年游](https://i.loli.net/2020/04/03/JeVsCoERtXhfMyG.png)\n\n","source":"_posts/诗词名句鉴赏.md","raw":"---\ntitle: 诗词名句鉴赏\ncategories:\n  - 其他\ntags:\n  - 诗词\ndate: 2020-03-03 10:23:26\n---\n\n> 少年游 「清珺」\n\n![少年游](https://i.loli.net/2020/04/03/JeVsCoERtXhfMyG.png)\n\n","slug":"诗词名句鉴赏","published":1,"updated":"2020-06-18T10:46:30.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckblu3bze0016hb8y9jeadsar","content":"<blockquote>\n<p>少年游 「清珺」</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/04/03/JeVsCoERtXhfMyG.png\" alt=\"少年游\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>少年游 「清珺」</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/04/03/JeVsCoERtXhfMyG.png\" alt=\"少年游\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckblu3byi0000hb8y0kaj42lj","category_id":"ckblu3byp0004hb8yf6c735f9","_id":"ckblu3byy000ghb8y2we0h8bb"},{"post_id":"ckblu3byu000ahb8y1n6xd15m","category_id":"ckblu3byp0004hb8yf6c735f9","_id":"ckblu3bz1000khb8y2020624l"},{"post_id":"ckblu3byn0002hb8y6txi0n1j","category_id":"ckblu3byu000bhb8y5hej58q5","_id":"ckblu3bz2000mhb8y6f9r9ecx"},{"post_id":"ckblu3byz000jhb8ycybxa6um","category_id":"ckblu3byy000hhb8yczu04qyt","_id":"ckblu3bz6000shb8y62zj90fw"},{"post_id":"ckblu3byq0006hb8y1zeth7wk","category_id":"ckblu3byy000hhb8yczu04qyt","_id":"ckblu3bz8000xhb8yh09na8bo"},{"post_id":"ckblu3bz1000lhb8y5cobgsbn","category_id":"ckblu3byy000hhb8yczu04qyt","_id":"ckblu3bzb0010hb8y8jd03epf"},{"post_id":"ckblu3bys0008hb8y40ate1zh","category_id":"ckblu3bz2000nhb8ygip567cn","_id":"ckblu3bzd0013hb8yd5g92rag"},{"post_id":"ckblu3byv000ehb8y4u7ad0t5","category_id":"ckblu3byy000hhb8yczu04qyt","_id":"ckblu3bzf0019hb8yabnf9cka"},{"post_id":"ckblu3bzb000zhb8y8qgc5jmy","category_id":"ckblu3bz2000nhb8ygip567cn","_id":"ckblu3bzg001bhb8ycjsb3xw7"},{"post_id":"ckblu3byx000fhb8y2en24a7g","category_id":"ckblu3byy000hhb8yczu04qyt","_id":"ckblu3bzg001dhb8y12oja70x"},{"post_id":"ckblu3bz4000phb8y70wdaio3","category_id":"ckblu3bzf0018hb8y7urb8o14","_id":"ckblu3bzh001hhb8y9jtndhlr"},{"post_id":"ckblu3bz6000rhb8y2st4bso9","category_id":"ckblu3bzg001ehb8y8s771a93","_id":"ckblu3bzi001mhb8y6l4thfs6"},{"post_id":"ckblu3bz8000whb8y3rnc1x0h","category_id":"ckblu3bzg001ehb8y8s771a93","_id":"ckblu3bzj001qhb8y58sx6y4u"},{"post_id":"ckblu3bzc0012hb8y6mvyd7yj","category_id":"ckblu3bzf0018hb8y7urb8o14","_id":"ckblu3bzk001thb8y845z4u88"},{"post_id":"ckblu3bze0016hb8y9jeadsar","category_id":"ckblu3bzf0018hb8y7urb8o14","_id":"ckblu3bzl001whb8yamhk6640"}],"PostTag":[{"post_id":"ckblu3byi0000hb8y0kaj42lj","tag_id":"ckblu3byp0005hb8y78g43l5k","_id":"ckblu3byv000dhb8y7ll266qz"},{"post_id":"ckblu3byn0002hb8y6txi0n1j","tag_id":"ckblu3byu000chb8y8bvrh39i","_id":"ckblu3bz5000qhb8y5eci7zt1"},{"post_id":"ckblu3byn0002hb8y6txi0n1j","tag_id":"ckblu3byy000ihb8yg7wge01g","_id":"ckblu3bz7000thb8ygdl8agpz"},{"post_id":"ckblu3byq0006hb8y1zeth7wk","tag_id":"ckblu3bz3000ohb8y5sap501e","_id":"ckblu3bza000yhb8y8vzn14z7"},{"post_id":"ckblu3bzb000zhb8y8qgc5jmy","tag_id":"ckblu3bz7000vhb8y8qwd7iwk","_id":"ckblu3bze0015hb8yg5rwfsph"},{"post_id":"ckblu3bys0008hb8y40ate1zh","tag_id":"ckblu3bz7000vhb8y8qwd7iwk","_id":"ckblu3bzf0017hb8ydq2b4fna"},{"post_id":"ckblu3byu000ahb8y1n6xd15m","tag_id":"ckblu3bzd0014hb8y852j3env","_id":"ckblu3bzg001chb8y8jkfeui4"},{"post_id":"ckblu3byv000ehb8y4u7ad0t5","tag_id":"ckblu3bzg001ahb8ya98tc585","_id":"ckblu3bzh001ghb8ygxozhb04"},{"post_id":"ckblu3byx000fhb8y2en24a7g","tag_id":"ckblu3bzh001fhb8y0dko8wex","_id":"ckblu3bzi001khb8ydzgqd9xz"},{"post_id":"ckblu3byz000jhb8ycybxa6um","tag_id":"ckblu3bzg001ahb8ya98tc585","_id":"ckblu3bzj001ohb8y6xbnb2jb"},{"post_id":"ckblu3bz1000lhb8y5cobgsbn","tag_id":"ckblu3bzj001nhb8ydkh58a5s","_id":"ckblu3bzk001shb8y1yzg3wws"},{"post_id":"ckblu3bz4000phb8y70wdaio3","tag_id":"ckblu3bzj001rhb8ybj257xo1","_id":"ckblu3bzl001vhb8yenko8q9b"},{"post_id":"ckblu3bz6000rhb8y2st4bso9","tag_id":"ckblu3bzk001uhb8y374m9108","_id":"ckblu3bzl001yhb8y3r3ze2ng"},{"post_id":"ckblu3bz8000whb8y3rnc1x0h","tag_id":"ckblu3bzl001xhb8y9ixmeb3o","_id":"ckblu3bzl0020hb8y9snddsbh"},{"post_id":"ckblu3bzc0012hb8y6mvyd7yj","tag_id":"ckblu3bzl001zhb8y8pmpewb0","_id":"ckblu3bzm0022hb8yaqa7f6e2"},{"post_id":"ckblu3bze0016hb8y9jeadsar","tag_id":"ckblu3bzm0021hb8y1z482pkq","_id":"ckblu3bzm0023hb8y5ktf081q"}],"Tag":[{"name":"TensorFlow","_id":"ckblu3byp0005hb8y78g43l5k"},{"name":"flutter","_id":"ckblu3byu000chb8y8bvrh39i"},{"name":"bloc","_id":"ckblu3byy000ihb8yg7wge01g"},{"name":"VPS","_id":"ckblu3bz3000ohb8y5sap501e"},{"name":"Flutter","_id":"ckblu3bz7000vhb8y8qwd7iwk"},{"name":"Create ML","_id":"ckblu3bzd0014hb8y852j3env"},{"name":"Mac","_id":"ckblu3bzg001ahb8ya98tc585"},{"name":"Hexo","_id":"ckblu3bzh001fhb8y0dko8wex"},{"name":"Markdown","_id":"ckblu3bzj001nhb8ydkh58a5s"},{"name":"PT","_id":"ckblu3bzj001rhb8ybj257xo1"},{"name":"面试","_id":"ckblu3bzk001uhb8y374m9108"},{"name":"Swift","_id":"ckblu3bzl001xhb8y9ixmeb3o"},{"name":"中国未来","_id":"ckblu3bzl001zhb8y8pmpewb0"},{"name":"诗词","_id":"ckblu3bzm0021hb8y1z482pkq"}]}}